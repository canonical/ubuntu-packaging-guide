# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2012, Ubuntu Developers
# This file is distributed under the same license as the ubuntu-packaging-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ubuntu-packaging-guide 0.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-11-12 08:45\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:3
# 8f17c16af86c478897a3dcc571c8e6d3
msgid "autopkgtest: Automatic testing for packages"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:5
# 28cc5b2f1c404a5689dc3e5175e1d421
msgid "The `DEP 8 specification`_ defines how automatic testing can very easily be integrated into packages. To integrate a test into a package, all you need to do is:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:9
# 95d72fd7037b496b9d6b3b2a8b66d7ca
msgid "add the following to the Source section in ``debian/control``::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:13
# b5c2d99798b944f281106a4419293b43
msgid "add a file called ``debian/tests/control`` which specifies the requirements for the testbed,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:15
# fbc78f6a4b744a6eb2b050bc161c2bc5
msgid "add the tests in ``debian/tests/``."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:19
# 6612e3165adf478eb7dee76e1b9ef43d
msgid "Testbed requirements"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:21
# 880a7208d2854945bd69b3128872de92
msgid "In ``debian/tests/control`` you specify what to expect from the testbed. So for example you list all the required packages for the tests, if the testbed gets broken during the build or if ``root`` permissions are required. The `DEP 8 specification`_ lists all available options."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:26
# 84f3d6f45d694e489eb3d998538a567b
msgid "Below we are having a look at the ``glib2.0`` source package. In a very simple case the file would look like this::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:32
# 2d031891708c4e57a034f2f53167bd5e
msgid "For the test in ``debian/tests/build`` this would ensure that the packages ``libglib2.0-dev`` and ``build-essential`` are installed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:35
# b3f450e6d3394989886acfc9c653dacc
msgid "You can use ``@`` in the ``Depends`` line to indicate that you want all the packages installed which are built by the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:41
# 0fd797054ebb4417a0ba5d8cb5fbeee5
msgid "The actual tests"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:43
# 76fcc37538a1492498c4bb2484d9121a
msgid "The accompanying test for the example above might be:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:75
# 47de31c0ac5e4bada619003bf2a21580
msgid "Here a very simple piece of C code is written to a temporary directory. Then this is compiled with system libraries (using flags and library paths as provided by `pkg-config`). Then the compiled binary, which just exercises some parts of core glib functionality, is run."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:80
# afdd203d742d44258b462e30cbd45afb
msgid "While this test is very small and basic, it tests quite a number of core components on a system. This may help to uncover critical issues early on."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:84
# e674f7949ddc46beb8f06c89fefdf056
msgid "Executing the test"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:86
# a7618218ad13429dbff3a3132c3fd3f7
msgid "The test script can be easily executed on its own, but if you want to make sure that the testbed is properly set up, you might want to use ``adt-run`` from the ``autopkgtest`` package to execute the test. Simply run this command in the source tree::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:95
# 2e753c93f8294ca8907c2b7e7e955212
msgid "Further examples"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:97
# 2695e71692da429abcf705bdf140d505
msgid "This list is not comprehensive, but might help you get a better idea of how automated tests are implemented and used in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:100
# 654faa06d0ba46c8aeecc0d608dbaa4c
msgid "The `libxml2 tests`_ are very similar. They also run a test-build of a simple piece of C code and execute it."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:102
# c2c1364545494eb0aaddc1fc6d9fd915
msgid "The `gtk+3.0 tests`_ also do a compile/link/run check in the \"build\" test. There is an additional \"python3-gi\" test which verifies that the GTK library can also be used through introspection."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:105
# 32e141cb3e4d419c9860ece1094a1c42
msgid "In the `ubiquity tests`_ the upstream test-suite is executed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:106
# 811d4fec887f40c8bdd1e557cbe8c4ac
msgid "The `gvfs tests`_ have comprehensive testing of their functionality and are very interesting because they emulate usage of CDs, Samba, DAV and other bits."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:111
# 5927e4b7de804e03a1345c66297f7110
msgid "Ubuntu infrastructure"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:113
# 407f495f923446fcbccee4df29a1b1d3
msgid "Packages which have ``autopkgtest`` enabled will have their tests run whenever they get uploaded or any of their reverse-dependencies change. The output of `automatically run autopkgtest tests`_ can be viewed on the web and is regularly updated."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:118
# f6dd74e9d43041deb06186de8b319872
msgid "While Debian does not have an automatic testing infrastructure set up yet, they should still be submitted to Debian, as DEP-8 is a Debian specification and Debian developers or users can still manually run the tests."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:122
# 8044746341bc4a13826a8abc3a5df338
msgid "Packages in Debian with a testsuite header will also be automatically added when they are synced to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:126
# 48cdc89a64fc492687e2c4e9e34facab
msgid "Getting the test into Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:128
# e36180138ba3437b8885fcab6c293f43
msgid "The process of submitting an autopkgtest for a package is largely similar to :doc:`fixing a bug in Ubuntu<./fixing-a-bug>`. Essentially you simply:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:131
# 63f7923d0b8744279cfb13e616861562
msgid "run ``bzr branch ubuntu:<packagename>``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:132
# 869687028b5c420bae37390b5e97d2c1
msgid "edit ``debian/control`` to enable the tests,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:133
# 3acf2209932445a3ba6d56c9937467ad
msgid "add the ``debian/tests`` directory,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:134
# e4088381b85343b8b60c2bf932e46a68
msgid "write the ``debian/tests/control`` based on the `DEP 8 Specification`_,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:135
# 8317178ceb8f47ba828d001709afdf9a
msgid "add your test case(s) to ``debian/tests``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:136
# 08c32ef308fa4946858222ddb294a176
msgid "commit your changes, push them to Launchpad, propose a merge and get it reviewed just like any other improvement in a source package."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:3
# 5676dde37f74445ba6954c4df207d68e
msgid "Backporting software updates"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:5
# 4cec82cd50b94651b83936245223c679
msgid "Sometimes you might want to make new functionality available in a stable release which is not connected to a critical bug fix. For these scenarios you have two options: either you `upload to a PPA <https://help.launchpad.net/Packaging/PPA>`_ or prepare a backport."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:12
# 66874c21ebec4c38a0146f86687fe560
msgid "Personal Package Archive (PPA)"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:14
# 0508eb5d4c90482d83107c1ef160ce6e
msgid "Using a PPA has a number of benefits. It is fairly straight-forward, you don't need approval of anyone, but the downside of it is that your users will have to manually enable it. It is a non-standard software source."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:18
# 4858df3f46c4442caa991300763699f0
msgid "The `PPA documentation on Launchpad`_ is fairly comprehensive and should get you up and running in no time."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:25
# d9ce5fc2d5c749c6abe942a8cdbe817e
msgid "Official Ubuntu Backports"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:27
# a562e0fd42e146f5aa86a3607e9e17b6
msgid "The Backports Project is a means to provide new features to users. Because of the inherent stability risks in backporting packages, users do not get backported packages without some explicit action on their part. This generally makes backports an inappropriate avenue for fixing bugs. If a package in an Ubuntu release has a bug, it should be fixed either through the :doc:`Security Update or the Stable Release Update process<./security-and-stable-release-updates>`, as appropriate."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:35
# dee198028a304319b42e1f29e4ba9085
msgid "Once you determined you want a package to be backported to a stable release, you will need to test-build and test it on the given stable release. ``pbuilder-dist`` (in the ``ubuntu-dev-tools`` package) is a very handy tool to do this easily."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:40
# ece8d79cc9ae47028e8cb8b92b589df5
msgid "To report the backport request and get it processed by the Backporters team, you can use the ``requestbackport`` tool (also in the ``ubuntu-dev-tools`` package). It will determine the intermediate releases that package needs to be backported to, list all reverse-dependencies, and file the backporting request.  Also will it include a testing checklist in the bug."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:3
# 38e6564f818a4d4cb0740d16ef52da27
msgid "Using Chroots"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:5
# 823ab4503c524940bbd4e998f9b188c9
msgid "If you are running one version of Ubuntu but working on packages for another versions you can create the environment of the other version with a ``chroot``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:9
# b00ef48f6a634c378f6b886b34f9aac9
msgid "A ``chroot`` allows you to have a full filesystem from another distribution which you can work in quite normally.  It avoids the overhead of running a full virtual machine."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:14
# d9db6d798df24d9885a2b9d4b9596fbe
msgid "Creating a Chroot"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:16
# a1d3cebc468540ac8e29889a53c0b5bc
msgid "Use the command ``debootstrap`` to create a new chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:20
# b686db367b43499b94ac9ff8133bab81
msgid "This will create a directory ``oneiric`` and install a minimal oneiric system into it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:23
# 0c1100d75aab4f9db6928a42dc630360
msgid "If your version of ``debootstrap`` does not know about oneiric you can try upgrading to the version in ``backports``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:26
# 1175aab7b4da4a388c1ed7927bcee03d
msgid "You can then work inside the chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:30
# d6ef65bea30540ceae11f45773f0685c
msgid "Where you can install or remove any package you wish without affecting your main system."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:33
# 7a2606d300de4726a35512011fdeec7d
msgid "You might want to copy your GPG/ssh keys and Bazaar configuration into the chroot so you can access and sign packages directly::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:39
# c97235335d634cfb9e6c262867e6c784
msgid "To stop apt and other programs complaining about missing locales you can install your relevant language pack::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:44
# 1454afbbc7404aac962ab257c8064fc9
msgid "If you want to run X programs you will need to bind the /tmp directory into the chroot, from outside the chroot run::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:50
# 27a35ee935694ae783309ca8297abb8b
msgid "Some programs may need you to bind /dev or /proc."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:52
# d57fb78d140a49ac8dbadb5956c15a7a
msgid "For more information on chroots see our `Debootstrap Chroot wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:55
# b9a5f8129b6941a69013ca09a706f1da
msgid "Alternatives"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:57
# 097bacb05168418fa5b997ff97b1e537
msgid "SBuild is a system similar to PBuilder for creating an environment to run test package builds in.  It closer matches that used by Launchpad for building packages but takes some more setup compared to PBuilder.  See `the Security Team Build Environment wiki page`_ for a full explanation."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:59
# 143f246db15d4a2aa75f6b113d199395
msgid "Full virtual machines can be useful for packaging and testing programs.  TestDrive is a program to automate syncing and running daily ISO images, see `the TestDrive wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:63
# bb04f31e73884054bd4643a7d2d87fa3
msgid "You can also set up pbuilder to pause when it comes across a build failure.  Copy C10shell from /usr/share/doc/pbuilder/examples into a directory and use the ``--hookdir=`` argument to point to it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:67
# 75171f22c168496f81ab7e5e82885490
msgid "Amazon's `EC2 cloud computers`_ allow you to hire a computer paying a few US cents per hour, you can set up Ubuntu machines of any supported version and package on those.  This is useful when you want to compile many packages at the same time or to overcome bandwidth restraints."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:3
# 38c19a8269bc4ef29aaa9d7dc2fa2b2d
msgid "Communication in Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:5
# 8a017bfd6a5e49f3a5354ca999be3bae
msgid "In a project where thousands of lines of code are changed, lots of decisions are made and hundreds of people interact every day, it is important to communicate effectively."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:10
# 0a841f96c3ca4af4abbd2f9ee8a79739
msgid "Mailing lists"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:12
# 6f49f241be304560b0bbb3ec2eefdce8
msgid "Mailing lists are a very important tool if you want to communicate ideas to a broader team and make sure that you reach everybody, even across timezones."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:16
# d54dab919e194d0fbf35a80d307f2ebb
msgid "In terms of development, these are the most important ones:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:18
# ab0ae0a36f5e4d0e8850b3623a73d2ac
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel-announce (announce-only, the most important development announcements go here)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:20
# 5f35350850814f0fa18f6d38ca5cd32e
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel (general Ubuntu development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:22
# b5e99831830b46f8b214d30e900b5dd5
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-motu (MOTU Team discussion, get help with packaging)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:27
# 85d0523f314d4310b5c61b6b56c030ad
msgid "IRC Channels"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:29
# 3d3f53defb1940c6b2f0bb2df617e580
msgid "For real-time discussions, please connect to irc.freenode.net and join one or any of these channels:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:32
# b940451ecf5d4ddf8389e64d99930613
msgid "#ubuntu-devel (for general development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:33
# 79dd19687a3d4249bd7b0f6197d7eabe
msgid "#ubuntu-motu (for MOTU team discussion and generally getting help)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:2
# 91e7c9a3675d436691fc68fdb9a56922
msgid "Basic Overview of the ``debian/`` Directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:4
# db6d2f7d62e24f91b4b90673e016ef88
msgid "This article will briefly explain the different files important to the packaging of Ubuntu packages which are contained in the ``debian/`` directory. The most important of them are ``changelog``, ``control``, ``copyright``, and ``rules``. These are required for all packages. A number of additional files in the ``debian/`` may be used in order to customize and configure the behavior of the package. Some of these files are discussed in this article, but this is not meant to be a complete list."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:13
# 7855f4cc5ca64c6cac2f4242fe461e54
msgid "The changelog"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:15
# eb6f4c21da25486eb398229b4d1d4835
msgid "This file is, as its name implies, a listing of the changes made in each version. It has a specific format that gives the package name, version, distribution, changes, and who made the changes at a given time. If you have a GPG key (see: :doc:`Getting set up<./getting-set-up/>`), make sure to use the same name and email address in ``changelog`` as you have in your key. The following is a template ``changelog``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:31
# f73ad49ba3d1443f8c69806f07026f65
msgid "The format (especially of the date) is important. The date should be in :rfc:`5322` format, which can be obtained by using the command ``date -R``. For convenience, the command ``dch`` may be used to edit changelog. It will update the date automatically."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:36
# 82cad28b54564c00b2e36e5614f75ebb
msgid "Minor bullet points are indicated by a dash \"-\", while major points use an asterisk \"*\"."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:39
# ef84d9a3313d47b19921467e152c7a89
msgid "If you are packaging from scratch, ``dch --create`` (``dch`` is in the ``devscripts`` package) will create a standard ``debian/changelog`` for you."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:43
# e45c1a44ffef497d929b6bdb1eaa5a69
msgid "Here is a sample ``changelog`` file for hello::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:52
# 97f04e18adbd4cf2859e660f84e60eb3
msgid "Notice that the version has a ``-0ubuntu1`` appended to it, this is the distro revision, used so that the packaging can be updated (to fix bugs for example) with new uploads within the same source release version."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:56
# df4f1568620f485881115187d071e0fc
msgid "Ubuntu and Debian have slightly different package versioning schemes to avoid conflicting packages with the same source version. If a Debian package has been changed in Ubuntu, it has ``ubuntuX`` (where ``X`` is the Ubuntu revision number) appended to the end of the Debian version. So if the Debian hello ``2.6-1`` package was changed by Ubuntu, the version string would be ``2.6-1ubuntu1``. If a package for the application does not exist in Debian, then the Debian revision is ``0`` (e.g. ``2.6-0ubuntu1``)."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:64
# 3d8a22d892a7461b9baf2771a33c2163
msgid "For further information, see the `changelog section (Section 4.4) <http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:70
# 94177ade93c04e10a7859ba41b0df121
msgid "The control file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:72
# c1389ce2f27f4cf6bb4f9257510ec0d7
msgid "The ``control`` file contains the information that the package manager (such as ``apt-get``, ``synaptic``, and ``adept``) uses, build-time dependencies, maintainer information, and much more."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:76
# 913f1119d1e746d8873f8a316eff26c4
msgid "For the Ubuntu ``hello`` package, the ``control`` file looks something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:101
# 11060c8577c9469381ab658931f27cc2
msgid "The first paragraph describes the source package including the list of packages required to build the package from source in the ``Build-Depends`` field. It also contains some meta-information such as the maintainer's name, the version of Debian Policy that the package complies with, the location of the packaging version control repository, and the upstream home page."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:108
# a02e62fb0e4f4edd994768f71f8f9d9b
msgid "Note that in Ubuntu, we set the ``Maintainer`` field to a general address because anyone can change any package (this differs from Debian where changing packages is usually restricted to an individual or a team). Packages in Ubuntu should generally have the ``Maintainer`` field set to ``Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>``. If the Maintainer field is modified, the old value should be saved in the ``XSBC-Original-Maintainer`` field. This can be done automatically with the  ``update-maintainer`` script available in the ``ubuntu-dev-tools`` package. For further information, see the `Debian Maintainer Field spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ on the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:120
# 11bc938964724e1e83010547d2b08b71
msgid "Each additional paragraph describes a binary package to be built."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:122
# 4ef202141d724a2faa9bf6c797cad6e2
msgid "For further information, see the `control file section (Chapter 5) <http://www.debian.org/doc/debian-policy/ch-controlfields.html>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:128
# 2cf72a0614574a918649728cf34aef0c
msgid "The copyright file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:130
# 373e98b63bcd42e0b9430cba54acf1e7
msgid "This file gives the copyright information for both the upstream source and the packaging. Ubuntu and `Debian Policy (Section 12.5) <http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile>`_ require that each package installs a verbatim copy of its copyright and license information to ``/usr/share/doc/$(package_name)/copyright``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:136
# 9c056cadeb78419e9b015627bf2a7ccc
msgid "Generally, copyright information is found in the ``COPYING`` file in the program's source directory. This file should include such information as the names of the author and the packager, the URL from which the source came, a Copyright line with the year and copyright holder, and the text of the copyright itself. An example template would be::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:178
# 1ae3d116efc8468ca3aff617153b9d9e
msgid "This example follows the `Machine-readable debian/copyright <http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/>`_ format. You are encouraged to use this format as well."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:184
# 7fdace0d8d4f45ee91a21c00190e5e95
msgid "The rules file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:186
# 9191874adf7a4fcea48f6d1eb6427d4b
msgid "The last file we need to look at is ``rules``. This does all the work for creating our package. It is a Makefile with targets to compile and install the application, then create the ``.deb`` file from the installed files. It also has a target to clean up all the build files so you end up with just a source package again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:194
# 291d23e67a3d4d4ea4323d34552d2828
msgid "Here is a simplified version of the rules file created by ``dh_make`` (which can be found in the ``dh-make`` package):"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:208
# 17a28625c4a5443096a26bbc365e76e5
msgid "Let us go through this file in some detail. What this does is pass every build target that ``debian/rules`` is called with as an argument to ``/usr/bin/dh``, which itself will call all the necessary ``dh_*`` commands."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:212
# 2c7891905a294e369fbaadb1b9e30b2d
msgid "``dh`` runs a sequence of debhelper commands. The supported sequences correspond to the targets of a ``debian/rules`` file: \"build\", \"clean\", \"install\", \"binary-arch\", \"binary-indep\", and \"binary\". In order to see what commands are run in each target, run::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:221
# e41a1535979d41b4bd5e6d0b65534aad
msgid "Commands in the binary-indep sequence are passed the \"-i\" option to ensure they only work on binary independent packages, and commands in the binary-arch sequences are passed the \"-a\" option to ensure they only work on architecture dependent packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:226
# 0876a9b7813148158b7fbac59a20bab7
msgid "Each debhelper command will record when it's successfully run in ``debian/package.debhelper.log``. (Which dh_clean deletes.) So dh can tell which commands have already been run, for which packages, and skip running those commands again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:231
# 48bb32e31cca47bead921f34662cec73
msgid "Each time ``dh`` is run, it examines the log, and finds the last logged command that is in the specified sequence. It then continues with the next command in the sequence. The ``--until``, ``--before``, ``--after``, and ``--remaining`` options can override this behavior."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:236
# 7c2c9d9ca14f40aba70e8f997d669175
msgid "If ``debian/rules`` contains a target with a name like ``override_dh_command``, then when it gets to that command in the sequence, ``dh`` will run that target from the rules file, rather than running the actual command. The override target can then run the command with additional options, or run entirely different commands instead. (Note that to use this feature, you should Build-Depend on debhelper 7.0.50 or above.)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:245
# fe78738a8b2d4d529fff15b98221e256
msgid "Have a look at ``/usr/share/doc/debhelper/examples/`` and ``man dh`` for more examples. Also see `the rules section (Section 4.9) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:251
# d411f20d56e645dea57df98f5fd5fc0a
msgid "Additional Files"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:254
# 0c4fd57a10644ece8e002f5e3ec8b32b
msgid "The install file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:256
# d0c0b249e02d41ef8745612d24b3cc61
msgid "The ``install`` file is used by ``dh_install`` to install files into the binary package. It has two standard use cases:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:259
# 8ec299e2d5dc4c37ba89ac5893bb8179
msgid "To install files into your package that are not handled by the upstream build system."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:260
# eb1034c778b245f381984a444a8cef62
msgid "Splitting a single large source package into multiple binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:262
# 83efae478ff8403091336c03ab62676a
msgid "In the first case, the ``install`` file should have one line per file installed, specifying both the file and the installation directory. For example, the following ``install`` file would install the script ``foo`` in the source package's root directory to ``usr/bin`` and a desktop file in the ``debian`` directory to ``usr/share/applications``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:273
# e762582752f645079455c6408e041b43
msgid "When a source package is producing multiple binary packages ``dh`` will install the files into ``debian/tmp`` rather than directly into ``debian/<package>``. Files installed into ``debian/tmp`` can then be moved into separate binary packages using multiple ``$package_name.install`` files. This is often done to split large amounts of architecture independent data out of architecture dependent packages and into ``Architecture: all`` packages. In this case, only the name of the files (or directories) to be installed are needed without the installation directory. For example, ``foo.install`` containing only the architecture dependent files might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:286
# 099cb136d59a4634a6d9c49a8fca8962
msgid "While ``foo-common.install`` containing only the architecture independent file might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:294
# ade14f30ed734c4688dadece15d29066
msgid "This would create two binary packages, ``foo`` and ``foo-common``. Both would require their own paragraph in ``debian/control``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:297
# 94feff1b802b4f46a99212c2b2d92ebd
msgid "See ``man dh_install`` and the `install file section (Section 5.11) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#install>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:302
# 8938a63b17c543b88aa0322c3ed2f7ff
msgid "The watch file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:304
# 3ebc4b67909c436dbabef77f6ea86157
msgid "The ``debian/watch`` file allows us to check automatically for new upstream versions using the tool ``uscan`` found in the ``devscripts`` package. The first line of the watch file must be the format version (3, at the time of this writing), while the following lines contain any URLs to parse. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:313
# 1829b1f711754597bc231d151131c9a6
msgid "Running ``uscan`` in the root source directory will now compare the upstream version number in ``debian/changelog`` with the latest available upstream version. If a new upstream version is found, it will be automatically downloaded. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:326
# 82d96188c6494ad3bd1cc6853e67d630
msgid "If your tarballs live on Launchpad, the ``debian/watch`` file is a little more complicated (see `Question 21146`_ and `Bug 231797`_ for why this is).  In that case, use something like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:333
# 1d3cf6b4827044efbc2d945e17c80882
msgid "For further information, see ``man uscan`` and the `watch file section (Section 4.11) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianwatch>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:337
# a72231d2e1f9400db94141a09af4a4bc
msgid "For a list of packages where the ``watch`` file reports they are not in sync with upstream see `Ubuntu External Health Status <http://qa.ubuntuwire.org/uehs/no_updated.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:342
# 43385de7841746679ccf82908ff95180
msgid "The source/format file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:344
# d794b73a60d547fba230e178ce00c310
msgid "This file indicates the format of the source package. It should contain a single line indicating the desired format:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:347
# dac65f8272fa4df8920a6229279fe09a
msgid "``3.0 (native)`` for Debian native packages (no upstream version)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:349
# 239bbd86b69e45c5bab8971d5d9feaaa
msgid "``3.0 (quilt)`` for packages with a separate upstream tarball"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:351
# 4f3a320615b04badb3da8b2575be1526
msgid "``1.0`` for packages wishing to explicitly declare the default format"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:353
# 6658403c5cd948a8b625cb6c66fec214
msgid "Currently, the package source format will default to 1.0 if this file does not exist. You can make this explicit in the source/format file. If you choose not to use this file to define the source format, Lintian will warn about the missing file. This warning is informational only and may be safely ignored."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:358
# cf65af3b3776441e842e1ba750bbf51a
msgid "You are encouraged to use the newer 3.0 source format. It provides a number of new features:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:361
# 9a1929c4b29b42da9c4295592d514aaf
msgid "Support for additional compression formats: bzip2, lzma and xz"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:363
# 4489fd04cdb94549b26492557430372d
msgid "Support for multiple upstream tarballs"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:365
# 2d8ea94428c04d6a988479299ba63b39
msgid "Not necessary to repack the upstream tarball to strip the debian directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:367
# 0e3a878ef44b429091f6022e53f8214e
msgid "Debian-specific changes are no longer stored in a single .diff.gz but in multiple patches compatible with quilt under ``debian/patches/``"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:369
# 503eee0f09a043008eb751a7552bc4de
msgid "http://wiki.debian.org/Projects/DebSrc3.0 summarizes additional information concerning the switch to the 3.0 source package formats."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:372
# 4a5c8141e34740ba9aa074713fdcd2a1
msgid "See ``man dpkg-source`` and the `source/format section (Section 5.21) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#sourcef>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:377
# 2b8859ff20154b2f84b75920b3f287bb
msgid "Additional Resources"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:379
# a1728c471e3a495fb33166319a38c613
msgid "In addition to the links to the Debian Policy Manual in each section above, the Debian New Maintainers' Guide has more detailed descriptions of each file. `Chapter 4, \"Required files under the debian directory\" <http://www.debian.org/doc/maint-guide/dreq.en.html>`_ further discusses the control, changelog, copyright and rules files. `Chapter 5, \"Other files under the debian directory\" <http://www.debian.org/doc/maint-guide/dother.en.html>`_ discusses additional files that may be used."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:3
# 91b97b391bf043658165f6cccd38f96c
msgid "Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:6
#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:9
# 1f03733189b5460b810c772a2acdb7af
# 70a938265660482e83a524f0241a4eaa
msgid "Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:8
# 8c8a22c8ac6a496d9452235857ecdf29
msgid "If you followed the instructions to :doc:`get set up with Ubuntu Development<./getting-set-up>`, you should be all set and ready to go."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:13
# e9bb465ffa7e4b78805c27b72c3697f6
msgid "As you can see in the image above, there is no surprises in the process of fixing bugs in Ubuntu: you found a problem, you get the code, work on the fix, test it, push your changes to Launchpad and ask for it to be reviewed and merged. In this guide we will go through all the necessary steps one by one."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:20
# 02bc60e67a66446198243e1743932861
msgid "Finding the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:22
# 117334722b17498e8fe9ad3dbe87d355
msgid "There are a lot of different ways to find things to work on. It might be a bug report you are encountering yourself (which gives you a good opportunity to test the fix), or a problem you noted elsewhere, maybe in a bug report."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:26
# 3e1f990bbee347d59fd70324f6b7dba8
msgid "`Harvest <http://harvest.ubuntu.com/>`_ is where we keep track of various TODO lists regarding Ubuntu development. It lists bugs that were fixed upstream or in Debian already, lists small bugs (we call them 'bitesize'), and so on. Check it out and find your first bug to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:35
# 959ccb2990bf4fd191ece427dfb554ac
msgid "Figuring out what to fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:37
# ab79aaa940794e2f9869667e9d4dfae7
msgid "If you don't know the source package containing the code that has the problem, but you do know the path to the affected program on your system, you can discover the source package that you'll need to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:41
# f9710343841c4e4fa0820bd7448251ca
msgid "Let's say you've found a bug in Tomboy, a note taking desktop application. The Tomboy application can be started by running ``/usr/bin/tomboy`` on the command line.  To find the binary package containing this application, use this command::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:48
# 967f2e15bf03482395ef509d748d458c
msgid "This would print out::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:52
# 4a036c5817f74731936f44f5af9fc2a1
msgid "Note that the part preceding the colon is the binary package name.  It's often the case that the source package and binary package will have different names. This is most common when a single source package is used to build multiple different binary packages.  To find the source package for a particular binary package, type::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:63
# 3327d29a3e0b4fd591ba419a7573af17
msgid "``apt-cache`` is part of the standard installation of Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:66
# 382c7f6a5b964ae59b98bf377968d574
msgid "Getting the code"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:68
# dd671671bf7f488ab1989949991f7f8c
msgid "Once you know the source package to work on, you will want to get a copy of the code on your system, so that you can debug it.  In Ubuntu Distributed Development this is done by :ref:`*branching* the source package <branching>` branch corresponding to the source package.  Launchpad maintains source package branches for all the packages in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:74
# 17f847b9ca6b412fae5f3d876762abf1
msgid "Once you've got a local branch of the source package, you can investigate the bug, create a fix, and upload your proposed fix to Launchpad, in the form of a Bazaar branch.  When you are happy with your fix, you can :ref:`submit a *merge proposal* <merge-proposal>`, which asks other Ubuntu developers to review and approve your change.  If they agree with your changes, an Ubuntu developer will upload the new version of the package to Ubuntu so that everyone gets the benefit of your excellent fix - and you get a little bit of credit.  You're now on your way to becoming an Ubuntu developer!"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:83
# 577ebde6199645369d82106002bbf7ce
msgid "We'll describe specifics on how to branch the code, push your fix, and request a review in the following sections."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:88
# 9eb833c901cd4219920bcd608581268c
msgid "Work on a fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:90
# 412726b03775437395c32f5276a53f0d
msgid "There are entire books written about finding bugs, fixing them, testing them, etc. If you are completely new to programming, try to fix easy bugs such as obvious typos first. Try to keep changes as minimal as possible and document your change and assumptions clearly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:95
# f83ebc8d83204dd583cb2b0ffec3c0e4
msgid "Before working on a fix yourself, make sure to investigate if nobody else has fixed it already or is currently working on a fix. Good sources to check are:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:98
# 2d700b52f9f14461968ec25e3f1f6f4b
msgid "Upstream (and Debian) bug tracker (open and closed bugs),"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:99
# 2dde7663d27a49c0a1483104495fe7fb
msgid "Upstream revision history (or newer release) might have fixed the problem,"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:100
# acfc715f8e3f45ea9c94bcfce6ef4b6c
msgid "bugs or package uploads of Debian or other distributions."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:105
# 444348cc53ce45b19961990ce0ab677a
msgid "You now want to create a patch which includes the fix.  The command ``edit-patch`` is a simple way to add a patch to a package. Run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:110
# 2bd407c94ded4f3ba9ee2fded7da27ee
msgid "This will copy the packaging to a temporary directory.  You can now edit files with a text editor or apply patches from upstream, for example::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:115
# 49fb20c7218b4aa5b067ae79b7aca1b0
msgid "After editing the file type ``exit`` or press ``control-d`` to quit the temporary shell.  The new patch will have been added into ``debian/patches``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:120
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:204
# 94e4878c3c3248a6a3846006abc35fa5
# 077781e2002d4815b790d4918333d968
msgid "Testing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:122
# 9ce4c5c4b38f4e7f834b70ccc507e39b
msgid "To build a test package with your changes, run these commands::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:127
# dfbdbc0b31d14500ae96c4bec4e7b008
msgid "This will create a source package from the branch contents (``-us -uc`` will just omit the step to sign the source package) and ``pbuilder-dist`` will build the package from source for whatever ``release`` you choose."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:131
# fdf0eafdc9e54a3faa42de54d20ff30e
msgid "Once the build succeeds, install the package from ``~/pbuilder/<release>_result/`` (using ``sudo dpkg -i <package>_<version>.deb``).  Then test to see if the bug is fixed."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:138
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:155
# b30949d453a244eea22aff183693d048
# 5945fc30ec5c4a07abaec36f85d0c122
msgid "Documenting the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:140
# 1f85255d7bac40bdb29b9aafa462e82b
msgid "It is very important to document your change sufficiently so developers who look at the code in the future won't have to guess what your reasoning was and what your assumptions were. Every Debian and Ubuntu package source includes ``debian/changelog``, where changes of each uploaded package are tracked."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:145
# e84718695e6249fa93c34282310dd517
msgid "The easiest way to update this is to run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:149
# c5494fba111f40f78047c49ddfaf8d11
msgid "This will add a boilerplate changelog entry for you and launch an editor where you can fill in the blanks. An example of this could be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:158
# 1df560da10774432b101fdeb4e08c2a4
msgid "``dch`` should fill out the first and last line of such a changelog entry for you already. Line 1 consists of the source package name, the version number, which Ubuntu release it is uploaded to, the urgency (which almost always is 'low'). The last line always contains the name, email address and timestamp (in :rfc:`5322` format) of the change."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:164
# 1657a8d555694a09b7e5e57447f7225c
msgid "With that out of the way, let's focus on the actual changelog entry itself: it is very important to document:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:167
# 677a5d28ec814beebfd194afb216dcb3
msgid "where the change was done"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:168
# 62afe6fe87ed47a2aefd2e029abadfc7
msgid "what was changed"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:169
# 26c68b644bdc4518b69ada926e4d7d0f
msgid "where the discussion of the change happened"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:171
# 0fb1cb23cf2b4071b2b8677110d3ccc0
msgid "In our (very sparse) example the last point is covered by ``(LP: #123456)`` which refers to Launchpad bug 123456. Bug reports or mailing list threads or specifications are usually good information to provide as a rationale for a change. As a bonus, if you use the ``LP: #<number>`` notation for Launchpad bugs, the bug will be automatically closed when the package is uploaded to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:180
# eead39c533c74e08bf30ca2cbf16d605
msgid "Committing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:182
# 70299c388e70449c8dc10647e81164db
msgid "With the changelog entry written and saved, you can just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:186
# f94703cbf2c74544bdda7019cdd474d5
msgid "and the change will be committed (locally) with your changelog entry as a commit message."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:189
# aeaf3cf51dc54510b7cc7f11dea91240
msgid "To push it to Launchpad, as the remote branch name, you need to stick to the following nomenclature::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:194
# 991974de569b4a7689e13474cfda1008
msgid "This could for example be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:198
# fd1115b24b154b22b573b354d1165b74
msgid "So if you just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:203
# 60a9c9ebf8b745a392f371236fbf85aa
msgid "you should be all set. The push command should push it to Launchpad and the second command will open the Launchpad page of the remote branch in your browser. There find the \"(+) Propose for merging\" link, click it to get the change reviewed by somebody and included in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:208
# 2bb06ab6dbcc4bef9e88c80c8466cb19
msgid "Our article about :doc:`seeking sponsorship<./udd-sponsorship>` goes into more detail about getting feedback for your proposed changes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:211
# 681ca7d047bd450a91de2827457d3ffb
msgid "If your branch fixes issues in stable releases or it is a security fix, you might want to have a look at our :doc:`Security and stable release updates<./security-and-stable-release-updates>` article."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:3
# 90caa0b53af84d6d8684267cf6168c0f
msgid "Tutorial: Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:5
# b391a41cdffb404785a4baadf4f45159
msgid "While the mechanics for :doc:`fixing a bug<./fixing-a-bug>` are the same for every bug, every problem you look at is likely to be different from another. An example of a concrete problem might help to get an idea what to consider generally."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:10
# f9b3f4cf95754aa8afe251de34fc20d8
msgid "At the time of writing this article this was not fixed yet. When you are reading the article this might actually be fixed. Take this as an example and try to adapt it to the specific problem you are facing."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:15
# 15bd939693af49728a7fc3052b857a5d
msgid "Confirming the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:17
# f2c73300d31945d0baf7badac72b3755
msgid "Let's say the package ``bumprace`` does not have a homepage in its package description. As a first step you would check if the problem is not solved already. This is easy to check, either take a look at Software Center or run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:23
# 3a223f05d66f45b58c472937f9704fc7
msgid "The output should be similar to this::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:49
# 97458dcddafe4b689c7bb5f5a0d0cd20
msgid "A counter-example would be ``gedit``, which has a homepage set::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:55
# 6715e333cbd04b3690efd3f216b62bd4
msgid "Sometimes you will find that a particular problem you are looking into is already fixed. To avoid wasting efforts and duplicating work it makes sense to first do some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:61
# 9c8da8f7f75a45428cfbb54c9f0b3c0b
msgid "Research bug situation"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:63
# 1cb8620e4ad5490b9dadeaf1e828e1ac
msgid "First we should check if a bug for the problem exists in Ubuntu already. Maybe somebody is working on a fix already, or we can contribute to the solution somehow. For Ubuntu we have a quick look at https://bugs.launchpad.net/ubuntu/+source/bumprace and there is no open bug with our problem there."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:69
# d1026ad5fea24975b1470f27917e87df
msgid "For Ubuntu the URL ``https://bugs.launchpad.net/ubuntu/+source/<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:73
# 445139a4f5724b1898e6cc384c61432c
msgid "For Debian, which is the major source for Ubuntu's packages, we have a look at http://bugs.debian.org/src:bumprace and can't find a bug report for our problem either."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:77
# 21adf7e7408e4d2faf794fcae764d6ca
msgid "For Debian the URL ``http://bugs.debian.org/src:<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:80
# 78e7c56f0aac4545bce6a0fad6598bd1
msgid "The problem we are working on is special as it only concerns the packaging-related bits of ``bumprace``. If it was a problem in the source code it would be helpful to also check the Upstream bug tracker. This is unfortunately often different for every package you have a look at, but if you search the web for it, you should in most cases find it pretty easily."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:88
# eb83c31258ee417292d608bc2bf62e7e
msgid "Offering help"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:90
# f456de88871849afa773c9985aedab6f
msgid "If you found an open bug and it is not assigned to somebody and you are in a position to fix it, you should comment on it with your solution. Be sure to include as much information as you can: Under which circumstances does the bug occur? How did you fix the problem? Did you test your solution?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:95
# cf513779a3d8470798ab189f4190e9a9
msgid "If no bug report has been filed, you can file a bug for it. What you might want to bear in mind is: Is the issue so small that just asking for somebody to commit it is good enough? Did you manage to only partially fix the issue and you want to at least share your part of it?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:100
# ef47208ef0ed497c972f1f7fbea9a040
msgid "It is great if you can offer help and will surely be appreciated."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:104
# c5d1f352e2f8484490a77811406a9c8b
msgid "Fixing the issue"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:106
# b7b59f3182d6446aa8a5a60cb2326bed
msgid "For this specific example it is enough to search the web for ``bumprace`` and find the homepage of it. Be sure it is a live site and not just a software catalogue. http://www.linux-games.com/bumprace/ looks like it is the proper place."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:111
# 64bfc81f2b9c469ba560243ea5cc1a48
msgid "To address the issue in the source package, we first need the source and we can easily get it by running::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:117
# de326c94e4e34ea9b33fb7fa200ce7ff
msgid "If you read :doc:`the Debian Directory Overview<./debian-dir-overview>` before, you might remember, that the homepage for a package is specified in the first part of ``debian/control``, the section which starts with ``Source:``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:121
# 78861a0e6a724155b278f427ced36af8
msgid "So what we do next is run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:125
# ba9bd2b9689c4166b333b67e08dfc0b0
msgid "and edit ``debian/control`` to add ``Homepage: http://www.linux-games.com/bumprace/``. At the end of the first section should be a good place for it. Once you have done this, save the file."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:129
# 36970eb9b7d04526964ec2529636fe9e
msgid "If you now run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:133
# 7c49384de48e4ffd99b881beb78558ab
msgid "you should see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:149
# 585e9edc9ce1498aab1f704556babbb2
msgid "The diff is pretty simple to understand. The ``+`` indicates a line which was added. In our cases it was added just before the second section, starting with ``Package``, which indicates a resulting binary package."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:157
# 15f8d71bb518422aa7e21947707d34ca
msgid "It is important to explain to your fellow developers what exactly you did. If you run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:163
# 32932c6937ba4ac59570db6fdbcb49ce
msgid "this will start an editor with a boilerplate changelog entry which you just have to fill out. In our case something like ``debian/control: Added project's homepage.`` should do. Then save the file. To double-check this worked out, run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:170
# ce356da0226f465caeeb742be39cb92e
msgid "and you will see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:189
# eeced16e4719479a96b5b25ecc3b054b
msgid "A few additional considerations:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:191
# d134a26e8c6043c4b6fe6bb0e5496945
msgid "If you have a reference to a Launchpad bug which is fixed by the issue, add (``LP: #<bug number>``) to the changelog entry line, ie: ``(LP: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:193
# c36c0728d3964ad89ad1875b1d928534
msgid "If you want to get your fix included in Debian, for a Debian bug the syntax is ``(Closes: #<bug number>)``, ie: ``(Closes: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:195
# 86f9e8e52e62465fbda5a05233586752
msgid "If it is a reference to an upstream or Debian bug or a mailing list discussion, mention it as well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:197
# 8ae26e7809d34a5b9979906dd1d47c99
msgid "Try to wrap your lines at 80 characters."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:198
# 37a8cd63098e474784d77001530f66a1
msgid "Try to be specific, not an essay, but enough for somebody (who did not deeply look into the issue) to understand."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:200
# d66f11bea31d496b9b9c577da61422fe
msgid "Mention how you fixed the issue and where."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:206
# 61b5177e1ed64d59bbd188e0c85f0a72
msgid "To test the fix, you need to :doc:`have your development environment set up<./getting-set-up>`, then to build the package, install it and verify the problem is solved. In our case this would be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:214
# 3c4982a4c989437db7ffa13aad0a5fd2
msgid "In step one we build the source package from the branch, then build it by using ``pbuilder``, then inspect the resulting package to check if the Homepage field was added properly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:218
# f0411c505ba74d2f840182e6e8676cc6
msgid "In a lot of cases you will have to actually install the package to make sure it works as expected. Our case is a lot easier. If the build succeeded, you will find the binary packages in ``~/pbuilder/<release>_result``. Install them via ``sudo dpkg -i <package>.deb`` or by double-clicking on them in your file manager."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:225
# f63799dc70fe48fa8f6ec3d99d52bea4
msgid "As we verified, the problem is now solved, so the next step is sharing our solution with the world."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:229
# f448b5373e51489c9f84e749bdfd3413
msgid "Getting the fix included"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:231
# ca7783bf7f264e06992c37c8d23683ba
msgid "It makes to get fix included as Upstream as possible. Doing that you can guarantee that everybody can take the Upstream source as-is and don't need to have local modifications to fix it."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:235
# 51441bdc43bb437189c1860077983a3f
msgid "In our case we established that we have a problem with the packaging, both in Ubuntu and Debian. As Ubuntu is based on Debian, we will send the fix to Debian. Once it is included there, it will be picked up by Ubuntu eventually. The issue in our tutorial is clearly non-critical, so this approach makes sense. If it is important to fix the issue as soon as possible, you will need to send the solution to multiple bug trackers. Provided the issue affects all parties in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:243
# 50b355a762944fbb8252d85bdaa7812b
msgid "To submit the patch to Debian, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:247
# 814ec14cf77d47b0896f26982b16c23c
msgid "This will take you through a series of steps to make sure the bug ends up in the correct place. Be sure to review the diff again to make sure it does not include random changes you made earlier."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:251
# 68acec6b02b643edb9d175ea3e2b5af9
msgid "Communication is important, so when you add some more description to it to the inclusion request, be friendly, explain it well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:254
# 365a108132914e2a9ec4c6061bef7267
msgid "If everything went well you should get a mail from Debian's bug tracking system with more information. This might sometimes take a few minutes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:257
# 9cfa84f0ca34456c8dccbd1c1fe61675
msgid "If the problem is just in Ubuntu, you might want to consider :doc:`Seeking Review and Sponsorship<./udd-sponsorship>` to get the fix included."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:263
# d7f5d23048b14818bd28695c0764d7c4
msgid "Additional considerations"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:265
# dceef4e760ff4b8a87f443d0ac5e8480
msgid "If you find a package and find that there are a couple of trivial things you can fix at the same time, do it. This will speed up review and inclusion."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:268
# 93b66d5da17247768d959b30a68b9021
msgid "If there are multiple big things you want to fix, it might be advisable to send individual patches or merge proposals instead. If there are individual bugs filed for the issues already, this makes it even easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:3
# ab78bddbc23c465892a35ad432f2062b
msgid "Getting Set Up"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:5
# c2b9787e22a34223997fe76bf024542b
msgid "There are a number of things you need to do to get started developing for Ubuntu. This article is designed to get your computer set up so that you can start working with packages, and upload your packages to Ubuntu's hosting platform, Launchpad. Here's what we'll cover:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:10
# 8a9f330bdc124af681e1169467c50cae
msgid "Installing packaging-related software. This includes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:12
# 81e5865b56644c0897ddb1425c1e470a
msgid "Ubuntu-specific packaging utilities"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:13
# 45226e8916484ad6ac5933d9d817ed75
msgid "Encryption software so your work can be verified as being done by you"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:14
# f9525b133cc24bbd909e9587b8db9d86
msgid "Additional encryption software so you can securely transfer files"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:16
# 28a0520632374901a5009cb285d5f925
msgid "Creating and configuring your account on Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:17
# a2ce851362a44031957d5f86f8292105
msgid "Setting up your development environment to help you do local builds of packages, interact with other developers, and propose your changes on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:22
# abc8a23e93784177ac8fe15936b0a194
msgid "It is advisable to do packaging work using the current development version of Ubuntu. Doing so will allow you to test changes in the same environment where those changes will actually be applied and used."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:26
# be76e8d97ebd41298552fe6f4172bb5c
msgid "Don't worry though, the `Ubuntu development release wiki page <https://wiki.ubuntu.com/UsingDevelopmentReleases>`_ shows a variety of ways to safely use the development release."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:32
# 34258aabdea54b53b148bf26d742d1ff
msgid "Install basic packaging software"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:34
# 73d7c73faaaa4745a25b36ed1077658b
msgid "There are a number of tools that will make your life as an Ubuntu developer much easier.  You will encounter these tools later in this guide.  To install most of the tools you will need run this command::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:41
# 4e9c1ebed062450c98bfc6f66de0b4ea
msgid "Note: Since Ubuntu 11.10 \"Oneiric Ocelot\" (or if you have Backports enabled on a currently supported release), the following command will install the above and other tools which are quite common in Ubuntu development::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:49
# eb1bd6f94e3b4200975f685ea94006d6
msgid "This command will install the following software:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:51
# 8b1f3737ec0b4e74bc3725407288f592
msgid "``gnupg`` -- `GNU Privacy Guard`_ contains tools you will need to create a cryptographic key with which you will sign files you want to upload to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:54
# 5435d9e3b66944abb61dbcdeb464aefa
msgid "``pbuilder`` -- a tool to do reproducible builds of a package in a clean and isolated environment."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:56
# 05c9690ab4794203a14f4cd095f614a9
msgid "``ubuntu-dev-tools`` (and ``devscripts``, a direct dependency) -- a collection of tools that make many packaging tasks easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:58
# 81abd1c26ea1435a96d576e07b415b32
msgid "``bzr-builddeb`` (and ``bzr``, a dependency) -- distributed version control with Bazaar, a new way of working with packages for Ubuntu that will make it easy for many developers to collaborate and work on the same code while keeping it trivial to merge each other's work."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:62
# 910758756b0744d7833da50f1a59f9bf
msgid "``apt-file`` provides an easy way to find the binary package that contains a given file."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:67
# bd77fbbe6c374a1ebab099f2fca823cf
msgid "Create your GPG key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:69
# 746a22a19f9f46de92ac24217b7afe7d
msgid "GPG stands for `GNU Privacy Guard`_ and it implements the OpenPGP standard which allows you to sign and encrypt messages and files. This is useful for a number of purposes. In our case it is important that you can sign files with your key so they can be identified as something that you worked on. If you upload a source package to Launchpad, it will only accept the package if it can absolutely determine who uploaded the package."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:76
# 75e89e8d482342b188960cc70f884eae
msgid "To generate a new GPG key, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:80
# c3d8f41001024cd1bbcd7ad3b411c697
msgid "GPG will first ask you which kind of key you want to generate. Choosing the default (RSA and DSA) is fine. Next it will ask you about the keysize. The default (currently 2048) is fine, but 4096 is more secure. Afterwards, it will ask you if you want it to expire the key at some stage. It is safe to say \"0\", which means the key will never expire. The last questions will be about your name and email address. Just pick the ones you are going to use for Ubuntu development here, you can add additional email addresses later on. Adding a comment is not necessary. Then you will have to set a passphrase, choose a safe one (a passphrase is just a password which is allowed to include spaces)."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:90
# 728a2e4a94b34be3bf370beb413252ea
msgid "Now GPG will create a key for you, which can take a little bit of time; it needs random bytes, so if you give the system some work to do it will be just fine.  Move the cursor around, type some paragraphs of random text, load some web page."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:95
# 80d0519771f540b395048da0b7e72530
msgid "Once this is done, you will get a message similar to this one::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:102
# 2f4273a5e27d4a079e719db9e71cc161
msgid "In this case ``43CDE61D`` is the *key ID*."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:104
# f14e0fdfc6464301bf8ff69665b3bbe1
msgid "Next, you need to upload the public part of your key to a keyserver so the world can identify messages and files as yours. To do so, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:109
# 4cbc81e16e08411f96f0084a4bd21e47
msgid "This will send your key to one keyserver, but a network of keyservers will automatically sync the key between themselves. Once this syncing is complete, your signed public key will be ready to verify your contributions around the world."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:116
# 2db182daee6c4d64a85a3e83bc039dea
msgid "Create your SSH key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:118
# 7feec960ac244cbaa7fd02e86cfa4a78
msgid "SSH_ stands for *Secure Shell*, and it is a protocol that allows you to exchange data in a secure way over a network. It is common to use SSH to access and open a shell on another computer, and to use it to securely transfer files. For our purposes, we will mainly be using SSH to securely upload source packages to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:124
# 6ce7913a6cb5419d87dd01ebc9ef9fa0
msgid "To generate an SSH key, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:128
# 52dfef575a184e61bd72476f0b4be2e8
msgid "The default file name usually makes sense, so you can just leave it as it is. For security purposes, it is highly recommended that you use a passphrase."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:133
# 14e1630da5014b608a99f99d595486f4
msgid "Set up pbuilder"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:135
# d905ac119cf24d81a3a0cde4663e0e6a
msgid "``pbuilder`` allows you to build packages locally on your machine. It serves a couple of purposes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:138
# 75368a827a864786bd203e3f51131c46
msgid "The build will be done in a minimal and clean environment. This helps you make sure your builds succeed in a reproducible way, but without modifying your local system"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:141
# 8c5752b1a51341349e133fec96d15700
msgid "There is no need to install all necessary *build dependencies* locally"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:142
# 04771827270d4d1694f4ecef3a0cd65c
msgid "You can set up multiple instances for various Ubuntu and Debian releases"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:144
# e35d23e610af4e2daf093ff76410e493
msgid "Setting ``pbuilder`` up is very easy, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:148
# 47aac0bcac8a4ae19ba32edee263fdec
msgid "where <release> is for example `natty`, `maverick`, `lucid` or in the case of Debian maybe `sid`. This will take a while as it will download all the necessary packages for a \"minimal installation\". These will be cached though."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:154
# fbac313b6fb5443588ad5ca2d08a5970
msgid "Get set up to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:156
# a96ae30a5b74490c84a0332451aac790
msgid "With a basic local configuration in place, your next step will be to configure your system to work with Launchpad. This section will focus on the following topics:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:160
# d31e9de54c9b41409ad7b659e94dae4f
msgid "What Launchpad is and creating a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:161
# a04e7f5d84f6419ca9ba0e99c273145e
msgid "Uploading your GPG and SSH keys to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:162
# 08e83179d7fb4b2e935df12268f883d0
msgid "Configuring Bazaar to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:163
# ad28d4c8f2ab4013b77e38057e261c10
msgid "Configuring Bash to work with Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:167
# 98c82341a64a46a19ee1e1f400bb4373
msgid "About Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:169
# 902ffac56f584b34b2e22d2192334108
msgid "Launchpad is the central piece of infrastructure we use in Ubuntu. It not only stores our packages and our code, but also things like translations, bug reports, and information about the people who work on Ubuntu and their team memberships.  You will also use Launchpad to publish your proposed fixes, and get other Ubuntu developers to review and sponsor them."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:175
# cd0f6085f530449c8eab42cc6637b120
msgid "You will need to register with Launchpad and provide a minimal amount of information. This will allow you to download and upload code, submit bug reports, and more."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:179
# a5443482e61b4d119889fc9ed617c287
msgid "Besides hosting Ubuntu, Launchpad can host any Free Software project. For more information see the `Launchpad Help wiki <https://help.launchpad.net/>`_."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:184
# 626b35258b894bb1847b1f49e882440a
msgid "Get a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:186
# 792038168ec2412b92debfdd864fca84
msgid "If you don't already have a Launchpad account, you can easily `create one`_. If you have a Launchpad account but cannot remember your Launchpad id, you can find this out by going to https://launchpad.net/~ and looking for the part after the `~` in the URL."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:191
# 91b7ff8ce05b4414bdfa95caf1657a83
msgid "Launchpad's registration process will ask you to choose a display name. It is encouraged for you to use your real name here so that your Ubuntu developer colleagues will be able to get to know you better."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:195
# a8aeda7ba8be4fb58cb25518ed551f9b
msgid "When you register a new account, Launchpad will send you an email with a link you need to open in your browser in order to verify your email address. If you don't receive it, check in your spam folder."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:199
# 5e708ee7c44a4e1fb187e1fb479878e7
msgid "`The new account help page <https://help.launchpad.net/YourAccount/NewAccount>`_ on Launchpad has more information about the process and additional settings you can change."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:205
# 0c45c795863d4c278b4d267b8a0d4015
msgid "Upload your GPG key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:207
# 3a018af61fc24f9f8ba350552bb8f30d
msgid "To find about your GPG fingerprint, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:211
# 401975006e34414c85327ed7d7b4a1c9
msgid "and it will print out something like::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:219
# 18dee80a1bcd45d9a323c68b4a63aced
msgid "Head to https://launchpad.net/~/+editpgpkeys and copy the \"Key fingerprint\" into the text box. In the case above this would be ``5C28 0144 FB08 91C0 2CF3  37AC 6F0B F90F 43CD E61D``. Now click on \"Import Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:224
# da298aa9282c4572b5c74f69d8e0d842
msgid "Launchpad will use the fingerprint to check the Ubuntu key server for your key and, if successful, send you an encrypted email asking you to confirm the key import. Check your email account and read the email that Launchpad sent you. `If your email client supports OpenPGP encryption, it will prompt you for the password you chose for the key when GPG generated it. Enter the password, then click the link to confirm that the key is yours.`"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:231
# 8a491bd984364c9ab0a853b40266dbe0
msgid "Launchpad encrypts the email, using your public key, so that it can be sure that the key is yours. If your email software does not support OpenPGP encryption, copy the encrypted email's contents, type ``gpg`` in your terminal, then paste the email contents into your terminal window."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:236
# 52a28d2099894c4c80bdcd36ef72cc9c
msgid "Back on the Launchpad website, use the Confirm button and Launchpad will complete the import of your OpenPGP key."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:239
# a07bfa5cf53e4c6eb722f763dd81e45d
msgid "Find more information at https://help.launchpad.net/YourAccount/ImportingYourPGPKey"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:243
# 44477eab904d4e6fb86c910ff9d4f4b3
msgid "Upload your SSH key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:245
# 7eb6409d00b948ca94abec5e3107962e
msgid "Open https://launchpad.net/~/+editsshkeys in a web browser, also open ``~/.ssh/id_rsa.pub`` in a text editor. This is the public part of your SSH key, so it is safe to share it with Launchpad. Copy the contents of the file and paste them into the text box on the web page that says \"Add an SSH key\". Now click \"Import Public Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:251
# 585ab1d850b4401a822300998314032c
msgid "For more information on this process, visit the `creating an SSH keypair <https://help.launchpad.net/YourAccount/CreatingAnSSHKeyPair>`_ page on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:257
# 273244eef2dc4b5d8f0ce2994e999a5f
msgid "Configure Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:259
# b8593a0c69d1471fb38fb5e498c6c63b
msgid "Bazaar is the tool we use to store code changes in a logical way, to exchange proposed changes and merge them, even if development is done concurrently.  It is used for the new Ubuntu Distributed Development method of working with Ubuntu packages."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:264
# 635a9018564b40b4bd8eb9f8aa444231
msgid "To tell Bazaar who you are, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:269
# 7b4333558b154d5bb892b6e3cf55fa2a
msgid "`whoami` will tell Bazaar which name and email address it should use for your commit messages. With `launchpad-login` you set your Launchpad ID. This way code that you publish in Launchpad will be associated with you."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:273
# c6bdac9d9a1d419fbfd3a571735ce37a
msgid "Note: If you can not remember the ID, go to https://launchpad.net/~ and see where it redirects you. The part after the \"~\" in the URL is your Launchpad ID.)"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:279
# 9fd5b44a6d794dde92b0ffdbce5f119d
msgid "Configure your shell"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:280
# 4143451648f44a47a03e6c743d568511
msgid "Similar to Bazaar, the Debian/Ubuntu packaging tools need to learn about you as well. Simply open your `~/.bashrc` in a text editor and add something like this to the bottom of it::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:287
# 50b7f09df10246258adece2ece5d9404
msgid "Now save the file and either restart your terminal or run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:291
# 89659e7ffc134efd95bf1bb17024e307
msgid "(If you do not use the default shell, which is `bash`, please edit the configuration file for that shell accordingly.)"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:9
# 49bf0ce0241142949333e5ae6c5d1ee6
msgid "Ubuntu Packaging Guide"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:11
# 3516abfe49354f88b83d16c4c87095d2
msgid "Ubuntu is not only a free and open source operating system, its platform is also open and developed in a transparent fashion. The source code for every single component can be obtained easily and every single change to the Ubuntu platform can be reviewed."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:16
# 736374aba0244e0e936eabee4d75a704
msgid "This means you can actively get involved in improving it and the community of Ubuntu platform developers is always interested in helping peers getting started."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:20
# 01599e7079e846909413e10d158e028a
msgid "The guide is split up into two sections:"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:22
# edcb6579a0504e8e82423866a2921891
msgid "A list of articles based on tasks, things you want to get done."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:23
# fbeb13bcea624432b8b3bd6bdfa3bade
msgid "A set of knowledge-base articles that dig deeper into specific bits of our tools and workflows."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:26
# 4b0765beb1e64c52b501ba704f11e4dd
msgid "This guide focuses on the Ubuntu Distributed Development packaging method. This is a new way of packaging which uses Distributed Revision Control branches.  It currently has some limitations which mean many teams in Ubuntu use :doc:`traditional packaging<./traditional-packaging>` methods.  See the :doc:`UDD Introduction<./udd-intro>` page for an introduction to the differences."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:33
# 9409a91288354fc1b42885caad1f6212
msgid "Articles"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:50
# 5b2879e63dcc475fb27ffe0072ae8113
msgid "Knowledge Base"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:3
# 5e028cd60a2a4b5aaa4ac31e075649ba
msgid "Introduction to Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:5
# 0367ff3eae2049d2996ad8960c1dc9ec
msgid "Ubuntu is made up of thousands of different components, written in many different programming languages. Every component -  be it a software library, a tool or a graphical application - is available as a source package. Source packages in most cases consist of two parts: the actual source code and metadata. Metadata includes the dependencies of the package, copyright and licensing information, and instructions on how to build the package. Once this source package is compiled, the build process provides binary packages, which are the .deb files users can install."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:14
# 3b0f8204fef04ee7aab35188fbb302b2
msgid "Every time a new version of an application is released, or when someone makes a change to the source code that goes into Ubuntu, the source package must be uploaded to Launchpad's build machines to be compiled. The resulting binary packages then are distributed to the archive and its mirrors in different countries. The URLs in ``/etc/apt/sources.list`` point to an archive or mirror. Every day CD images are built for a selection of different Ubuntu flavours. Ubuntu Desktop, Ubuntu Server, Kubuntu and others specify a list of required packages that get on the CD. These CD images are then used for installation tests and provide the feedback for further release planning."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:24
# c3748416d2464c77b1b6b6bda5985e86
msgid "Ubuntu's development is very much dependent on the current stage of the release cycle. We release a new version of Ubuntu every six months, which is only possible because we have established strict freeze dates. With every freeze date that is reached developers are expected to make fewer, less intrusive changes. Feature Freeze is the first big freeze date after the first half of the cycle has passed. At this stage features must be largely implemented. The rest of the cycle is supposed to be focused on fixing bugs. After that the user interface, then the documentation, the kernel, etc. are frozen, then the beta release is put out which receives a lot of testing. From the beta release onwards, only critical bugs get fixed and a release candidate release is made and if it does not contain any serious problems, it becomes the final release."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:39
# 4572bd5517a34ad09b12b0cb10497ac6
msgid "Thousands of source packages, billions of lines of code, hundreds of contributors require a lot of communication and planning to maintain high standards of quality. At the beginning of each release cycle we have the Ubuntu Developer Summit where developers and contributors come together to plan the features of the next releases. Every feature is discussed by its stakeholders and a specification is written that contains detailed information about its assumptions, implementation, the necessary changes in other places, how to test it and so on. This is all done in an open and transparent fashion, so even if you cannot attend the event in person, you can participate remotely and listen to a streamcast, chat with attendants and subscribe to changes of specifications, so you are always up to date."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:51
# 55964285b1414aacafdb70390be1b7a8
msgid "Not every single change can be discussed in a meeting though, particularly because Ubuntu relies on changes that are done in other projects. That is why contributors to Ubuntu constantly stay in touch. Most teams or projects use dedicated mailing lists to avoid too much unrelated noise. For more immediate coordination, developers and contributors use Internet Relay Chat (IRC). All discussions are open and public."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:58
# bf9875473a6148dd95a81cd40f47ebf9
msgid "Another important tool regarding communication is bug reports. Whenever a defect is found in a package or piece of infrastructure, a bug report is filed in Launchpad. All information is collected in that report and its importance, status and assignee updated when necessary. This makes it an effective tool to stay on top of bugs in a package or project and organise the workload."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:65
# dd8c2be5a8db4b6c90f2a05019652784
msgid "Most of the software available through Ubuntu is not written by Ubuntu developers themselves. Most of it is written by developers of other Open Source projects and then integrated into Ubuntu. These projects are called \"Upstreams\", because their source code flows into Ubuntu, where we \"just\" integrate it. The relationship to Upstreams is critically important to Ubuntu. It is not just code that Ubuntu gets from Upstreams, but it is also that Upstreams get users, bug reports and patches from Ubuntu (and other distributions)."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:74
# c691bb5f24d548199dae4e14cb3e3dbb
msgid "The most important Upstream for Ubuntu is Debian. Debian is the distribution that Ubuntu is based on and many of the design decisions regarding the packaging infrastructure are made there. Traditionally, Debian has always had dedicated maintainers for every single package or dedicated maintenance teams. In Ubuntu there are teams that have an interest in a subset of packages too, and naturally every developer has a special area of expertise, but participation (and upload rights) generally is open to everyone who demonstrates ability and willingness."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:83
# 3d5acc7667544bacad159eee50d118fc
msgid "Getting a change into Ubuntu as a new contributor is not as daunting as it seems and can be a very rewarding experience. It is not only about learning something new and exciting, but also about sharing the solution and solving a problem for millions of users out there."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:88
# f287cb3889f54444b61c844f101cea15
msgid "Open Source Development happens in a distributed world with different goals and different areas of focus. For example there might be the case that a particular Upstream is interested in working on a new big feature while Ubuntu, because of the tight release schedule, is interested in shipping a solid version with just an additional bug fix. That is why we make use of \"Distributed Development\", where code is being worked on in various branches that are merged with each other after code reviews and sufficient discussion."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:98
# c831faea79244e2284e03cf05f545f49
msgid "In the example mentioned above it would make sense to ship Ubuntu with the existing version of the project, add the bugfix, get it into Upstream for their next release and ship that (if suitable) in the next Ubuntu release. It would be the best possible compromise and a situation where everybody wins."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:103
# 19c7940973744949aaf107bcaf6a6d0e
msgid "To fix a bug in Ubuntu, you would first get the source code for the package, then work on the fix, document it so it is easy to understand for other developers and users, then build the package to test it. After you have tested it, you can easily propose the change to be included in the current Ubuntu development release. A developer with upload rights will review it for you and then get it integrated into Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:112
# d3011e69f5b64e289edb342d50720682
msgid "When trying to find a solution it is usually a good idea to check with Upstream and see if the problem (or a possible solution) is known already and, if not, do your best to make the solution a concerted effort."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:116
# 5872e9ce39804e0793bfba539f58ad6a
msgid "Additional steps might involve getting the change backported to an older, still supported version of Ubuntu and forwarding it to Upstream."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:119
# 722b2c6d66704c7aa851b1be8d5b88e3
msgid "The most important requirements for success in Ubuntu development are: having a knack for \"making things work again,\" not being afraid to read documentation and ask questions, being a team player and enjoying some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:123
# bcf92f7e61714503bffb0521a945de55
msgid "Good places to ask your questions are ``ubuntu-motu@lists.ubuntu.com`` and ``#ubuntu-motu`` on ``irc.freenode.net``. You will easily find a lot of new friends and people with the same passion that you have: making the world a better place by making better Open Source software."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:3
# f23d6b6f33154211b23e4a2b0a29c35d
msgid "KDE Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:5
# 1de856e6522f48e8af02ca31448a9545
msgid "Packaging of KDE programs in Ubuntu is managed by the Kubuntu and MOTU teams.  You can contact the Kubuntu team on the `Kubuntu mailing list`_ and ``#kubuntu-devel`` Freenode IRC channel.  More information about Kubuntu development is on the `Kubuntu wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:10
# 7491bc98b4f84423a3849bab3576bb8f
msgid "Our packaging follows the practices of the ``Debian Qt/KDE Team`` and Debian KDE Extras Team.  Most of our packages are derived from the packaging of these Debian teams."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:15
# d9311f867b4e4e7ab91c3b79d2a390d2
msgid "Patching Policy"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:17
# 46dd7f1b78e343b0a1f667f7c622d4fd
msgid "Kubuntu does not add patches to KDE programs unless they come from the upstream authors or submitted upstream with the expectation they will be merged soon or we have consulted the issue with the upstream authors."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:22
# 5fb47ec1b2074e98a263da0d07a06e75
msgid "Kubuntu does not change the branding of packages except where upstream expects this (such as the top left logo of the Kickoff menu) or to simplify (such as removing splash screens)."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:27
#: ../ubuntu-packaging-guide/python-packaging.rst:31
# 064588615eeb466aa885025e0414bbc5
# 9742de1d9d464bba932de7bffc00f93a
msgid "debian/rules"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:29
# b428c7717f3345359598cc039541b6ee
msgid "Debian packages include some additions to the basic Debhelper usage. These are kept in the ``pkg-kde-tools`` package."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:32
# 226e25f81df149fa8c74fbe93c488eb4
msgid "Packages which use Debhelper 7 should add the ``--with=kde`` option. This will ensure the correct build flags are used and add options such as handling kdeinit stubs and translations::"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:39
# f45d0406cccf4c0d80a27a099fde439c
msgid "Some newer KDE packages use the ``dhmk`` system, an alternative to ``dh`` made by the Debian Qt/KDE team.  You can read about it in /usr/share/pkg-kde-tools/qt-kde-team/2/README.  Packages using this will ``include /usr/share/pkg-kde-tools/qt-kde-team/2/debian-qt-kde.mk`` instead of running ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:47
# c890a4de7cbf42eb85a59ef6cabf7af7
msgid "Translations"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:49
# e9ab487d62244e7e92d9b1d13556b9aa
msgid "Packages in main have their translations imported into Launchpad and exported from Launchpad into Ubuntu's language-packs."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:52
# e7933a9ee3a04775acb722b72b5ea38a
msgid "So any KDE package in main must generate translation templates, include or make available upstream translations and handle ``.desktop`` file translations."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:56
# de4af24a26b4419c87141a4e50232395
msgid "To generate translation templates the package must include a ``Messages.sh`` file; complain to the upstream if it does not.  You can check it works by running ``extract-messages.sh`` which should produce one or more ``.pot`` files in ``po/``.  This will be done automatically during build if you use the ``--with=kde`` option to ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:63
# d31ce3f436c84bac835392e31608658e
msgid "Upstream will usually have also put the translation ``.po`` files into the ``po/`` directory.  If they do not, check if they are in separate upstream language packs such as the KDE SC language packs.  If they are in separate language packs Launchpad will need to associate these together manually, contact `dpm`_ to do this."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:69
# 67fd4c1fa2ec45d1abd3e7462d055d0f
msgid "If a package is moved from universe to main it will need to be re-uploaded before the translations get imported into Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:72
# c6c9a3d52e0f44e5ba53f4eb31d3a273
msgid "``.desktop`` files also need translations.  We patch KDELibs to read translations out of ``.po`` files which are pointed to by a line ``X-Ubuntu-Gettext-Domain=`` added to ``.desktop`` files at package build time.  A .pot file for each package is be generated at build time and .po files need to be downloaded from upstream and included in the package or in our language packs.  The list of .po files to be downloaded from KDE's repositories is in ``/usr/lib/kubuntu-desktop-i18n/desktop-template-list``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:82
# fe05c4674d7845709849327c2d9a75ab
msgid "Library Symbols"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:84
# eeb5a62bda214277b71c53e89ff1ce9b
msgid "Library symbols are tracked in ``.symbols`` files to ensure none go missing for new releases.  KDE uses C++ libraries which act a little differently compared to C libraries.  Debian's Qt/KDE Team have scripts to handle this. See `Working with symbols files`_ for how to create and keep these files up to date."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:3
# eb0818c44e8243bbbb5ecdd6a486d71b
msgid "Shared Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:5
# b12aab4ee89b428489775e86a6701f01
msgid "Shared libraries are compiled code which is intended to be shared among several different programs.  They are distributed as ``.so`` files in ``/usr/lib/``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:9
# 0bc9e4ec7bb644b3a12f7eac95bbcf68
msgid "A library exports symbols which are the compiled versions of functions, classes and variables.  A library has a name called an SONAME which includes a version number.  This SONAME version does not necessarily match the public release version number.  A program gets compiled against a given SONAME version of the library.  If any of the symbols is removed or changes then the version number needs to be changed which forces any packages using that library to be recompiled against the new version.  Version numbers are usually set by upstream and we follow them in our binary package names called an ABI number, but sometimes upstreams do not use sensible version numbers and packagers have to keep separate version numbers."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:21
# 97238e28a89740c281928646ff2fe91d
msgid "Libraries are usually distributed by upstream as standalone releases. Sometimes they are distributed as part of a program.  In this case they can be included in the binary package along with the program (this is called bundling) if you do not expect any other programs to use the library, more often they should be split out into separate binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:27
# 5c727842839549bba5c6383690c69cfd
msgid "The libraries themselves are put into a binary package named ``libfoo1`` where ``foo`` is the name of the library and ``1`` is the version from the SONAME. Development files from the package, such as header files, needed to compile programs against the library are put into a package called ``libfoo-dev``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:34
# c655da1a7cff4757bdce2c98b307be91
msgid "An Example"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:36
# 2a8eae4ce78d415da8477c1c56598bc6
msgid "We will use libnova as an example::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:41
# 241e767c86c540579e9e138c8d6b2f16
msgid "To find the SONAME of the library run::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:45
# 6874d25c4e714e599016710b11349965
msgid "The SONAME is ``libnova-0.12.so.2``, which matches the file name (usually the case but not always). Here upstream has put the upstream version number as part of the SONAME and given it an ABI version of ``2``.  Library package names should follow the SONAME of the library they contain. The library binary package is called ``libnova-0.12-2`` where ``libnova-0.12`` is the name of the library and ``2`` is our ABI number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:52
# 560d2e16d8b34360ba965d4806e13ae3
msgid "If upstream makes incompatible changes to their library they will have to reversion their SONAME and we will have to rename our library.  Any other packages using our library package will need to recompiled against the new version, this is called a transition and can take some effort. Hopefully our ABI number will continue to match upstream's SONAME but sometimes they introduce incompatibilities without changing their version number and we will need to change ours."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:60
# 9477f3d4bed24f2783b83efacca002ff
msgid "Looking in debian/libnova-0.12-2.install we see it includes two files::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:65
# 95b68429d74040e6ab32cdb123cbd2bf
msgid "The last one is the actual library, complete with minor and point version number.  The first one is a symlink which points to the actual library.  The symlink is what programs using the library will look for, the running programs do not care about the minor version number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:70
# 80c94f72782b4b3cb43a315176294e1e
msgid "``libnova-dev.install`` includes all the files needed to compile a program with this library.  Header files, a config binary, the ``.la`` libtool file and ``libnova.so`` which is another symlink pointing at the library, programs compiling against the library do not care about the major version number (although the binary they compile into will)."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:76
# 0a4f3cd8a89f4176897eee49c5b978f8
msgid "``.la`` libtool files are needed on some non-Linux systems with poor library support but usually cause more problems than they solve on Debian systems.  It is a current `Debian goal to remove .la files`_ and we should help with this."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:82
# bc5dbb12df3d48d8b097360b938b9895
msgid "Static Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:84
# 3eba92f9c68e4b2cb7198ff2fd61e77f
msgid "The -dev package also ships ``usr/lib/libnova.a``.  This is a static library, an alternative to the shared library.  Any program compiled against the static library will include the code directory into itself.  This gets round worrying about binary compatibility of the library.  However it also means that any bugs, including security issues, will not be updated along with the library until the program is recompiled.  For this reason programs using static libraries are discouraged."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:94
# 50e4564d8f9e4bc6b3ed930decafac54
msgid "Symbol Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:96
# 9569f585e8ae44cca73f6252da8d151e
msgid "When a package builds against a library the ``shlibs`` mechanism will add a package dependency on that library.  This is why most programs will have ``Depends: ${shlibs:Depends}`` in ``debian/control``.  That gets replaced with the library dependencies at build time.  However shlibs can only make it depend on the major ABI version number, ``2`` in our libnova example, so if new symbols get added in libnova 2.1 a program using these symbols could still be installed against libnova ABI 2.0 which would then crash."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:104
# efd36f98ef9841fa80a2e82e1386188f
msgid "To make the library dependencies more precise we keep ``.symbols`` files that list all the symbols in a library and the version they appeared in."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:107
# bb0f9573ca8c40639343d5b7f779b9cd
msgid "libnova has no symbols file so we can create one.  Start by compiling the package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:112
# f502ecb30d9143069e4a294bee334bf2
msgid "The ``-nc`` will cause it to finish at the end of compilation without removing the built files.  Change to the build and run ``dpkg-gensymbols`` for the library package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:119
# bc485ad826ac49c3b70299eed1202c9d
msgid "This makes a diff file which you can self apply::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:123
# 8c723638fe37426fb3ec1f751ad5073f
msgid "Which will create a file named similar to ``dpkg-gensymbolsnY_WWI`` that lists all the symbols.  It also lists the current package version.  We can remove the packaging version from that listed in the symbols file because new symbols are not generally added by new packaging versions, but by the upstream developers::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:130
# bb120006607343b79125514343d6bf09
msgid "Now move the file into its location, commit and do a test build::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:138
# d2ff6b24f08a4e8b9ea98131f1c8e74d
msgid "If it successfully compiles the symbols file is correct.  With the next upstream version of libnova you would run dpkg-gensymbols again and it will give a diff to update the symbols file."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:143
# 930a1de9340647868898a745e769bb69
msgid "C++ Library Symbols Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:145
# f7ee1760b6a24cb68513328a4fb77178
msgid "C++ has even more exacting standards of binary compatibility than C.  The Debian Qt/KDE Team maintain some scripts to handle this, see their `Working with symbols files`_ page for how to use them."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:150
# 38153fcd97174f9f8d465531a9ba4595
msgid "Further Reading"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:152
# 8421fcbfbf0443efad1a79169a16172f
msgid "Junichi Uekawa's `Debian Library Packaging Guide`_ goes into this topic in more detail."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:3
# 21f4b3f32c6a407b8b953f2df154a08b
msgid "Packaging New Software"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:5
# 2a6bb74ab92048ff8cd971d7a41fadff
msgid "While there are thousands of packages in the Ubuntu archive, there are still a lot nobody has gotten to yet. If there is an exciting new piece of software that you feel needs wider exposure, maybe you want to try your hand at creating a package for Ubuntu or a PPA_. This guide will take you through the steps of packaging new software."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:11
# d12bb7d11db746e0a57e1308d398714e
msgid "You will want to read the :doc:`Getting Set Up<./getting-set-up>` article first in order to prepare your development environment."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:15
# 7f6b1ff1d5c34d428702675893ebfdaa
msgid "Checking the Program"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:17
# a743ed99f1234566b7bb87974584886a
msgid "The first stage in packaging is to get the released tar from upstream (we call the authors of applications \"upstream\") and check that it compiles and runs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:20
# 9f4df24e0e4741dd90ad8abe00fe2f78
msgid "This guide will take you through packaging a simple application called GNU Hello which has been posted on GNU.org_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:23
# 600333a9100e4491969a5be00049260c
msgid "If you don't have the build tools lets make sure we have them first.  Also if you don't have the required dependencies lets install those as well."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:26
# 72b44db5d50e47c38e8189d3530a5495
msgid "Install build tools::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:30
# 48f5d4a9edc344e08a65ff282fae25ce
msgid "Download main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:34
# de81283a13844472aa5bd81c1fcbc565
msgid "Now uncompress main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:39
# 3f071672ab3b4e2fa8e361ddcf9eca28
msgid "This application uses the autoconf build system so we want to run ``./configure`` to prepare for compilation."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:42
# 05d6f7468c934a3e968efe7637529950
msgid "This will check for the required build dependencies. As ``hello`` is a simple example, ``build-essential`` should provide everything we need. For more complex programs, the command will fail if you do not have the needed libraries and development files. Install the needed packages and repeat until the command runs successfully.::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:50
# 2d9e222da90641b58bae82295ab9d840
msgid "Now you can compile the source::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:54
# 018762e18d0148268780bc29bcfb353d
msgid "If compilation completes successfully you can install and run the program::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:60
# 3aba8bd7705d46baa778634a5b936bb4
msgid "Starting a Package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:62
# e0575c338f524e968f4f3fa5a66aaa5c
msgid "``bzr-builddeb`` includes a plugin to create a new package from a template. The plugin is a wrapper around the ``dh_make`` command. You should already have these if you installed ``packaging-dev``. Run the command providing the package name, version number, and path to the upstream tarball::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:71
# 03f53148211a489ab2a1a1bbe7a3a26b
msgid "When it asks what type of package type ``s`` for single binary. This will import the code into a branch and add the ``debian/`` packaging directory.  Have a look at the contents.  Most of the files it adds are only needed for specialist packages (such as Emacs modules) so you can start by removing the optional example files::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:80
# 1dd93c73b21a4c189312ff9e60215bec
msgid "You should now customise each of the files."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:82
# 671f510bc48f4493986b53957e405620
msgid "In ``debian/changelog`` change the version number to an Ubuntu version: ``2.7-0ubuntu1`` (upstream version 2.7, Debian version 0, Ubuntu version 1).  Also change ``unstable`` to the current development Ubuntu release such as ``precise``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:87
# c7e1e4441b6c48558b425a536195b384
msgid "Much of the package building work is done by a series of scripts called ``debhelper``.  The exact behaviour of ``debhelper`` changes with new major versions, the compat file instructs ``debhelper`` which version to act as.  You will generally want to set this to the most recent version which is ``8``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:93
# 4c789a5946024e7eb8c6ac1d181b05a5
msgid "``control`` contains all the metadata of the package.  The first paragraph describes the source package. The second and following paragraphs describe the binary packages to be built.  We will need to add the packages needed to compile the application to ``Build-Depends:``. For ``hello``, make sure that it includes at least::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:101
# ae17d651049c44cb955ad0cf7065009e
msgid "You will also need to fill in a description of the program in the ``Description:`` field."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:104
# 5588ff99e24f4fbda7f7fc76b78b322f
msgid "``copyright`` needs to be filled in to follow the licence of the upstream source.  According to the hello/COPYING file this is GNU GPL 3 or later."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:107
# b44297e46d024c32be2fbbcd76748bbe
msgid "``docs`` contains any upstream documentation files you think should be included in the final package."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:110
# f8b4e7a6ee274c5b90adc7b013affe20
msgid "``README.source`` and ``README.Debian`` are only needed if your package has any non-standard features, we don't so you can delete them."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:113
# fcbeeed6bae74c76b59d729752763b34
msgid "``source/format`` can be left as is, this describes the version format of the source package and should be ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:116
# 34554ead524a4ddf814f01705f887696
msgid "``rules`` is the most complex file.  This is a Makefile which compiles the code and turns it into a binary package.  Fortunately most of the work is automatically done these days by ``debhelper 7`` so the universal ``%`` Makefile target just runs the ``dh`` script which will run everything needed."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:121
# d69708bea3884684894090862d6184ea
msgid "All of these file are explained in more detail in the :doc:`overview of the debian directory<./debian-dir-overview>` article."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:124
# 3f3c412357f54352a9c13b40aec9ce2f
msgid "Finally commit the code to your packaging branch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:129
#: ../ubuntu-packaging-guide/udd-working.rst:69
# c158605bca7d4c988f2410acfa20c886
# fbc23c291873495da64d92121af0204d
msgid "Building the package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:131
# 3962bec8bde745a89fd62534766f6ceb
msgid "Now we need to check that our packaging successfully compiles the package and builds the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:137
# c5bfde6d90454ef9b4355002d1750cf3
msgid "``bzr builddeb`` is a command to build the package in its current location. The ``-us -uc`` tell it there is no need to GPG sign the package.  The result will be placed in ``..``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:141
# f981d5e8663e4e6ab1ab0d0f8cfe99b3
msgid "You can view the contents of the package with::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:145
# 12e2e82330ec470f84a1e9edb3e2edf0
msgid "Install the package and check it works::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:150
# 3ae1094491ab4704881df959c6bed4a0
msgid "Next Steps"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:152
# 2a09f103fe9b4674a264bd0cf2f11866
msgid "Even if it builds the .deb binary package, your packaging may have bugs.  Many errors can be automatically detected by our tool ``lintian`` which can be run on both the source .dsc metadata file and the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:160
# 9e88d19f721643999faae35e770a8478
msgid "A description of each of the problems it reports can be found on the `lintian website`_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:163
# fa071ff46ab34adf8b961848bdaf0c68
msgid "After making a fix to the packaging you can rebuild using ``-nc`` \"no clean\" without having to build from scratch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:168
# f994d6d60af64ba8b825a4742449bcc3
msgid "Having checked that the package builds locally you should ensure it builds on a clean system using ``pbuilder``. Since we are going to upload to a PPA (Personal Package Archive) shortly, this upload will need to be *signed* to allow Launchpad to verify that the upload comes from you (you can tell the upload will be signed because the ``-us`` and ``-uc`` flags are not passed to ``bzr builddeb`` like they were before). For signing to work you need to have set up GPG. If you haven't set up ``pbuilder-dist`` or GPG yet, :doc:`do so now<./getting-set-up>`::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:181
# d1ea326c22d94b46826099f44ad38819
msgid "When you are happy with your package you will want others to review it.  You can upload the branch to Launchpad for review::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:186
# 9ffc487f40fa44b4b3036a0cfd142bab
msgid "Uploading it to a PPA will ensure it builds and give an easy way for you and others to test the binary packages.  You will need to set up a PPA in Launchad then upload with ``dput``::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:192
# 3b3390f0edad4dc2806b0de3894e3599
msgid "See :doc:`uploading<./udd-uploading>` for more information."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:194
# 2e8a29ac46e94d98b7c3077feaf4f1d3
msgid "You can ask for reviews in ``#ubuntu-motu`` IRC channel, or on the `MOTU mailing list`_.  There might also be a more specific team you could ask such as the GNU team for more specific questions."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:199
# a75c7195023a46498265025c41129924
msgid "Submitting for inclusion"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:201
# b9c7d70f9bca43b48e8711c30a6b50ac
msgid "There are a number of paths that a package can take to enter Ubuntu. In most cases, going through Debian first can be the best path. This way ensures that your package will reach the largest number of users as it will be available in not just Debian and Ubuntu but all of their derivatives as well. Here are some useful links for submitting new packages to Debian:"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:208
# 124ef201f84f48eba572a9ca06befe53
msgid "`Debian Mentors FAQ`_ - debian-mentors is for the mentoring of new and prospective Debian Developers. It is where you can find a sponsor to upload your package to the archive."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:212
# 499e7b9ffcdb4501bc440c8f5db89eae
msgid "`Work-Needing and Prospective Packages`_ - Information on how to file \"Intent to Package\" and \"Request for Package\" bugs as well as list of open ITPs and RFPs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:216
# 93ddd32749c64d3cb40951bc60709a1e
msgid "`Debian Developer's Reference, 5.1. New packages`_ - The entire document is invaluable for both Ubuntu and Debian packagers. This section documents processes for submitting new packages."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:220
# 89d5c00419b04c438b0b0e379c7a5145
msgid "In some cases, it might make sense to go directly into Ubuntu first. For instance, Debian might be in a freeze making it unlikely that your package will make it into Ubuntu in time for the next release. This process is documented on the `\"New Packages\"`_ section of the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:3
# 4ef8f2953d99489a90b93b697038eb32
msgid "Patches to Packages"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:5
# da6adcec7ee7442b9a896880ef14b4e6
msgid "Sometimes, Ubuntu package maintainers have to change the upstream source code in order to make it work properly on Ubuntu.  Examples include, patches to upstream that haven't yet made it into a released version, or changes to the upstream's build system needed only for building it on Ubuntu.  We could change the upstream source code directly, but doing this makes it more difficult to remove the patches later when upstream has incorporated them, or extract the change to submit to the upstream project.  Instead, we keep these changes as separate patches, in the form of diff files."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:14
# 238a0bef8b7d40bfafbb0941208e4a4a
msgid "There are a number of different ways of handling patches in Debian packages, fortunately we are standardising on one system, `Quilt`_, which is now used by most packages."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:18
# bf641817d6cd49c7a59a626fb71d2360
msgid "Let's look at an example package, ``kamoso`` in Natty::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:22
# a925704615174ce996513031796d1122
msgid "The patches are kept in ``debian/patches``.  This package has one patch ``kubuntu_01_fix_qmax_on_armel.diff`` to fix a compile failure on ARM.  The patch has been given a name to describe what it does, a number to keep the patches in order (two patches can overlap if they change the same file) and in this case the Kubuntu team adds their own prefix to show the patch comes from them rather than from Debian."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:29
# 4d9dab71303c4339a04d4d85a853dd8e
msgid "The order of patches to apply is kept in ``debian/patches/series``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:32
# 85bbc0dbf3214475bd1fdddef13efbe3
msgid "Patches with Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:34
# e2c38ed867274d999ed69909e92ebff2
msgid "Before working with Quilt you need to tell it where to find the patches.  Add this to your ``~/.bashrc``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:39
# b0fe0790c2cf4190ab499ce1b5b44c3f
msgid "And source the file to apply the new export::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:43
# 8c5c4723d9b54aa0880a2325650b3f3d
msgid "By default all patches are applied already to UDD checkouts or downloaded packages.  You can check this with::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:49
# 4a6039ecd93e4a709b02566ca9ccffad
msgid "If you wanted to remove the patch you would run ``pop``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:57
# 9af3ec750e014a8382ef06b795dedd6e
msgid "And to apply a patch you use ``push``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:67
# 0bf7b81cb4374b00aee1ba560ba5acd2
msgid "Adding a New Patch"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:69
# ba7adb3304ca4648850213a82c6b790f
msgid "To add a new patch you need to tell Quilt to create a new patch, tell it which files that patch should change, edit the files then refresh the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:81
# e56c68e63fc44f418b938a24b511ccf6
msgid "The ``quilt add`` step is important, if you forget it the files will not end up in the patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:84
# 449f466441fa47d287b9dfebd5f98444
msgid "The change will now be in ``debian/patches/kubuntu_02_program_description.diff`` and the ``series`` file will have had the new patch added to it.  You should add the new file to the packaging::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:94
# f1d75b73a6304722aa7078132e7ea6e9
msgid "Quilt keeps its metadata in the ``.pc/`` directory, so currently you need to add that to the packaging too.  This should be improved in future."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:97
# f220227192114b698d312b595c878e79
msgid "As a general rule you should be careful adding patches to programs unless they come from upstream, there is often a good reason why that change has not already been made.  The above example changes a user interface string for example, so it would break all translations.  If in doubt, do ask the upstream author before adding a patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:104
# 16117c98f5494625b5fb2b7a990726b2
msgid "Upgrading to New Upstream Versions"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:106
# 02427c079b1e4bd2bfc30156249d0ae6
msgid "When you upgrade to a new upstream version, patches will often become out of date.  They might need to be refreshed to match the new upstream source or they might need to be removed altogether."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:110
# 4775f018d63f4a5287ecb05ed1e00df2
msgid "You should start by ensuring no patches are applied.  Unfortunately a commit is needed before you can merge in the new upstream (this is `bug 815854`_)::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:116
# 6d5e22bf26cb45e39c727776d9a7715a
msgid "Then upgrade to the new version::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:120
# 12fce76c118b47cc92246e8174ebc28b
msgid "Then apply the patches one at a time to check for problems::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:129
# 5d9a1b14c59a4616948de21356fd6b6a
msgid "If it can be reverse-applied this means the patch has been applied already by upstream, so we can delete the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:135
# ccad729a8eb74706aac7b2b4c61eb1d5
msgid "Then carry on::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:140
# 95da9ed6aa6041e99f7df9260e57db7e
msgid "It is a good idea to run refresh, this will update the patch relative to the changed upstream source::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:146
# ab299b39c9464c0098832988bec3930e
msgid "Then commit as usual::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:152
# 988927778a244e8d88fb86f120575480
msgid "Making A Package Use Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:154
# 608ac9b8d40d4a11aa50875d7530e939
msgid "Modern packages use Quilt by default, it is built into the packaging format.  Check in ``debian/source/format`` to ensure it says ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:158
# 7511be4a2a9e460980f4b6268d3ea3f5
msgid "Older packages using source format 1.0 will need to explicitly use Quilt, usually by including a makefile into ``debian/rules``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:163
# a6aa7fb58b30470d816c3ccf7fa32588
msgid "Other Patch Systems"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:165
# b3905913ac7342458acd03b3b43e4cda
msgid "Other patch systems used by packages include ``dpatch`` and ``cdbs simple-patchsys``, these work similarly to Quilt by keeping patches in debian/patches but have different commands to apply, un-apply or create patches. You can use ``edit-patch``, shown in previous chapters, as a reliable way to work with all systems."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:171
# 52648f28e2c74d95bd12721f2f1ce035
msgid "In even older packages changes will be included directly to sources and kept in the ``diff.gz`` source file.  This makes it hard to upgrade to new upstream versions or differentiate between patches and is best avoided."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:175
# 43faf68077294f5198697f833a44b144
msgid "Bazaar Loom is a way to keep patches as part of bzr trees, see :doc:`Working with Patches via Loom<./udd-patchsys>` for more information."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:178
# 9ed067aaf26d4cbaa25325165ddbb425
msgid "Do not change a package's patch system without discussing it with the Debian maintainer or relevant Ubuntu team.  If there is no existing patch system then feel free to add Quilt."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:3
# ba03811df4594dac8f8a488b6f6236e6
msgid "Packaging Python modules and applications"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:5
# c75bcf5cfe0a44fdbedbdade51cdf56c
msgid "Our packaging follows Debian’s `Python policy`_. We will use the `python-markdown`_ package as an example, which can be downloaded from `PyPI`_. You can look at its packaging at its `Subversion repository`_."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:7
# 7a1c9ffa7ae2408d9128d7c19161c30f
msgid "There are two types of Python packages — *modules* and *apps*."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:9
# 2e79c5375e2d4d9ab9aad0876713694c
msgid "At the time of writing, Ubuntu has two incompatible versions of Python — *2.x* and *3.x*. ``/usr/bin/python`` is a symbolic link to a default Python 2.x version, and ``/usr/bin/python3`` — to a default Python 3.x version. Python modules should be built against all supported Python versions."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:11
# d145e78b99ec43ba867a8d67fe239e8b
msgid "If you are going to package a new Python module, you might find the ``py2dsc`` tool useful (available in `python-stdeb`_ package)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:14
# ecc27566f83541e6888cc1294e53fdd6
msgid "debian/control"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:16
# c334d8eaf64e44378143c2a3366583a1
msgid "Python 2.x and 3.x versions of the package should be in separate binary packages. Names should have ``python{,3}-modulename`` format (like: ``python3-dbus.mainloop.qt``). Here, we will use ``python-markdown`` and ``python3-markdown`` for module packages and ``python-markdown-doc`` for the documentation package."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:18
# 2174017f5cfc4df9bc5fe76cfb035034
msgid "Things in ``debian/control`` that are specific for a Python package:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:20
# 7d6e31d3099d47dba784c16ed84fa84b
msgid "The section of module packages should be ``python``, and ``doc`` for the documentation package. For an application, a single binary package will be enough."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:21
# 7a0f537f92f24c1d86fbfa54733d5ba9
msgid "We should add build dependencies on ``python-all (>= 2.6.6-3~)`` and ``python3-all (>= 3.1.2-7~)`` to make sure Python helpers are available (see the next section for details)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:22
# 159858f2eb23427b977065b00cab9db3
msgid "It’s recommended to add ``X-Python-Version`` and ``X-Python3-Version`` fields — see “`Specifying Supported Versions`_” section of the Policy for details. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:27
# b2dc89b4128b447182026bf5380546bc
msgid "If your package works only with Python 2.x or 3.x, build depend only on one ``-all`` package and use only one ``-Version`` field."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:28
# 9b1d628fc4d44578b1fb11e0ed7ddd4f
msgid "Module packages should have ``{python:Depends}`` and ``{python3:Depends}`` substitution variables (respectively) in their dependency lists."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:33
# c5e26a792d20463d8c9cf36e29efa392
msgid "The recommended helpers for python modules are ``dh_python2`` and ``dh_python3``. Unfortunately, ``debhelper`` doesn’t yet build Python 3.x packages automatically (see `bug 597105`_ in Debian BTS), so we’ll need to do that manually in override sections (skip this if your package doesn’t support Python 3.x)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:35
# 67cbefe8cfd8466ab87c1df6dc00aee3
msgid "Here’s our ``debian/rules`` file (with annotations):"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:70
# addc3c3f703141afae61ebc771318836
msgid "It is also a good practice to run tests during the build, if they are shipped by upstream. Usually tests can be invoked using ``setup.py test`` or ``setup.py check``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:73
# 6ffaa85d34424a139e875c9d77dce12b
msgid "debian/\\*.install"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:75
# 8e418336454f43d28a75a1dba0f363da
msgid "Python 2.x modules are installed into ``/usr/share/pyshared/`` directory, and symbolic links are created in ``/usr/lib/python2.x/dist-packages/`` for every interpreter version, while Python 3.x ones are all installed into ``/usr/lib/python3/dist-packages/``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:77
# 01df30e05f684e949137d5cae63123a7
msgid "If your package is an application and has private Python modules, they should be installed in ``/usr/share/module``, or ``/usr/lib/module`` if the modules are architecture-dependent (e.g. extensions) (see “`Programs Shipping Private Modules`_” section of the Policy)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:79
# 27c4a2ab85bd46e189caee0d253156f8
msgid "So, our ``python-markdown.install`` file will look like this (we’ll also want to install a ``markdown_py`` executable)::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:84
# aaad55b6f70048deb6be06cdf69a65b1
msgid "and ``python3-markdown.install`` will only have one line::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:89
# 3166eac97e044089a31cd6b7ed2f125c
msgid "The ``-doc`` package"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:91
# ade5338c9b8c45b3a13856150b383977
msgid "The tool most commonly used for building Python docs is `Sphinx`_. To add Sphinx documentation to your package (using ``dh_sphinxdoc`` helper), you should:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:93
# defd754cd9904311aa1029e9c046cb5f
msgid "Add a build-dependency on ``python-sphinx`` or ``python3-sphinx`` (depending on what Python version do you want to use);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:94
# 24354fc6310541dfbde2cb0d81187db8
msgid "Append ``sphinxdoc`` to the ``dh --with`` line;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:95
# aa4377125247455f8cd94d5ffe01854e
msgid "Run ``setup.py build_sphinx`` in ``override_dh_auto_build`` (sometimes not needed);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:96
# 7123766e2c664f968de057541f5aeeb2
msgid "Add ``{sphinxdoc:Depends}`` to the dependency list of your ``-doc`` package;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:97
# c9e23346c6d140aa9767e4c913ae164c
msgid "Add the path of the built docs directory (usually ``build/sphinx/html``) to your ``.docs`` file."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:99
# b15af63d9ee247e0afe376e014a2191b
msgid "In our case, the docs are automatically built in ``build/docs/`` directory when we run ``setup.py build``, so we can simply put this in the ``python-markdown-doc.docs`` file::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:103
# f0371586cb9640e5b3960cb989af099f
msgid "Because docs also contain source ``.txt`` files, we’ll also tell ``dh_compress`` to not compress them — by adding this to ``debian/rules``:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:111
# 28141590094144e3a9741b6a7a362a68
msgid "Checking for packaging mistakes"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:113
# eeb1d41d6d2a4aca8c6f419fd90f061f
msgid "Along with ``lintian``, there is a special tool for checking Python packages — ``lintian4py``. It is available in the `lintian4python`_ package. For example, these two commands invoke both versions of ``lintian`` and check source and binary packages::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:118
# 8bd849f1619240ffb622d81a6e984d44
msgid "Here, ``-EI`` option is used to enable experimental and informational tags."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:121
# 2bc49b9b8c024c08801686546dab25b4
msgid "See also"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:123
# 830efffe36f94d18b836eafc6fac433d
msgid "The `Python policy`_;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:124
# 4255e1c247fe4633b53d99f741e51a29
msgid "`Python/Packaging`_ article on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:125
# 7401c1091c6a41d881239d7f0e180085
msgid "`Python/LibraryStyleGuide`_ and `Python/AppStyleGuide`_ articles on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:126
# 51822e52eec94cbf87559180c64d10a1
msgid "Debian `python-modules`_ and `python-apps`_ teams."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:3
# 21ab1ff0ae094e08ae11f1466dae3544
msgid "Security and Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:6
# a585e78aac2748b6aa9b46f9ed91df4a
msgid "Fixing a Security Bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:11
# 52dea08428b24973a3428cfde200c4ec
msgid "Fixing security bugs in Ubuntu is not really any different than :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`, and it is assumed that you are familiar with patching normal bugs. To demonstrate where things are different, we will be updating the dbus package in Ubuntu 10.04 LTS (Lucid Lynx) for a security update."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:19
# cfe98f86a8484158b488c54c52a30ff3
msgid "Obtaining the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:21
# e297a120f8da473cbb45eb777c863c5c
msgid "In this example, we already know we want to fix the dbus package in Ubuntu 10.04 LTS (Lucid Lynx). So first you need to determine the version of the package you want to download. We can use the ``rmadison`` to help with this::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:30
# 7c14a304b0734b42843a2008c2af845a
msgid "Typically you will want to choose the highest version for the release you want to patch that is not in -proposed or -backports. Since we are updating Lucid's dbus, you'll download 1.2.16-2ubuntu4.2 from lucid-updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:38
# 3fc55fd229cc4287ac759cd9e1f1f27d
msgid "Patching the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:39
# 1b7c04dca7ec496dbc79e6fb1cfaa709
msgid "Now that we have the source package, we need to patch it to fix the vulnerability. You may use whatever patch method that is appropriate for the package, including :doc:`UDD techniques<./udd-intro>`, but this example will use ``edit-patch`` (from the ubuntu-dev-tools package). ``edit-patch`` is the easiest way to patch packages and it is basically a wrapper around every other patch system you can imagine."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:46
# 5e29b45d8f6343d284ca6c9e89043d5a
msgid "To create your patch using ``edit-patch``::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:51
# eb145adc88e54be48619a6fd563aca37
msgid "This will apply the existing patches and put the packaging in a temporary directory. Now edit the files needed to fix the vulnerability.  Often upstream will have provided a patch so you can apply that patch::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:57
# 8d3c8a024b254684acd02378575555e6
msgid "After making the necessary changes, you just hit Ctrl-D or type exit to leave the temporary shell."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:61
# 7bfceb69c2b44bd092edd082bd74e3d3
msgid "Formatting the changelog and patches"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:63
# 0b5ffcb2f4034b1291b7c1a6e82e222b
msgid "After applying your patches you will want to update the changelog. The ``dch`` command is used to edit the ``debian/changelog`` file and ``edit-patch`` will launch ``dch`` automatically after un-applying all the patches. If you are not using ``edit-patch``, you can launch ``dch -i`` manually. Unlike with regular patches, you should use the following format (note the distribution name uses lucid-security since this is a security update for Lucid) for security updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:80
# 4f6d6efce1d04b269cbc1b4764e5af60
msgid "Update your patch to use the appropriate patch tags. Your patch should have at a minimum the Origin, Description and Bug-Ubuntu tags. For example, edit debian/patches/99-fix-a-vulnerability.patch to have something like::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:91
# b12558dd605a4ea6aa62b3b5a06b6b7b
msgid "Multiple vulnerabilities can be fixed in the same security upload; just be sure to use different patches for different vulnerabilities."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:95
# 58e906891dde4240bf512ecbffd9c61d
msgid "Test and Submit your work"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:97
# c0615f682ca14be7a743b476fdebcc14
msgid "At this point the process is the same as for :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`. Specifically, you will want to:"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:100
# 90112cda350b47319465679cb4f05b96
msgid "Build your package and verify that it compiles without error and without any added compiler warnings"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:102
# bf9d73bf6af4440c9cff67c04a93d2e3
msgid "Upgrade to the new version of the package from the previous version"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:103
# 529c9fe7e1c24509860e4cc39a4ffcd8
msgid "Test that the new package fixes the vulnerability and does not introduce any regressions"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:105
# d98930a36514494da1733b024d8b4ddd
msgid "Submit your work via a Launchpad merge proposal and file a Launchpad bug being sure to mark the bug as a security bug and to subscribe ``ubuntu-security-sponsors``"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:109
# d49563d25f1f4dc5b39bb6956251bf56
msgid "If the security vulnerability is not yet public then do not file a merge proposal and ensure you mark the bug as private."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:112
# 0317db41f84c4659a75bf3d648b6b6d3
msgid "The filed bug should include a Test Case, i.e. a comment which clearly shows how to recreate the bug by running the old version then how to ensure the bug no longer exists in the new version."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:116
# 68aa3e7e83414611a745a99f09525990
msgid "The bug report should also confirm that the issue is fixed in Ubuntu versions newer than the one with the proposed fix (in the above example newer than Lucid).  If the issue is not fixed in newer Ubuntu versions you should prepare updates for those versions too."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:123
# a8f85d09d3e14894afc69da4beb7ae77
msgid "Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:125
# 22a93545e4b14b6db3b2af8dfac9066f
msgid "We also allow updates to releases where a package has a high impact bug such as a severe regression from a previous release or a bug which could cause data loss.  Due to the potential for such updates to themselves introduce bugs we only allow this where the change can be easily understood and verified."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:130
# a9bfe59160d74e7c9986a1b2e92464f8
msgid "The process for Stable Release Updates is just the same as the process for security bugs except you should subscribe ``ubuntu-sru`` to the bug."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:133
# 28dfa3ea09854774b669521fb749276d
msgid "The update will go into the ``proposed`` archive (for example ``lucid-proposed``) where it will need to be checked that it fixes the problem and does not introduce new problems.  After a week without reported problems it can be moved to ``updates``."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:138
# eb277103224b4a7b917073c6fc7e5c85
msgid "See the `Stable Release Updates wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:3
# 73b0ddceecdc4b28a4777951d9434cfd
msgid "Traditional Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:5
# 24e216b946a640cebd4bbaeed262fa5f
msgid "The majority of this guide deals with :doc:`Ubuntu Distributed Development <./udd-intro>` (UDD) which utilizes the distributed version control system (DVCS) Bazaar for :ref:`retrieving package sources <branching>` and submitting fixes with :ref:`merge proposals. <merge-proposal>` This article will discuss what we will call traditional packaging methods for lack of a better word. Before Bazaar was adopted for Ubuntu development, these were the typical methods for contributing to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:13
# 7b15c4bf363e467b88d6b87e55ffb44f
msgid "In some cases, you may need to use these tools instead of UDD. So it is good to be familiar with them. Before you begin, you should already have read the article :doc:`Getting Set Up. <./getting-set-up>`"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:18
#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:3
# 70bc1b945c744f709e5d4705c36c020c
# bece7c9aac1c4071b64d43daa860d70e
msgid "Getting the Source"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:20
# 6c95476737e9464fb6499db08b8bcb63
msgid "In order to get a source package, you can simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:24
# ae2cc5997adb4f06a2d9c50b047dad78
msgid "This method has some draw backs though. It downloads the version of the source that is available on **your system.** You are likely running the current stable release, but you want to contribute your change against the package in the development release. Luckily, the ``ubuntu-dev-tools`` package provides a helper script::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:32
# a21544ed61f24ab49a9c0569ef41475c
msgid "By default, the  latest version in the development release will be downloaded. You can also specify a version or Ubuntu release like::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:37
# 8dcb9709392342d8b95d34cb421a9fdf
msgid "to pull the source from the ``precise`` release, or::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:41
# dd41ab4896da4100ad68552a6506e10a
msgid "to download version ``1.0-1ubuntu1`` of the package. For more information on the command, see ``man pull-lp-source``."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:44
# 632f216b144a4721ba29c3ce0df1d6c1
msgid "For our example, let's pretend we got a bug report saying that \"colour\" in the description of ``xicc`` should be \"color,\" and we want to fix it. *(Note: This is just an example of something to change and not really a bug.)* To get the source, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:52
# 38731e4f971141e6902d30ba9a90888f
msgid "Creating a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:54
# 912fcffd95174c00b3579d79bcb821f3
msgid "A ``debdiff`` shows the difference between two Debian packages. The name of the command used to generate one is also ``debdiff``. It is part of the ``devscripts`` package. See ``man debdiff`` for all the details. To compare two source packages, pass the two ``dsc`` files as arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:61
# cfb4e21d96d44fb59e1dd37526508315
msgid "To continue with our example, let's edit the ``debian/control`` and \"fix\" our \"bug\"::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:67
# ae12a8edd4c04f3aadad2f480fc23fad
msgid "We also must adhere to the `Debian Maintainer Field Spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ and edit ``debian/control`` to replace::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:73
# 8c0fa66fa44d4194bf37627992c05142
msgid "with::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:78
# 72f5ec8955764d349ca3ecfb0294ab43
msgid "You can use the ``update-maintainer`` tool (in the ``ubuntu-dev-tools`` package) to do that."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:81
# 48a9018c46524c5e985c45c7c8a3e85c
msgid "Remember to document your changes in ``debian/changelog`` using ``dch -i`` and then we can generate a new source package::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:86
# 1149c8d113254400a449b80637c87342
msgid "Now we can examine our changes using ``debdiff``::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:91
# 7b507e83e8a7410baa71b859a56ef8e3
msgid "To create a patch file that you can send to others or attach to a bug report for sponsorship, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:98
# 2b9120cd431a45cbbe295f76b8deffcf
msgid "Applying a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:100
# bc619d5bd25949e1aa95b10980cb8e57
msgid "In order to apply a debdiff, first make sure you have the source code of the version that it was created against::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:105
# f4a2f7aaa15b477c9822e67fc3a2c794
msgid "Then in a terminal, change the to the directory where the source was uncompressed::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:110
# 76b93b41cd874d2e9ec817a515f067eb
msgid "A debdiff is just like a normal patch file. Apply it as usual with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:6
# 73cf4bfa11fe4edb93472698d8540f89
msgid "Source package URLs"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:8
# 26f0eb069d8a49e5a515b686931a9016
msgid "Bazaar provides some very nice shortcuts for accessing Launchpad's source branches of packages in both Ubuntu and Debian."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:11
# 23122a73c4654526be7de79f55c1d64a
msgid "To refer to source branches use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:15
# 487e7bcfbdbe43a9911bd2dc6c5d6b94
msgid "where *package* refers to the package name you're interested in.  This URL refers to the package in the current development version of Ubuntu.  To refer to the branch of Tomboy in the development version, you would use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:21
# 2e78d4b8f9c6419b9471984929515a5c
msgid "To refer to the version of a source package in an older release of Ubuntu, just prefix the package name with the release's code name.  E.g. to refer to Tomboy's source package in Maverick_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:27
# 7dabf72b538242eeb0860bcbb373c770
msgid "Since they are unique, you can also abbreviate the distro-series name::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:31
# b815d89ad8464c11b6535b31004a158b
msgid "You can use a similar scheme to access the source branches in Debian, although there are no shortcuts for the Debian distro-series names.  To access the Tomboy branch in the current development series for Debian use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:37
# 9c801dbed3d4413e9255b28f9210fd1f
msgid "and to access Tomboy in Debian Lenny_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:48
# b4940bf8de574edfb5cb1c8c7b8ead8a
msgid "Getting the source"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:50
# 2a0e8ec321a74c0380b56fd1e7624f32
msgid "Every source package in Ubuntu has an associated source branch on Launchpad. These source branches are updated automatically by Launchpad, although the process is not currently foolproof."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:54
# f33eb1cd3102482cb0c33d6d675eece5
msgid "There are a couple of things that we do first in order to make the workflow more efficient later.  Once you are used to the process you will learn when it makes sense to skip these steps."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:62
# 124d345f8fff4026b86b0c401979e601
msgid "Creating a shared repository"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:64
# bf8fc72c215943cf9a1cfb3cf7469861
msgid "Say that you want to work on the Tomboy package, and you've verified that the source package is named ``tomboy``.  Before actually branching the code for Tomboy, create a shared repository to hold the branches for this package.  The shared repository will make future work much more efficient."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:70
# d000d972e7ef47b1a0ab239447a0ceb5
msgid "Do this using the `bzr init-repo` command, passing it the directory name we would like to use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:75
# 4e886f93731e4e8fb62e5c7fa64e1576
msgid "You will see that a `tomboy` directory is created in your current working area.  Change to this new directory for the rest of your work::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:82
# b27a623e1b80470d81312d696fa010cb
msgid "Getting the trunk branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:84
# 5a84ce2e240d4a3bbc3c88d3426953a7
msgid "We use the `bzr branch` command to create a local branch of the package. We'll name the target directory `tomboy.dev` just to keep things easy to remember::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:90
# 84e105ae62f84997adbece8678a3535e
msgid "The tomboy.dev directory represents the version of Tomboy in the development version of Ubuntu, and you can always ``cd`` into this directory and do a `bzr pull` to get any future updates."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:97
# 8478ca1afa5244ab8ff28de35a9094c4
msgid "Ensuring the version is up to date"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:99
# 551573c8bd164aca8d5441c406173d96
msgid "When you do your ``bzr branch`` you will get a message telling you if the packaging branch is up to date.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:107
# b88f30ea19a64515ae8f53aa23115af9
msgid "Occasionally the importer fails and packaging branches do not match what is in the archive.  A message saying::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:112
# 5df9cf6d984a4d6396c718499c611344
msgid "means the importer has failed.  You can find out why on http://package-import.ubuntu.com/status/ and `file a bug on the UDD project`_ to get the issue resolved."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:118
# 69ae256767c54bb4b7146c670d97a709
msgid "Upstream Tar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:120
# 9577420299cf4d8aa18313221f26ff8e
msgid "You can get the upstream tar by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:124
# c05f2b28eeb34fe0b04991483f7e1d4f
msgid "This will try a number of methods to get the upstream tar, firstly by recreating it from the ``upstream-x.y`` tag in the bzr archive, then by downloading from the Ubuntu archive, lastly by running ``debian/rules get-orig-source``. The upstream tar will also be recreated when using bzr to build the package::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:132
# 1c090b1ab06640f79fa849ecb22a5301
msgid "The `builddeb` plugin has several `configuration options`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:136
# 91275653e0f04d3ebea71d594e2ec91d
msgid "Getting a branch for a particular release"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:138
# c144c19d402946969dc3f2e2c6518981
msgid "When you want to do something like a `stable release update`_ (SRU), or you just want to examine the code in an old release, you'll want to grab the branch corresponding to a particular Ubuntu release.  For example, to get the Tomboy package for Maverick do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:147
# 8ca3d5daf89a45a1a79f6602573cf288
msgid "Importing a Debian source package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:149
# c5bcaf71318f4741bd414c5355695248
msgid "If the package you want to work on is available in Debian but not Ubuntu, it's still easy to import the code to a local bzr branch for development.  Let's say you want to import the `newpackage` source package.  We'll start by creating a shared repository as normal, but we also have to create a working tree to which the source package will be imported (remember to cd out of the `tomboy` directory created above)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:162
# 687d736847d34e5a80e570b3aebf4c3e
msgid "As you can see, we just need to provide the remote location of the dsc file, and Bazaar will do the rest.  You've now got a Bazaar source branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:3
# d8dcec182a5a45dfa1292e45d28971ab
msgid "Ubuntu Distributed Development — Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:5
# edc37cfe25be4c8a9a7429de93ab1587
msgid "This guide focuses on packaging using the *Ubuntu Distributed Development* (UDD) method."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:8
# 5368850dd86b4869a8fb537c675559f3
msgid "*Ubuntu Distributed Development* (UDD) is a new technique for developing Ubuntu packages that uses tools, processes, and workflows similar to generic distributed version control system (DVCS) based software development.  The DVCS used for UDD is Bazaar_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:14
# e4387ccfeb754656a410acc6ccfd6c6c
msgid "Traditional Packaging Limitations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:16
# 829732fd61f64479a82b7ee936efe310
msgid "Traditionally Ubuntu packages have been kept in tar archive files.  A traditional source package is made up of the upstream source tar, a \"debian\" tar (or compressed diff file for older packages) containing the packaging and a .dsc meta-data file.  To see a traditional package run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:23
# 2cb0b3804c3b49d091230672d9527d7c
msgid "This will download the upstream source ``kdetoys_4.6.5.orig.tar.bz2``, the packaging ``kdetoys_4.6.5-0ubuntu1.debian.tar.gz`` and the meta-data ``kdetoys_4.6.5-0ubuntu1~ppa1.dsc``.  Assuming you have dpkg-dev installed it will extract these and give you the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:28
# ded5d5ed84a5412788d55f49e44c016a
msgid "Traditional packaging would edit these files and upload.  However this gives limited opportunity to collaborate with other developers, changes have to be passed around as diff files with no central way to track them and two developers can not make changes at the same time.  So most teams have moved to putting their packaging in a revision control system.  This makes it easier for several developers to work on a package together.  However there is no direct connection between the revision control system and the archive packages so the two must be manually kept in sync.  Since each team works in its own revision control system a prospective developer must first work out where that is and how to get the packaging before they can work on the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:40
# e5299a5b9cd4423da48c87865d48f26b
msgid "Ubuntu Distributed Development"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:42
# f3fdbfbab4b941d4ab4b25decf7c6bd3
msgid "With Ubuntu Distributed Development all packages in the Ubuntu (and Debian) archive are automatically imported into Bazaar branches on our code hosting site Launchpad.  Changes can be made directly to these branches in incremental steps and by anyone with commit access.  Changes can also be made in forked branches and merged back in with Merge Proposals when they are large enough to need review or if they are by someone without direct commit access."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:49
# b0f903fa7d434bf28e7cec95a356189f
msgid "UDD branches are all in a standard location, so doing a checkout is easy::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:53
# f423f10378484db989e6ba4ce066dfc8
msgid "The merge history includes two separate branches, one for the upstream source and one which adds the ``debian/`` packaging directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:59
# 58a4d15de50948d197e84951feb74546
msgid "(This command uses *qbzr* for a GUI, run ``log`` instead of ``qlog`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:64
# c9d8f71dc7bc48668b95157b8e3fd7b2
msgid "This UDD branch of *kdetoys* shows the full packaging for each version uploaded to Ubuntu with grey circles and the upstream source versions with green circles.  Versions are tagged with either the version in Ubuntu such as ``4:4.2.29-0ubuntu1`` or for the upstream branch with the upstream version ``upstream-4.2.96``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:70
# 17a3089194504141996c1fb529cb17de
msgid "Many Ubuntu packages are based on the packages in Debian, UDD also imports the Debian package into our branches.  In the *kdetoys* branch above the Debian versions from *unstable* are from the merge with blue circles while those from *Debian experimental* are from the merge with yellow circles.  Debian releases are tagged with their version number, e.g., ``4:4.2.2-1``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:76
# 45362a82cbbb46528d1ec0c093371e62
msgid "So from a UDD branch you can see the complete history of changes to the package and compare any two versions.  For example, to see the changes between version 4.2.2 in Debian and the 4.2.2 in Ubuntu use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:82
# a245b3e675c54186a1f98e4811ba10cb
msgid "(This command uses *qbzr* for a GUI, run ``diff`` instead of ``qdiff`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:87
# 4ed5c14f30d348179db2852e9f801ff6
msgid "From this we can clearly see what has changed in Ubuntu compared to Debian, very handy."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:91
# 7339de6afa4c44bfb02d8e569f4abbfc
msgid "Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:93
# 7b61064ac10c4580879820eac0c1deee
msgid "UDD branches use Bazaar, a distributed revision control system intended to be easy to use for those familiar with popular systems such as Subversion while offering the power of Git."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:97
# 84de4387fc7346648e1f3b74c92e626f
msgid "To do packaging with UDD you will need to know the basics of how to use Bazaar to manage files.  For an introduction to Bazaar see the `Bazaar Five Minute Tutorial <http://doc.bazaar.canonical.com/bzr.dev/en/mini-tutorial/index.html>`_ and the `Bazaar Users Guide <http://doc.bazaar.canonical.com/bzr.dev/en/user-guide/index.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:105
# a50d1bf4d3234727bf3081e5dc64fbfd
msgid "Limitations of UDD"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:107
# 2604f02311e6415f86c7a7a035180e27
msgid "Ubuntu Distributed Development is a new method for working with Ubuntu packages.  It currently has some notable limitations:"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:110
# 5790552d70e44a8ea1977de33cdfc4c9
msgid "Doing a full branch with history can take a lot of time and network resources.  You may find it quicker to do a lightweight checkout ``bzr checkout --lightweight ubuntu:kdetoys`` but this will need a network access for any further bzr operations."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:115
# 5d491a4ad73a41f9aa851f9030f8eb00
msgid "Working with patches is fiddly.  Patches can be seen as a branched revision control system, so we end up with RCS on top of RCS."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:118
# 86d4cb85f7184e91ab35368e875ab8ca
msgid "There is no way to build directly from branches.  You need to create a source package and upload that."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:121
# 673e8b5affcd4c96a3eb2411c89576af
msgid "Some packages have not been successfully imported into UDD branches.  Recent versions of Bazaar will automatically notify you when this is the case. You can also check the `status of the package importer`_ manually before working on a branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:126
# 226618fef72245bbbcd8037d41aa44fb
msgid "All of the above are being worked on and UDD is expected to become the main way to work on Ubuntu packages soon.  However currently most teams within Ubuntu do not yet work with UDD branches for their  development.  However because UDD branches are the same as the packages in the  archive any team should be able to accept merges against them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:3
# d5e5f00851ca447985fdd353639d1cb1
msgid "Getting The Latest"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:5
# c7b3183e3e0d4e31958cd00277615f67
msgid "If someone else has landed changes on a package, you will want to pull those changes in your own copies of the package branches."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:10
# 54f6e102d32e48e290738b7668f4b1ee
msgid "Updating your main branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:12
# b805721f03eb45f4b9b73ce28e6707b2
msgid "Updating your copy of a branch that corresponds to the package in a particular release is very simple, simply use `bzr pull` from the appropriate directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:18
# 178698715b2d4d13b14aa8cd7b991050
msgid "This works wherever you have a checkout of a branch, so it will work for things like branches of `maverick`, `hardy-proposed`, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:23
# 8b58c63e6a8848778ec2d060a49e567b
msgid "Getting the latest in to your working branches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:25
# f049030241034133af844ba50d01be17
msgid "Once you have updated your copy of a distroseries branch, then you may want to merge this in to your working branches as well, so that they are based on the latest code."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:29
# b8088157e5e7465a853cebf78ac12772
msgid "You don't have to do this all the time though.  You can work on slightly older code with no problems.  The disadvantage would come if you were working on some code that someone else changed.  If you are not working on the latest version then your changes may not be correct, and may even produce conflicts."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:34
# ed18665143094cd8b939b2f39c0a815c
msgid "The merge does have to be done at some point though.  The longer it is left, the harder may be, so doing it regularly should keep each merge simple.  Even if there are many merges the total effort would hopefully be less."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:38
# 6cec7e7c124d4627967b084fd10e11b3
msgid "To merge the changes you just need to use ``bzr merge``, but you must have committed your current work first::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:44
# bdb9d4dd19ec47d3a051c91056a77f72
msgid "Any conflicts will be reported, and you can fix them up.  To review the changes that you just merged use ``bzr diff``.  To undo the merge use ``bzr revert``.  Once you are happy with the changes then use ``bzr commit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:50
# 0f5c45f7c372428491a09b090e97b970
msgid "Referring to versions of a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:52
# 4240d57d0ab041b4aa7844f2bcab8e46
msgid "You will often think in terms of versions of a package, rather than the underlying Bazaar revision numbers.  `bzr-builddeb` provides a revision specifier that makes this convenient.  Any command that takes a ``-r`` argument to specify a revision or revision range will work with this specifier, e.g. ``bzr log``, ``bzr diff``, and so on.  To view the versions of a package, use the ``package:`` specifier::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:61
# 089f7e5d06344704a4c450cfba8f1d1d
msgid "This shows you the difference between package version 0.1-1 and 0.1-2."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:3
# 14da9c844fc94b27a161ffd111dfb126
msgid "Merging — Updating from Debian and Upstream"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:5
# 7be9b47744364b7885a400dca5e0cad0
msgid "Merging is one of the strengths of Bazaar, and something we do often in Ubuntu development.  Updates can be merged from Debian, from a new upstream release, and from other Ubuntu developers.  Doing it in Bazaar is pretty simple, and all based around the ``bzr merge`` command [#]_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:10
# a2e0bf11a9a54a2cb1e535ea8880e3eb
msgid "While you are in any branch's working directory, you can merge in a branch from a different location.  First check that you have no uncommitted changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:15
# 13c1ef4eaf6e41bca4300a674c02dbdc
msgid "If that reports anything then you will either have to commit the changes, revert them, or shelve them to come back to later."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:20
# 15001253df3e463180dbd37f0bb43519
msgid "Merging from Debian"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:22
# 11cb05abb1b946a4bc9d382055c4a873
msgid "Next run ``bzr merge`` passing the URL of the branch to merge from.  For example, to merge from the version of the package in Debian Squeeze_ run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:27
# a54e3ce4144d43fd9110ff5a73cee994
msgid "This will merge the changes since the last merge point and leave you with changes to review.  This may cause some conflicts.  You can see everything that the ``merge`` command did by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:34
# 203e74ba3d34477a9bbd9a3b1394d859
msgid "If conflicts are reported then you need to edit those files to make them look how they should, removing the *conflict markers*.  Once you have done this, run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:41
# fd31a37a0b6043f4abcf4a66670c645d
msgid "This will resolve any conflicted files that you fixed, and then tell you what else you have to deal with."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:44
# 6a8c64bc7e314c5592d54c7c19db6cbb
msgid "Once any conflicts are resolved, and you have made any other changes that you need, you will add a new changelog entry, and commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:50
# 29dba120a1594253b146f81f1a5ab3c2
msgid "as described earlier."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:52
# 5acc9ae711b1481db63ee7ba1407789d
msgid "However, before you commit, it is always a good thing to check all the Ubuntu changes by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:57
# f2a567e6eefc4255911dc641e6f11f34
msgid "which will show the differences between the Debian (0.6.10-5) and Ubuntu versions (0.6.10-5ubuntu1).  In similar way you can compare to any other versions.  To see all available versions run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:63
# 97668c8caac746e4bd06c4f2a229c34a
msgid "After testing and committing the merge, you will need to seek sponsorship or upload to the archive in the normal way."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:66
# 9837db7070e54f53909761ea8bfa9711
msgid "If you are going to build the source package from this merged branch, you would use the ``-S`` option to the ``bd`` command.  One other thing you'll want to consider is also using the ``--package-merge`` option.  This will add the appropriate ``-v`` and ``-sa`` options to the source package so that all the changelog entries since the last Ubuntu change will be included in your ``_source.changes`` file.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:77
# 35e01d16fd8742b4aef3460a8e02d1d8
msgid "Merging a new upstream version"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:79
# 08ace24b533749af8757e8286b5a8abf
msgid "When upstream releases a new version (or you want to package a snapshot), you have to merge a tarball into your branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:82
# f3408cc5c5f04caab3ce85436baaa072
msgid "This is done using the ``bzr merge-upstream`` command.  If your package has a valid ``debian/watch`` file, from inside the branch that you want to merge to, just type this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:88
# 6e51d938aa65492fa04841321e4b81fd
msgid "This will download the tarball and merge it into your branch, automatically adding a ``debian/changelog`` entry for you.  ``bzr-builddeb`` looks at the ``debian/watch`` file for the upstream tarball location."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:92
# 47860da3640a4ce48f948b7dad1a358e
msgid "If you do *not* have a ``debian/watch`` file, you'll need to specify the location of the upstream tarball, and the version manually::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:97
# 45366637873c4d8da2cade539e931113
msgid "The ``--version`` option is used to specify the upstream version that is being merged in, as the command isn't able to infer that (yet)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:100
# 5a0ca8ab605740c395481aa327e17e2e
msgid "The last parameter is the location of the tarball that you are upgrading to; this can either be a local filesystem path, or a http, ftp, sftp, etc. URI as shown.  The command will automatically download the tarball for you.  The tarball will be renamed appropriately and, if required, converted to ``.gz``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:105
# 9e679362d96d4a629778e3027b3d0466
msgid "The `merge-upstream` command will either tell you that it completed successfully, or that there were conflicts.  Either way you will be able to review the changes before committing as normal."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:109
# d24a2faac92443a79768ccf5a92131b9
msgid "If you are merging an upstream release into an existing Bazaar branch that has not previously used the UDD layout, ``bzr merge-upstream`` will fail with an error that the tag for the previous upstream version is not available; the merge can't be completed without knowing what base version to merge against. To work around this, create a tag in your existing repository for the last upstream version present there; e.g., if the last Ubuntu release was *1.1-0ubuntu3*, create the tag *upstream-1.1* pointing to the bzr revision you want to use as the tip of the upstream branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:122
# 9a3c84c5060d4c26ba616c5e2c9f4c04
msgid "You will need newer versions of ``bzr`` and the ``bzr-builddeb`` for the ``merge`` command to work.  Use the versions from Ubuntu 12.04 (Precise) or the development versions from the ``bzr`` PPA.  Specifically, you need ``bzr`` version 2.5 beta 5 or newer, and ``bzr-builddeb`` version 2.8.1 or newer.  For older versions, use the ``bzr merge-package`` command instead."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:3
# a94f746c51ea4dbbb0f61a09df041444
msgid "Working with Patches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:5
# f6ca5105fc2140dcb0a6d0e46f044621
msgid "Many existing packages that have changes from upstream express those changes using a patch system, of which there are several to choose from.  Usually, when you make an additional change to a package, you'll want to add a patch file to the patch system being used, rather than editing the source code in place.  Note however that it is considered bad practice to add a patch system to a package that does not already have one.  In that case, either coordinate with the Debian maintainer, or edit the files in place.  You can find out if your package has a patch system by using the ``what-patch`` command (from the ``ubuntu-dev-tools`` package)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:15
# 87c0a79c2e5c467998a85e1a4242faca
msgid "While Debian has several patch systems, Quilt_ is becoming the most popular. Quilt acts something like a version control system itself, and in the context of UDD, this can be both a good thing and a bad thing.  With Bazaar 2.5 and ``bzr-builddeb`` 2.8.1 (in Ubuntu 12.04 Precise), handling source packages with quilt patches has become much easier."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:21
# e6ab6b29f0424772a711a26ff56dcb40
msgid "There are two main tasks where you'll have to be aware of quilt patches, when developing your own patch to the upstream code, and when merging new versions of the package from Debian where either the Debian or Ubuntu (or both) have quilt patches in the source branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:26
# d53f671a73e7499095262ad54cef30d3
msgid "Here are some guidelines for working with quilt patches in UDD in these two scenarios.  Some of these techniques are works-in-progress, so you should adapt them to your own workflow, and keep watching for improvements from the Bazaar teams."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:33
# 3f59c7a8b5ee47549812c3543f4d4326
msgid "Patches are applied in source branches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:35
# 0550e22a7d644d82955dc695ec76444e
msgid "One important thing to keep in mind: all source branches reflect the tree after a ``quilt push -a``.  In other words, when you branch a source branch from Launchpad, you get the tree with all patches applied, ready for you to jump right into hacking.  You do not need to ``quilt push -a`` manually, and in fact, you'll get a tree with lots of distracting modifications if you push or pop all the changes.  Or to put it another way, once you have a branch, jump right in!"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:45
# a192531316dd42718951eccdd56a4db6
msgid "Merging from Debian with quilt patches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:47
# 20c4167c0ed14daabe6e469cfeb36bb1
msgid "With newer versions of Bazaar as mentioned above, merging new Debian versions to Ubuntu versions should be quite easy now, even when one or both packages have quilt patches.  Just use ``bzr merge`` as you normally would.  Under the hood, Bazaar will first un-apply all the patches, then do the merge, then if there are no conflicts, it will re-apply the patches leaving you again with a source branch in the ``quilt push -a`` state."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:54
# b0e8ce96ab0c497685ed32e42ef8243f
msgid "For example, if we want to merge the Debian version of the ``aptitude`` package with the Ubuntu version, we would do something like this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:64
# 4ceac684b0be42c8a6b0b4354bea51f7
msgid "If there are merge conflicts, the quilt patches will remain un-applied so that you can resolve the conflicts more easily.  You would use a combination of bzr and quilt commands to resolve the conflicts, until all the quilt patches are applied again.  Then you're ready to commit, push, and build as you normally would."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:72
# 55c8c624d60d4623926414cba1d45da1
msgid "Develop your patch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:74
# 567d22a406c345a9a28fb05dce2e02e0
msgid "There is a strong preference to fixing packages using a patch system like quilt, rather than modifying the source code directly.  This is because with a patch system, it's easier to communicate those changes to Debian or upstream (where UDD isn't used), and to remove patches when upstream fixes the bug the patch addresses (possibly in a completely different way)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:80
# 6c6b045c636a44098e791d0b09b37d40
msgid "Let's say there's a bug in the ``dbus`` package that you want to fix.  You start the way you normally would with any package in UDD::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:89
# 063137a5e94a4bcb89eea86408bf957b
msgid "Maybe the bug is pretty simple; there's a typo in the ``README`` file.  Just fix the typo in your favorite editor, then do a ``bzr stat`` to prove that the file has been edited::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:97
# 80a29653e4834589a4bcdd834525f733
msgid "Now, in order to get this fix into a quilt patch, we need to generate a diff, but we need the resulting patch to have a format that is consumable by quilt. The way to do that is to use the ``--prefix`` (or ``-p``) option to ``bzr diff``::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:104
# e211b11cceaf4c10920f6c839c9bd8c0
msgid "What this actually does is to produce a *level 1* diff, which is required by the quilt command we're going to use below.  Normally, ``bzr diff`` produces *level 0* diffs which are more easily read by humans, but this won't work with quilt (despite the implication in the quilt documentation)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:109
# 58296af1c69149c49c8a2551aee65fb3
msgid "The above command generates the patch and stores it in a file one level up from the working tree.  Note that here we're using the ``a`` and ``b`` directory prefixes for the diff, but the actual names don't really matter."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:113
# 3fde9632ab0346a8bcc57258310a0cdc
msgid "Now all you need to do is to import the patch into your quilt patches.  If you named the file above with the same name you want into your quilt stack, then just do this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:120
# 0c0790535f894791ad82a124ccd90f05
msgid "You need the last line to inform Bazaar about the new quilt patch file.  You can see that the quilt patch's name is the same as the file name you generated above.  Of course, you can change this by using the ``-P`` option to ``quilt import``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:125
# 0688b9c335d142d89dd11a297db779a7
msgid "One important thing to notice is that if you do the commands ``bzr stat`` and a ``quilt applied`` , you'll see that the ``README`` file is still modified, but the ``bug-12345.patch`` is not yet applied.  If you try to apply the newly imported quilt patch (with ``quilt push``), it will fail because you're applying a patch on top of the already patched file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:131
# f626360f15744b149fbd0703185f2f3e
msgid "One way around this is to revert the change to ``README`` before doing the ``quilt push``.  However, if you think you may want to continue to develop the patch, and thus do not want to throw away your in-tree changes, use ``bzr shelve`` to save the change in the working tree to the side, then do ``quilt push``.  Either way, once you've pushed your top quilt patch, you can just edit the tree in place, and do ``quilt refresh`` commands to update the top quilt patch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:141
# 62455fcfbaaa4148937ecc6cf81da5e0
msgid "Gotchas"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:143
# c7e40c205d4747d8a1a41858aee7fa79
msgid "One thing to keep in mind is that quilt uses a hidden ``.pc`` directory to record its status.  This directory is under version control in all source branches.  *Watch out* for changes to the ``.pc`` directory that are unrelated (or more accurately, uninteresting) to your patch.  This can happen because the UDD source branch importer `currently includes any existing .pc directory`_ in the imported branch.  This can cause conflicts, or other unwanted or unknown changes because you've essentially got two conflicting version control systems competing for the same thing (i.e. bzr and quilt). For now, the best recommendation is to revert any changes to the ``.pc`` directory in your branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:156
# de44e0969620468d9a630dc967e24865
msgid "edit-patch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:158
# f8fd08e429264fa39ad24d88f515d7da
msgid "``edit-patch`` is a nice little wrapper script that comes as part of the ``ubuntu-dev-tools`` package.  It pretty much hides the nasty details of dealing with the patch system specifically.  For example, while the above works well if your package is using quilt already, you'll have to adjust the workflow, perhaps significantly, to work with `a different patch system`_.  In theory ``edit-patch`` should solve this, but there are currently two blockers."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:165
# a60cca10603d428b90d353ec178f2cf4
msgid "By default, ``bzr diff`` produces a ``-p0`` patch, but ``edit-patch`` defers to the underlying patch system's default.  For quilt, this is ``-p1``.  ``quilt import`` takes a ``-p`` argument to specify the prefix level, but this isn't yet exposed in ``edit-patch``.  If you use the ``--prefix`` argument to the ``bzr diff`` command as shown above, you should be okay."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:171
# c76ce02b4ee94e0fb4d6d49226c725d2
msgid "By default, ``edit-patch`` requires a path to an existing patch file, but it's more convenient to pipe the output of ``bzr diff`` to the stdin of ``edit-patch``, as shown above.  The alternative would be to save the diff in a temporary file, and then point ``edit-patch`` to this temporary file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:3
# ad49dadc74494e0bbcc5df9a6eea82a5
msgid "Seeking Review and Sponsorship"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:5
# 6129a680b67340aca92c7e289dfda6a0
msgid "One of the biggest advantages to using the UDD workflow is to improve quality by seeking review of changes by your peers.  This is true whether or not you have upload rights yourself.  Of course, if you don't have upload rights, you will need to seek sponsorship."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:10
# be1c06c180634e2e98c69a241ee29c1b
msgid "Once you are happy with your fix, and have a branch ready to go, the following steps can be used to publish your branch on Launchpad, link it to the bug issue, and create a *merge proposal* for others to review, and sponsors to upload."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:19
# 7d335992195b4d68acd3ffe1d0c08724
msgid "Pushing to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:21
# d910c9e905ad45dead4963e27a700d2b
msgid "We previously showed you how to :ref:`associate your branch to the bug <link-via-changelog>` using ``dch`` and ``bzr commit``.  However, the branch and bug don't actually get linked until you push the branch to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:25
# 98ccb96bf8c8402bac27c43f381e3f93
msgid "It is not critical to have a link to a bug for every change you make, but if you are fixing reported bugs then linking to them will be useful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:28
# 1272e5785b944589ac418509f86f5ccc
msgid "The general form of the URL you should push your branch to is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:32
# a86b7c515deb43df847d27a27e5e9618
msgid "For example, to push your fix for bug 12345 in the Tomboy package for Natty, you'd use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:37
# f1d31cf0b348478ea7d909f1fee386aa
msgid "The last component of the path is arbitrary; it's up to you to pick something meaningful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:40
# c128c73867d54537855390c94ba4a0b4
msgid "However, this usually isn't enough to get Ubuntu developers to review and sponsor your change.  You should next submit a *merge proposal*."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:43
# 9fef57d125544185a09f9ce92029af52
msgid "To do this open the bug page in a browser, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:47
# ee2371091fbf4977abd30594b570cf02
msgid "If that fails, then you can use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:51
# 4cb523f3644d4e3aac7829aac194e134
msgid "where most of the URL matches what you used for `bzr push`.  On this page, you'll see a link that says *Propose for merging into another branch*.  Type in an explanation of your change in the *Initial Comment* box.  Lastly, click *Propose Merge* to complete the process."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:56
# 8fc03c261fbd4a5d9d22a80c7c11adbe
msgid "Merge proposals to package source branches will automatically subscribe the `~ubuntu-branches` team, which should be enough to reach an Ubuntu developer who can review and sponsor your package change."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:62
# 25d4765c480a49caaad05023a0bf69df
msgid "Generating a debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:64
# 9aeb103468ee43c7af72ec5722a4f8a2
msgid "As noted above, some sponsors still prefer reviewing a *debdiff* attached to bug reports instead of a merge proposal.  If you're requested to include a debdiff, you can generate one like this (from inside your `bug-12345` branch)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:71
# 35683b5dbdda48c2857bb757b8c14079
msgid "Another way is to is to open the merge proposal and download the diff."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:73
# 03ff2033f91b4ccc918552fdfe9db875
msgid "You should ensure that diff has the changes you expect, no more and no less. Name the diff appropriately, e.g. ``foobar-12345.debdiff`` and attach it to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:79
# 45989b2cdd844f42b21f2a1a9beeb9c9
msgid "Dealing with feedback from sponsors"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:81
# 1effd1299e8d4c2db063992637cdeac1
msgid "If a sponsor reviews your branch and asks you to change something, you can do this fairly easily.  Simply go to the branch that you were working in before, make the changes requested, and then commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:87
# 7c02304bf081490ebd4296d6b59b5092
msgid "Now when you push your branch to Launchpad, Bazaar will remembered where you pushed to, and will update the branch on Launchpad with your latest commits. All you need to do is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:93
# 4694560f073f4b20ba19df82985d8983
msgid "You can then reply to the merge proposal review email explaining what you changed, and asking for re-review, or you can reply on the merge proposal page in Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:97
# 3c9adb47ca274115989ab9027cec5acf
msgid "Note that if you are sponsored via a debdiff attached to a bug report you need to manually update by generating a new diff and attaching that to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:103
# 42f36aaf6f9a4cad8efaa20bb7101524
msgid "Expectations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:105
# 2b10b71ea50549c7a0af6bbc41449c1c
msgid "The Ubuntu developers have set up a schedule of \"patch pilots\", who regularly review the sponsoring queue and give feedback on branches and patches. Even though this measure has been put in place it might still take several days until you hear back. This depends on how busy everybody is, if the development release is currently frozen, or other factors."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:111
# c5b70f730688467c8a113584a1d50e3a
msgid "If you haven't heard back in a while, feel free to join `#ubuntu-devel` on `irc.freenode.net` and find out if somebody can help you there."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:114
# f974f62f9e4b4abf86285f194c6940fd
msgid "For more information on the generall sponsorship process, review the documentation on our wiki as well: https://wiki.ubuntu.com/SponsorshipProcess"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:3
# b796c8f12e0c41a8876f6dfc6b450cdc
msgid "Uploading a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:5
# 8c72ba2037204e6faeb32229ab55e3a0
msgid "Once your merge proposal is reviewed and approved, you will want to upload your package, either to the archive (if you have permission) or to your `Personal Package Archive`_ (PPA).  You might also want to do an upload if you are sponsoring someone else's changes."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:12
# b19734f6c5ce4da5a4c2c05c1f241bcb
msgid "Uploading a change made by you"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:14
# 0f462ae4fd0840b3bf48a95cead43288
msgid "When you have a branch with a change that you would like to upload you need to get that change back on to the main source branch, build a source package, and then upload it."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:18
# 65532371144e413983467e15b2de5672
msgid "First, you need to check that you have the latest version of the package in your checkout of the development package trunk::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:24
# 5cedaf69f43e4b578949f741dfef926d
msgid "This pulls in any changes that may have been committed while you were working on your fix.  From here, you have several options.  If the changes on the trunk are large and you feel should be tested along with your change you can merge them into your bug fix branch and test there.  If not, then you can carry on merging your bug fix branch into the development trunk branch.  As of bzr 2.5 and bzr-builddeb 2.8.1, this works with just the standard ``merge`` command::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:34
# f8d8548bbb624164b1c6b1be2648fa5a
msgid "For older versions of bzr, you can use the ``merge-package`` command instead::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:38
# 59b0b4fa0e4f4983afa1da117ca14f07
msgid "This will merge the two trees, possibly producing conflicts, which you'll need to resolve manually."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:41
# 00f51a35665c4c17a03358531203dd95
msgid "Next you should make sure the ``debian/changelog`` is as you would like, with the correct distribution, version number, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:44
# 9c4704fad4a24cd2825a6a2aa3f2401f
msgid "Once that is done you should review the change you are about to commit with ``bzr diff``.  This should show you the same changes as a debdiff would before you upload the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:48
# 37276a5121794e43bda6605838fffec8
msgid "The next step is to build and test the modified source package as you normally would::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:53
# 02c059d47ebe4b4f943b269062da16b4
msgid "When you're finally happy with your branch, make sure you've committed all your changes, then tag the branch with the changelog's version number.  The ``bzr tag`` command will do this for you automatically when given no arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:60
# be8cb35273d949cb97c150df1065e87b
msgid "This tag will tell the package importer that what is in the Bazaar branch is the same as in the archive."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:63
# 69c8237b4b46488b9f7d0cf5dd5d64a7
msgid "Now you can push the changes back to Launchpad::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:67
# 0dceaeb33b8d4e46920c5aa02b603c9c
msgid "(Change the destination if you are uploading an SRU or similar.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:69
# 7475949a507c48f29d47540fb5edc05f
msgid "You need one last step to get your changes uploaded into Ubuntu or your PPA; you need to ``dput`` the source package to the appropriate location.  For example, if you want to upload your changes to your PPA, you'd do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:75
# 2fa63d49fee3413286d3423575443a3f
msgid "or, if you have permission to upload to the primary archive::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:79
# 5025fdc1774d4f409a2ff3e147b607c2
msgid "You are now free to delete your feature branch, as it is merged, and can be re-downloaded from Launchpad if needed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:84
# fca224e1c222497693d170860dac2663
msgid "Sponsoring a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:86
# 263782d9301f41de9790c6c3d091ec40
msgid "Sponsoring someone else's change is just like the above procedure, but instead of merging from a branch you created, you merge from the branch in the merge proposal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:92
# fa3f1b29dfa54a8c832b606dd0ee8185
msgid "If there are lots of merge conflicts you would probably want to ask the contributor to fix them up.  See the next section to learn how to cancel a pending merge."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:96
# 233e7c1039f545dd813190bf885912d1
msgid "But if the changes look good, commit and then follow the rest of the uploading process::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:103
# 19a5dd8781c540b79d436f185cb404e9
msgid "Canceling an upload"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:105
# 4037bf9dd9aa4422807e94d37f009218
msgid "At any time before you `dput` the source package you can decide to cancel an upload and revert the changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:110
# 7839221c24ca4ce9a4bb773423f6f27d
msgid "You can do this if you notice something needs more work, or if you would like to ask the contributor to fix up conflicts when sponsoring something."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:115
# 90013142f9364bbe9dcd3f989b54a1cd
msgid "Sponsoring something and making your own changes"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:117
# 9b7b03ea8b1a46109c93ded07447f758
msgid "If you are going to sponsor someone's work, but you would like to roll it up with some changes of your own then you can merge their work in to a separate branch first."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:121
# a21bb44b37ef4abbb6013b26f8c74d72
msgid "If you already have a branch where you are working on the package and you would like to include their changes, then simply run the ``bzr merge`` from that branch, instead of the checkout of the development package.  You can then make the changes and commit, and then carry on with your changes to the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:127
# 2d44dfa91a004b64be74f8cdf682be58
msgid "If you don't have an existing branch, but you know you would like to make changes based on what the contributor provides then you should start by grabbing their branch::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:133
# 9af9686e69c84a5ca2387b1710373783
msgid "then work in this new branch, and then merge it in to the main one and upload as if it was your own work.  The contributor will still be mentioned in the changelog, and Bazaar will correctly attribute the changes they made to them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:3
# daf0472db30e49c2a5c085d4950dbf89
msgid "Working on a Package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:5
# 3fea9cc872c6454bbd01bfdb7f07f9c4
msgid "Once you have the source package branch in a shared repository, you'll want to create additional branches for the fixes or other work you plan to do.  You'll want to base your branch off the package source branch for the distro release that you plan to upload to.  Usually this is the current development release, but it may be older releases if you're backporting to an SRU for example."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:13
# ce9813868b2d4e5781aca09dacc514bb
msgid "Branching for a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:15
# 04257017acb04a4d9d2e3cb5950465e6
msgid "The first thing to do is to make sure your source package branch is up-to-date.  It will be if you just checked it out, otherwise do this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:21
# 8667221f72f24f70b68d72c186f01a71
msgid "Any updates to the package that have uploaded since your checkout will now be pulled in.  You do not want to make changes to this branch.  Instead, create a branch that will contain just the changes you're going to make.  Let's say you want to fix bug 12345 for the Tomboy project.  When you're in the shared repository you previously created for Tomboy, you can create your bug fix branch like this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:31
# 795bc0446f434ea0ae05113d2c56bcb7
msgid "Now you can do all my work in the ``bug-12345`` directory.  You make changes there as necessary, committing as you go along.  This is just like doing any kind of software development with Bazaar.  You can make intermediate commits as often as you like, and when your changes are finished, you will use the standard ``dch`` command (from the ``devscripts`` package)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:39
# 8c664edee1624421968bfe5825b59927
msgid "This will drop you in an editor to add an entry to the `debian/changelog` file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:44
# 685c0a911639457693b98866f434d072
msgid "When you added your ``debian/changelog`` entry, you should have included a bug fix tag that indicated which Launchpad bug issue you're fixing.  The format of this textual tag is pretty strict: ``LP: #12345``.  The space between the ``:`` and the ``#`` is required and of course you should use the actual bug number that you're fixing.  Your ``debian/changelog`` entry might look something like::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:57
# a35bbec19e5747ccb977a61dd06b0dbd
msgid "Commit with the normal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:61
# a47afccccbe5483aa6872f42581747c6
msgid "A hook in bzr-builddeb will use the debian/changelog text as the commit message and set the tag to mark bug #12345 as fixed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:64
# 4459c0ec75fb4f8489e687ee4c1fc50c
msgid "This only works with bzr-builddeb 2.7.5 and bzr 2.4, for older versions use ``debcommit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:71
# d4e358b207744bf0b982233c4de42240
msgid "Along the way, you'll want to build your branch so that you can test it to make sure it does actually fix the bug."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:74
# 8ae9391d5c8a4c219bdabecd349b6759
msgid "In order to build the package you can use the ``bzr builddeb`` command from the ``bzr-builddeb`` package.  You can build a source package with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:79
# f30abcfa721b47c1bbac4443734971a3
msgid "(``bd`` is an alias for ``builddeb``.)  You can leave the package unsigned by appending ``-- -uc -us`` to the command."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:82
# 9458e96b29004d95b7db95c5c55e9c53
msgid "It is also possible to use your normal tools, as long as they are able to strip the .bzr directories from the package, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:87
# f0dc0920fb774c2086e6aac11923cdc0
msgid "If you ever see an error related to trying to build a native package without a tarball, check to see if there is a ``.bzr-builddeb/default.conf`` file erroneously specifying the package as native.  If the changelog version has a dash in it, then it's not a native package, so remove the configuration file. Note that while ``bzr builddeb`` has a ``--native`` switch, it does not have a ``--no-native`` switch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:94
# 3800eebea13c4371b2d28812d5ce7854
msgid "Once you've got the source package, you can build it as normal with ``pbuilder-dist`` (or ``pbuilder`` or `sbuild`_)."
msgstr ""

