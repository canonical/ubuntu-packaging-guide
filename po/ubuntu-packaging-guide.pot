# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2012, Ubuntu Developers
# This file is distributed under the same license as the ubuntu-packaging-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ubuntu-packaging-guide 0.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-11-06 16:04\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:3
# 4f9b8ad5d25b41eebdabd8ba41c3b0ba
msgid "autopkgtest: Automatic testing for packages"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:5
# 897982082e74455e8cde504ddd74ea33
msgid "The `DEP 8 specification`_ defines how automatic testing can very easily be integrated into packages. To integrate a test into a package, all you need to do is:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:9
# c2935272e81e4527825ec5601b7b8e84
msgid "add the following to the Source section in ``debian/control``::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:13
# e6f3cde3515347848c8af66fb2f595d8
msgid "add a file called ``debian/tests/control`` which specifies the requirements for the testbed,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:15
# a4f92dc83e214b11b71ee43e7e572903
msgid "add the tests in ``debian/tests/``."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:19
# ffa5965734544d68bc1d82fb136469dd
msgid "Testbed requirements"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:21
# 05984ee14e9240d3b4e86da4a9ba5159
msgid "In ``debian/tests/control`` you specify what to expect from the testbed. So for example you list all the required packages for the tests, if the testbed gets broken during the build or if ``root`` permissions are required. The `DEP 8 specification`_ lists all available options."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:26
# 38f0a7c812fa47e09ed6bbde5f36c5f8
msgid "Below we are having a look at the ``glib2.0`` source package. In a very simple case the file would look like this::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:32
# 12339980c9b6494a9639bd5fcc9007cb
msgid "For the test in ``debian/tests/build`` this would ensure that the packages ``libglib2.0-dev`` and ``build-essential`` are installed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:35
# 8f8f220cced24eea932b232cb0e113a7
msgid "You can use ``@`` in the ``Depends`` line to indicate that you want all the packages installed which are built by the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:41
# 06095282eb2a4ebe885979131a7c4357
msgid "The actual tests"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:43
# 01d078d4087a4ebe9d214a442c94b8fe
msgid "The accompanying test for the example above might be:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:75
# d5c52d8abd55478eab194840b9a68806
msgid "Here a very simple piece of C code is written to a temporary directory. Then this is compiled with system libraries (using flags and library paths as provided by `pkg-config`). Then the compiled binary, which just exercises some parts of core glib functionality, is run."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:80
# 483d2aa5540e4ce4b92202740dd9c741
msgid "While this test is very small and basic, it tests quite a number of core components on a system. This may help to uncover critical issues early on."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:84
# eefcf379c9b8403d96358f8dc8dad934
msgid "Executing the test"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:86
# 98e572fa48bd4cc69812fda9a44b9127
msgid "The test script can be easily executed on its own, but if you want to make sure that the testbed is properly set up, you might want to use ``adt-run`` from the ``autopkgtest`` package to execute the test. Simply run this command in the source tree::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:95
# 2d1f7f3c89f54868a571fcf939be78b9
msgid "Further examples"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:97
# fbd89b630d344234944ff7feb4008688
msgid "This list is not comprehensive, but might help you get a better idea of how automated tests are implemented and used in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:100
# 96b88b99a6454bdbb36039bd22104204
msgid "The `libxml2 tests`_ are very similar. They also run a test-build of a simple piece of C code and execute it."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:102
# d344606d0be04731bc7b9dd92d1ecadb
msgid "The `gtk+3.0 tests`_ also do a compile/link/run check in the \"build\" test. There is an additional \"python3-gi\" test which verifies that the GTK library can also be used through introspection."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:105
# 74f1f70d13304d478e290e9f57121612
msgid "In the `ubiquity tests`_ the upstream test-suite is executed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:106
# 0d45c294bedb4464b99520e2ec78fc53
msgid "The `gvfs tests`_ have comprehensive testing of their functionality and are very interesting because they emulate usage of CDs, Samba, DAV and other bits."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:111
# a5605a47c4dc47609392fa92f3420a9f
msgid "Ubuntu infrastructure"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:113
# a19d771f865042739de16c66e4d83c7b
msgid "Packages which have ``autopkgtest`` enabled will have their tests run whenever they get uploaded or any of their reverse-dependencies change. The output of `automatically run autopkgtest tests`_ can be viewed on the web and is regularly updated."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:118
# cdb1b6b9a1674e17b069be1c6ef97a63
msgid "While Debian does not have an automatic testing infrastructure set up yet, they should still be submitted to Debian, as DEP-8 is a Debian specification and Debian developers or users can still manually run the tests."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:122
# 72c1581e41c84d34940c463bf9501e7e
msgid "Packages in Debian with a testsuite header will also be automatically added when they are synced to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:126
# 296fe9fba118420c9eba24ebbd8d6376
msgid "Getting the test into Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:128
# 1e9e8055c8ba45fb9057bb7bdb22e97b
msgid "The process of submitting an autopkgtest for a package is largely similar to :doc:`fixing a bug in Ubuntu<./fixing-a-bug>`. Essentially you simply:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:131
# 17bdefbe1fd04f948437cf4bba875e4e
msgid "run ``bzr branch ubuntu:<packagename>``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:132
# 01d0328cde0c407c91154f1b54aacfd3
msgid "edit ``debian/control`` to enable the tests,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:133
# 3c0c7ace57e34f1db84522680e9bd863
msgid "add the ``debian/tests`` directory,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:134
# 324644393ebf4be2ba1479da45746768
msgid "write the ``debian/tests/control`` based on the `DEP 8 Specification`_,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:135
# 1ea4676009fc4410b588cfb7d3ad5ad3
msgid "add your test case(s) to ``debian/tests``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:136
# 1790389fc9844497ab9d867e00536439
msgid "commit your changes, push them to Launchpad, propose a merge and get it reviewed just like any other improvement in a source package."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:3
# f163df04bbd941e3953a6e4342ace221
msgid "Backporting software updates"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:5
# f077c0cb05784b0fa025369c7ee7e213
msgid "Sometimes you might want to make new functionality available in a stable release which is not connected to a critical bug fix. For these scenarios you have two options: either you `upload to a PPA <https://help.launchpad.net/Packaging/PPA>`_ or prepare a backport."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:12
# 2e3dea658f9744aca135348fb90edbe1
msgid "Personal Package Archive (PPA)"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:14
# 845a4c75d0564c978bb0526c104cccdf
msgid "Using a PPA has a number of benefits. It is fairly straight-forward, you don't need approval of anyone, but the downside of it is that your users will have to manually enable it. It is a non-standard software source."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:18
# f80bbf5557594e3f896b721be43ff3af
msgid "The `PPA documentation on Launchpad`_ is fairly comprehensive and should get you up and running in no time."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:25
# e3776ca9fa7e4333a7abe8edf5987f0d
msgid "Official Ubuntu Backports"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:27
# 7450fe61273641c8a1e2c7f418b53313
msgid "The Backports Project is a means to provide new features to users. Because of the inherent stability risks in backporting packages, users do not get backported packages without some explicit action on their part. This generally makes backports an inappropriate avenue for fixing bugs. If a package in an Ubuntu release has a bug, it should be fixed either through the :doc:`Security Update or the Stable Release Update process<./security-and-stable-release-updates>`, as appropriate."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:35
# d6fe8dc5569f4704a2878918bd252202
msgid "Once you determined you want a package to be backported to a stable release, you will need to test-build and test it on the given stable release. ``pbuilder-dist`` (in the ``ubuntu-dev-tools`` package) is a very handy tool to do this easily."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:40
# 290e4ba13692421eb4e664654e8156f1
msgid "To report the backport request and get it processed by the Backporters team, you can use the ``requestbackport`` tool (also in the ``ubuntu-dev-tools`` package). It will determine the intermediate releases that package needs to be backported to, list all reverse-dependencies, and file the backporting request.  Also will it include a testing checklist in the bug."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:3
# 07e1feeb784a4646a82c3f43604ee3a6
msgid "Using Chroots"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:5
# 531d72b014f94d9e9287b9d3f6234e2b
msgid "If you are running one version of Ubuntu but working on packages for another versions you can create the environment of the other version with a ``chroot``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:9
# 9d5887f1dba34dec952aeeb727e093d8
msgid "A ``chroot`` allows you to have a full filesystem from another distribution which you can work in quite normally.  It avoids the overhead of running a full virtual machine."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:14
# 1025a0aaf8cd4e459e5bd2d7bab9e920
msgid "Creating a Chroot"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:16
# e976703e31554bf19a0a7a22160bc468
msgid "Use the command ``debootstrap`` to create a new chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:20
# a5fe70c024c14b4d9c80c13d14578247
msgid "This will create a directory ``oneiric`` and install a minimal oneiric system into it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:23
# fee0997ce82d43449001a85c40f3a73e
msgid "If your version of ``debootstrap`` does not know about oneiric you can try upgrading to the version in ``backports``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:26
# 7bf6b985c99e4ee39a4bc159db2eff78
msgid "You can then work inside the chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:30
# 9a9a45f727c645d39c496044565386ef
msgid "Where you can install or remove any package you wish without affecting your main system."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:33
# 0ad30f3d43344f939860130db7148e06
msgid "You might want to copy your GPG/ssh keys and Bazaar configuration into the chroot so you can access and sign packages directly::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:39
# b034b17e245a41f8b7f7bc06962618ac
msgid "To stop apt and other programs complaining about missing locales you can install your relevant language pack::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:44
# 6f406553250546e09882234a216dd7f5
msgid "If you want to run X programs you will need to bind the /tmp directory into the chroot, from outside the chroot run::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:50
# 44aee08bfff24f5992513c0e482e2cb4
msgid "Some programs may need you to bind /dev or /proc."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:52
# 74b2a37f02a54c41b78d2b764df565b2
msgid "For more information on chroots see our `Debootstrap Chroot wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:55
# 7e0dae042da64eae8bbf559f9b449c63
msgid "Alternatives"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:57
# 897ea6eafa254618812efcb302b3be43
msgid "SBuild is a system similar to PBuilder for creating an environment to run test package builds in.  It closer matches that used by Launchpad for building packages but takes some more setup compared to PBuilder.  See `the Security Team Build Environment wiki page`_ for a full explanation."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:59
# 7e49695be09340f1b5f3dba31f85377a
msgid "Full virtual machines can be useful for packaging and testing programs.  TestDrive is a program to automate syncing and running daily ISO images, see `the TestDrive wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:63
# 2419fb3dd1b3437fb224979d06995236
msgid "You can also set up pbuilder to pause when it comes across a build failure.  Copy C10shell from /usr/share/doc/pbuilder/examples into a directory and use the ``--hookdir=`` argument to point to it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:67
# 330f2c286a4e4d829d881ac675175db9
msgid "Amazon's `EC2 cloud computers`_ allow you to hire a computer paying a few US cents per hour, you can set up Ubuntu machines of any supported version and package on those.  This is useful when you want to compile many packages at the same time or to overcome bandwidth restraints."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:3
# 68fb746aa61149c4921a618a63118491
msgid "Communication in Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:5
# 4c35b3ae7c3d4ec5b8ded2c3312e889d
msgid "In a project where thousands of lines of code are changed, lots of decisions are made and hundreds of people interact every day, it is important to communicate effectively."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:10
# a69f34c82f064139ae1ea15435ec99b3
msgid "Mailing lists"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:12
# db64b0a753b94b4eac89cab91de88ab1
msgid "Mailing lists are a very important tool if you want to communicate ideas to a broader team and make sure that you reach everybody, even across timezones."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:16
# 693a806bddad4b1295fa6aa2295d0fb9
msgid "In terms of development, these are the most important ones:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:18
# 68b35ff4a1f941c6b7cec6f183187f47
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel-announce (announce-only, the most important development announcements go here)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:20
# b5555de886264290b0547b8a8f34125c
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel (general Ubuntu development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:22
# e6dd5766df014f0abaac1a43992ec18f
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-motu (MOTU Team discussion, get help with packaging)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:27
# 1068e830d2fc44eebd484310ea70a9bf
msgid "IRC Channels"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:29
# e5305a4dca6e42a3bd9b12a4528f966a
msgid "For real-time discussions, please connect to irc.freenode.net and join one or any of these channels:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:32
# d6b36e985c8c437fb53f0e10e1890fc4
msgid "#ubuntu-devel (for general development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:33
# 36af3d7bcb7b4fb0bca586fe30445895
msgid "#ubuntu-motu (for MOTU team discussion and generally getting help)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:2
# 8fc95f6e07b1487ca773ba60c2463068
msgid "Basic Overview of the ``debian/`` Directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:4
# d8b6295c0e1c4957acbcaa41ff53897d
msgid "This article will briefly explain the different files important to the packaging of Ubuntu packages which are contained in the ``debian/`` directory. The most important of them are ``changelog``, ``control``, ``copyright``, and ``rules``. These are required for all packages. A number of additional files in the ``debian/`` may be used in order to customize and configure the behavior of the package. Some of these files are discussed in this article, but this is not meant to be a complete list."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:13
# 952f7d76f31a4b219e4ecb4739ae1dc3
msgid "The changelog"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:15
# 5646c88f1ce0492f9a2f1da39f739e34
msgid "This file is, as its name implies, a listing of the changes made in each version. It has a specific format that gives the package name, version, distribution, changes, and who made the changes at a given time. If you have a GPG key (see: :doc:`Getting set up<./getting-set-up/>`), make sure to use the same name and email address in ``changelog`` as you have in your key. The following is a template ``changelog``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:31
# 780468f4608449888bd0e7cb71fae043
msgid "The format (especially of the date) is important. The date should be in :rfc:`5322` format, which can be obtained by using the command ``date -R``. For convenience, the command ``dch`` may be used to edit changelog. It will update the date automatically."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:36
# 233a4572e2c5451b87c82ff4cb125ac0
msgid "Minor bullet points are indicated by a dash \"-\", while major points use an asterisk \"*\"."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:39
# 1d24be09855e46fe8118639e5f01e399
msgid "If you are packaging from scratch, ``dch --create`` (``dch`` is in the ``devscripts`` package) will create a standard ``debian/changelog`` for you."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:43
# cfdd957e30114c26ba9e6e6f754ec313
msgid "Here is a sample ``changelog`` file for hello::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:52
# 167f5c002e5e4badbc2abcb553bc0d4c
msgid "Notice that the version has a ``-0ubuntu1`` appended to it, this is the distro revision, used so that the packaging can be updated (to fix bugs for example) with new uploads within the same source release version."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:56
# a4ca6147e29448f39cc0ec0c72444840
msgid "Ubuntu and Debian have slightly different package versioning schemes to avoid conflicting packages with the same source version. If a Debian package has been changed in Ubuntu, it has ``ubuntuX`` (where ``X`` is the Ubuntu revision number) appended to the end of the Debian version. So if the Debian hello ``2.6-1`` package was changed by Ubuntu, the version string would be ``2.6-1ubuntu1``. If a package for the application does not exist in Debian, then the Debian revision is ``0`` (e.g. ``2.6-0ubuntu1``)."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:64
# 317676b2610340d184b58cb3c10ef213
msgid "For further information, see the `changelog section (Section 4.4) <http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:70
# 6c5b04522da54d5a8cb9f09668a97cdd
msgid "The control file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:72
# dea3d501f24241eea98ef75318365919
msgid "The ``control`` file contains the information that the package manager (such as ``apt-get``, ``synaptic``, and ``adept``) uses, build-time dependencies, maintainer information, and much more."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:76
# a4151a43a4d3420a950fd3334011f0d3
msgid "For the Ubuntu ``hello`` package, the ``control`` file looks something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:101
# e0c70eac68c04a80879ba23ad73a8b45
msgid "The first paragraph describes the source package including the list of packages required to build the package from source in the ``Build-Depends`` field. It also contains some meta-information such as the maintainer's name, the version of Debian Policy that the package complies with, the location of the packaging version control repository, and the upstream home page."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:108
# b6186979d22f49a2bc3623c40f2790cd
msgid "Note that in Ubuntu, we set the ``Maintainer`` field to a general address because anyone can change any package (this differs from Debian where changing packages is usually restricted to an individual or a team). Packages in Ubuntu should generally have the ``Maintainer`` field set to ``Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>``. If the Maintainer field is modified, the old value should be saved in the ``XSBC-Original-Maintainer`` field. This can be done automatically with the  ``update-maintainer`` script available in the ``ubuntu-dev-tools`` package. For further information, see the `Debian Maintainer Field spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ on the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:120
# 42c4eaf4cda8442cad2f7dc6b349d9c2
msgid "Each additional paragraph describes a binary package to be built."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:122
# ecdcfbf35ed543f5b665e63161b6c3b3
msgid "For further information, see the `control file section (Chapter 5) <http://www.debian.org/doc/debian-policy/ch-controlfields.html>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:128
# 85b3984c7f7a474aa6115100ee70d570
msgid "The copyright file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:130
# f2777ea0406c45ec91fe2a555edf8d21
msgid "This file gives the copyright information for both the upstream source and the packaging. Ubuntu and `Debian Policy (Section 12.5) <http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile>`_ require that each package installs a verbatim copy of its copyright and license information to ``/usr/share/doc/$(package_name)/copyright``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:136
# 35aa740c581340fe8b83dfab8147021e
msgid "Generally, copyright information is found in the ``COPYING`` file in the program's source directory. This file should include such information as the names of the author and the packager, the URL from which the source came, a Copyright line with the year and copyright holder, and the text of the copyright itself. An example template would be::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:178
# 98ff1fdecf7b4088aef01a19e26b2990
msgid "This example follows the `Machine-readable debian/copyright <http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/>`_ format. You are encouraged to use this format as well."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:184
# b86db3b9f877434eb1f344e1f7f13b88
msgid "The rules file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:186
# dfe359d36f3d4430874c3f6bbce3845d
msgid "The last file we need to look at is ``rules``. This does all the work for creating our package. It is a Makefile with targets to compile and install the application, then create the ``.deb`` file from the installed files. It also has a target to clean up all the build files so you end up with just a source package again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:194
# 059434a221b54cf0a25b1b2dc2acd4bb
msgid "Here is a simplified version of the rules file created by ``dh_make`` (which can be found in the ``dh-make`` package):"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:208
# 914b6438ada546d68c163e183d438669
msgid "Let us go through this file in some detail. What this does is pass every build target that ``debian/rules`` is called with as an argument to ``/usr/bin/dh``, which itself will call all the necessary ``dh_*`` commands."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:212
# 4240b38e97884ab5bd23110dc0cfa80b
msgid "``dh`` runs a sequence of debhelper commands. The supported sequences correspond to the targets of a ``debian/rules`` file: \"build\", \"clean\", \"install\", \"binary-arch\", \"binary-indep\", and \"binary\". In order to see what commands are run in each target, run::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:221
# ccc4d47ac0ba49879074e1eccd568a35
msgid "Commands in the binary-indep sequence are passed the \"-i\" option to ensure they only work on binary independent packages, and commands in the binary-arch sequences are passed the \"-a\" option to ensure they only work on architecture dependent packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:226
# 008f589dc77c4a87b139cd496eb492a0
msgid "Each debhelper command will record when it's successfully run in ``debian/package.debhelper.log``. (Which dh_clean deletes.) So dh can tell which commands have already been run, for which packages, and skip running those commands again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:231
# f09600e477194f309512d5b9180bf84a
msgid "Each time ``dh`` is run, it examines the log, and finds the last logged command that is in the specified sequence. It then continues with the next command in the sequence. The ``--until``, ``--before``, ``--after``, and ``--remaining`` options can override this behavior."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:236
# 6e092100c2934d13a5fbf01b2a625427
msgid "If ``debian/rules`` contains a target with a name like ``override_dh_command``, then when it gets to that command in the sequence, ``dh`` will run that target from the rules file, rather than running the actual command. The override target can then run the command with additional options, or run entirely different commands instead. (Note that to use this feature, you should Build-Depend on debhelper 7.0.50 or above.)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:245
# 93a1d901a7e4468b8b38b819e21461ec
msgid "Have a look at ``/usr/share/doc/debhelper/examples/`` and ``man dh`` for more examples. Also see `the rules section (Section 4.9) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:251
# 7792bcdd93c34cd4a6ecf9711716577a
msgid "Additional Files"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:254
# 2c74f5faf3544b0295853ae347cdcc38
msgid "The install file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:256
# 5aee0854a950459e8c077b21d95a43df
msgid "The ``install`` file is used by ``dh_install`` to install files into the binary package. It has two standard use cases:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:259
# 63840a645ef04fbe9eb01ee50467a647
msgid "To install files into your package that are not handled by the upstream build system."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:260
# 1564169ece6f4a798af33fa61237a873
msgid "Splitting a single large source package into multiple binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:262
# 1e2c4f4735ac4605a51ce8d1e574434b
msgid "In the first case, the ``install`` file should have one line per file installed, specifying both the file and the installation directory. For example, the following ``install`` file would install the script ``foo`` in the source package's root directory to ``usr/bin`` and a desktop file in the ``debian`` directory to ``usr/share/applications``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:273
# c922812efce34785be04c4178cb5ad01
msgid "When a source package is producing multiple binary packages ``dh`` will install the files into ``debian/tmp`` rather than directly into ``debian/<package>``. Files installed into ``debian/tmp`` can then be moved into separate binary packages using multiple ``$package_name.install`` files. This is often done to split large amounts of architecture independent data out of architecture dependent packages and into ``Architecture: all`` packages. In this case, only the name of the files (or directories) to be installed are needed without the installation directory. For example, ``foo.install`` containing only the architecture dependent files might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:286
# 8ea2c8d1f72e46348189ecb5f22c8180
msgid "While ``foo-common.install`` containing only the architecture independent file might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:294
# efc53837de99468dac8a3a7cfb1d896f
msgid "This would create two binary packages, ``foo`` and ``foo-common``. Both would require their own paragraph in ``debian/control``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:297
# dd4d771d62d340c4b9156363b5741875
msgid "See ``man dh_install`` and the `install file section (Section 5.11) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#install>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:302
# 9de23abe1c444fb9b06c8f5c6b984a40
msgid "The watch file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:304
# 94aaa00f39e44126aee0ce2158884ef0
msgid "The ``debian/watch`` file allows us to check automatically for new upstream versions using the tool ``uscan`` found in the ``devscripts`` package. The first line of the watch file must be the format version (3, at the time of this writing), while the following lines contain any URLs to parse. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:313
# dc123206abda4ae3bc3f6cd5b08ee219
msgid "Running ``uscan`` in the root source directory will now compare the upstream version number in ``debian/changelog`` with the latest available upstream version. If a new upstream version is found, it will be automatically downloaded. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:326
# fcdb4fa5978b4539ba8e41fc7063c6a2
msgid "If your tarballs live on Launchpad, the ``debian/watch`` file is a little more complicated (see `Question 21146`_ and `Bug 231797`_ for why this is).  In that case, use something like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:333
# 4a1a6aab46f346eca7e6aedaf4e1ad30
msgid "For further information, see ``man uscan`` and the `watch file section (Section 4.11) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianwatch>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:337
# 65bf63e32afd421fb0d7ac23830f98f6
msgid "For a list of packages where the ``watch`` file reports they are not in sync with upstream see `Ubuntu External Health Status <http://qa.ubuntuwire.org/uehs/no_updated.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:342
# e4cb6d1160564034879cf8095b7dc1bb
msgid "The source/format file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:344
# b69bccb2a0ec45deb741092630168393
msgid "This file indicates the format of the source package. It should contain a single line indicating the desired format:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:347
# 48d57075dc4f4fda955a63382970a2b2
msgid "``3.0 (native)`` for Debian native packages (no upstream version)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:349
# f2dec2bcd2a74f859bcd7ea44e52deed
msgid "``3.0 (quilt)`` for packages with a separate upstream tarball"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:351
# bb4b87acf21d437899992514bb646ef6
msgid "``1.0`` for packages wishing to explicitly declare the default format"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:353
# 237b7332c6e249fba112013862ef6d25
msgid "Currently, the package source format will default to 1.0 if this file does not exist. You can make this explicit in the source/format file. If you choose not to use this file to define the source format, Lintian will warn about the missing file. This warning is informational only and may be safely ignored."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:358
# 436ace470854425180e29b9799098cbe
msgid "You are encouraged to use the newer 3.0 source format. It provides a number of new features:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:361
# 0080684ad2e94c7397016cd7432c839e
msgid "Support for additional compression formats: bzip2, lzma and xz"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:363
# 835f5e3c60a54435bc189fc8ccf57781
msgid "Support for multiple upstream tarballs"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:365
# 45407b134a4e46f4b8424ada2897c47d
msgid "Not necessary to repack the upstream tarball to strip the debian directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:367
# 5aac2dab6fdb48fe842039d16a8fad15
msgid "Debian-specific changes are no longer stored in a single .diff.gz but in multiple patches compatible with quilt under ``debian/patches/``"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:369
# e40869735e414f7aa9742cb7c435495e
msgid "http://wiki.debian.org/Projects/DebSrc3.0 summarizes additional information concerning the switch to the 3.0 source package formats."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:372
# b35b6605aaa5429295733dd069472697
msgid "See ``man dpkg-source`` and the `source/format section (Section 5.21) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#sourcef>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:377
# f6a32b7995d54495a108c218164793f3
msgid "Additional Resources"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:379
# 02054294b3ee4dbd9c23dbac170864f5
msgid "In addition to the links to the Debian Policy Manual in each section above, the Debian New Maintainers' Guide has more detailed descriptions of each file. `Chapter 4, \"Required files under the debian directory\" <http://www.debian.org/doc/maint-guide/dreq.en.html>`_ further discusses the control, changelog, copyright and rules files. `Chapter 5, \"Other files under the debian directory\" <http://www.debian.org/doc/maint-guide/dother.en.html>`_ discusses additional files that may be used."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:3
# 60301de75eef44a58d05d6b16b10d273
msgid "Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:6
#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:9
# 6c84b89de9874216ae7c28ca0cbef81e
# 405d4f8cff344dcdafaf5a5049e3f2e6
msgid "Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:8
# 1503df6541b847c7b3cd29986361fdf1
msgid "If you followed the instructions to :doc:`get set up with Ubuntu Development<./getting-set-up>`, you should be all set and ready to go."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:13
# e60460cd867d4fac9db82e2399acfc9f
msgid "As you can see in the image above, there is no surprises in the process of fixing bugs in Ubuntu: you found a problem, you get the code, work on the fix, test it, push your changes to Launchpad and ask for it to be reviewed and merged. In this guide we will go through all the necessary steps one by one."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:20
# 4ae3643c4b5b46daaba62ff9598539f0
msgid "Finding the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:22
# d5e7287fdc1844a48775c16b7e56d475
msgid "There are a lot of different ways to find things to work on. It might be a bug report you are encountering yourself (which gives you a good opportunity to test the fix), or a problem you noted elsewhere, maybe in a bug report."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:26
# d319b1cd05074d2083cbc896164e2bf4
msgid "`Harvest <http://harvest.ubuntu.com/>`_ is where we keep track of various TODO lists regarding Ubuntu development. It lists bugs that were fixed upstream or in Debian already, lists small bugs (we call them 'bitesize'), and so on. Check it out and find your first bug to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:35
# 8ad96f72e55a49239c92d49e280c7e9b
msgid "Figuring out what to fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:37
# 461684c8b1d1424299365b5e41f1dc7c
msgid "If you don't know the source package containing the code that has the problem, but you do know the path to the affected program on your system, you can discover the source package that you'll need to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:41
# 429610a73d0947b38bb6cb9f00db144f
msgid "Let's say you've found a bug in Tomboy, a note taking desktop application. The Tomboy application can be started by running ``/usr/bin/tomboy`` on the command line.  To find the binary package containing this application, use this command::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:48
# 6a9bc48aa01349caa3e3d0366a05183e
msgid "This would print out::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:52
# a58b4c9f16a647ca8432806e507ef8b1
msgid "Note that the part preceding the colon is the binary package name.  It's often the case that the source package and binary package will have different names. This is most common when a single source package is used to build multiple different binary packages.  To find the source package for a particular binary package, type::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:63
# 8c8266db4f02414d8a75b976e6df344e
msgid "``apt-cache`` is part of the standard installation of Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:66
# 3f1899f10c83492498f486f816e8dffc
msgid "Getting the code"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:68
# c2260fe5ffc04309a11d108cc511c98a
msgid "Once you know the source package to work on, you will want to get a copy of the code on your system, so that you can debug it.  In Ubuntu Distributed Development this is done by :ref:`*branching* the source package <branching>` branch corresponding to the source package.  Launchpad maintains source package branches for all the packages in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:74
# c23e3e23fbba48f5a91cbf184ff7274e
msgid "Once you've got a local branch of the source package, you can investigate the bug, create a fix, and upload your proposed fix to Launchpad, in the form of a Bazaar branch.  When you are happy with your fix, you can :ref:`submit a *merge proposal* <merge-proposal>`, which asks other Ubuntu developers to review and approve your change.  If they agree with your changes, an Ubuntu developer will upload the new version of the package to Ubuntu so that everyone gets the benefit of your excellent fix - and you get a little bit of credit.  You're now on your way to becoming an Ubuntu developer!"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:83
# 9fc9656452724eaa84c37887353e96e0
msgid "We'll describe specifics on how to branch the code, push your fix, and request a review in the following sections."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:88
# 45f1baf67ae04939800f03ed3b0666e5
msgid "Work on a fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:90
# ddb2b2a586684d4fa34064e8505a9898
msgid "There are entire books written about finding bugs, fixing them, testing them, etc. If you are completely new to programming, try to fix easy bugs such as obvious typos first. Try to keep changes as minimal as possible and document your change and assumptions clearly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:95
# f0d082418950478cbf83680e8ba228f9
msgid "Before working on a fix yourself, make sure to investigate if nobody else has fixed it already or is currently working on a fix. Good sources to check are:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:98
# a49faca7e116458e9e2affa14fdeb6c1
msgid "Upstream (and Debian) bug tracker (open and closed bugs),"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:99
# 64595e82c0ad414985210375280c0165
msgid "Upstream revision history (or newer release) might have fixed the problem,"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:100
# 3b440f7b450e44cb8cf186e9ee81f7fc
msgid "bugs or package uploads of Debian or other distributions."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:105
# 571150efe26c4df98d42884de7211bac
msgid "You now want to create a patch which includes the fix.  The command ``edit-patch`` is a simple way to add a patch to a package. Run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:110
# 3e6e0561aea448d0922a1812621b31d4
msgid "This will copy the packaging to a temporary directory.  You can now edit files with a text editor or apply patches from upstream, for example::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:115
# 496cc4e76d614f8aa5be6e0a7b8e1361
msgid "After editing the file type ``exit`` or press ``control-d`` to quit the temporary shell.  The new patch will have been added into ``debian/patches``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:120
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:204
# 4ce38f2b3a4c475ca36e2e7b60facc8f
# 7036e1d02fe54b358f572b445fbaf28c
msgid "Testing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:122
# 98c8fb69969b4e6d9726d495cf267ac1
msgid "To build a test package with your changes, run these commands::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:127
# 8f129582982547e182a2eb5de461d7d0
msgid "This will create a source package from the branch contents (``-us -uc`` will just omit the step to sign the source package) and ``pbuilder-dist`` will build the package from source for whatever ``release`` you choose."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:131
# 14b9398b67fd415c93d1b6d6dc6bdde4
msgid "Once the build succeeds, install the package from ``~/pbuilder/<release>_result/`` (using ``sudo dpkg -i <package>_<version>.deb``).  Then test to see if the bug is fixed."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:138
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:155
# 21f85d06ceec4955828ac661986844c6
# 0e31538709094da790a70b33edcd7ef1
msgid "Documenting the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:140
# f6b7f45bb291409ab244c96157b086a0
msgid "It is very important to document your change sufficiently so developers who look at the code in the future won't have to guess what your reasoning was and what your assumptions were. Every Debian and Ubuntu package source includes ``debian/changelog``, where changes of each uploaded package are tracked."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:145
# 4a89b6abf6804c86b6e1c1797caf60f0
msgid "The easiest way to update this is to run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:149
# d3c063da38d84e3f91ed80e72aa4f48f
msgid "This will add a boilerplate changelog entry for you and launch an editor where you can fill in the blanks. An example of this could be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:158
# 91e21511da194612ba92ca7288e7221d
msgid "``dch`` should fill out the first and last line of such a changelog entry for you already. Line 1 consists of the source package name, the version number, which Ubuntu release it is uploaded to, the urgency (which almost always is 'low'). The last line always contains the name, email address and timestamp (in :rfc:`5322` format) of the change."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:164
# 4351348fcab94016b47e5bfa6e7fdfec
msgid "With that out of the way, let's focus on the actual changelog entry itself: it is very important to document:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:167
# 8ff5d935a12140e1b1d22d5a624bbfee
msgid "where the change was done"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:168
# 0a9dc16fc15748ff8a745382e069df5d
msgid "what was changed"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:169
# 426cd018d1f5499588cab9b7b9513212
msgid "where the discussion of the change happened"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:171
# 47b0e0f39441451b8fa27092f1e55af1
msgid "In our (very sparse) example the last point is covered by ``(LP: #123456)`` which refers to Launchpad bug 123456. Bug reports or mailing list threads or specifications are usually good information to provide as a rationale for a change. As a bonus, if you use the ``LP: #<number>`` notation for Launchpad bugs, the bug will be automatically closed when the package is uploaded to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:180
# 902c41c1084249f69fdf8f20bc896d56
msgid "Committing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:182
# e01cf7ddc32245eb81459648ab33b996
msgid "With the changelog entry written and saved, you can just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:186
# fb0c0232018d4781971f163fe8b47cb6
msgid "and the change will be committed (locally) with your changelog entry as a commit message."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:189
# 45cda6984e77494eb2835f13edff2e4a
msgid "To push it to Launchpad, as the remote branch name, you need to stick to the following nomenclature::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:194
# 1f7cdc3191b74ea9ad70dfc9a778c8fd
msgid "This could for example be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:198
# 0b4c94921a034429922662971e0c0600
msgid "So if you just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:203
# 4e17bcc4d1fc40b191518425d53f86e4
msgid "you should be all set. The push command should push it to Launchpad and the second command will open the Launchpad page of the remote branch in your browser. There find the \"(+) Propose for merging\" link, click it to get the change reviewed by somebody and included in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:208
# 542e233096314d86ae81137d9af160e5
msgid "Our article about :doc:`seeking sponsorship<./udd-sponsorship>` goes into more detail about getting feedback for your proposed changes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:211
# c07a03e703914fc48c5f26eda21cd6eb
msgid "If your branch fixes issues in stable releases or it is a security fix, you might want to have a look at our :doc:`Security and stable release updates<./security-and-stable-release-updates>` article."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:3
# 4ed97f372ca4480695a3662d86375d7c
msgid "Tutorial: Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:5
# b291772967124700a95d752405123f0b
msgid "While the mechanics for :doc:`fixing a bug<./fixing-a-bug>` are the same for every bug, every problem you look at is likely to be different from another. An example of a concrete problem might help to get an idea what to consider generally."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:10
# 9d930ac6594242a39552888d1ba5c41c
msgid "At the time of writing this article this was not fixed yet. When you are reading the article this might actually be fixed. Take this as an example and try to adapt it to the specific problem you are facing."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:15
# 44b504c6c7ae424d88a9f1b59537a050
msgid "Confirming the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:17
# a1e573e4ad4540698bff93dd8fce8d05
msgid "Let's say the package ``bumprace`` does not have a homepage in its package description. As a first step you would check if the problem is not solved already. This is easy to check, either take a look at Software Center or run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:23
# 630357b37ee14cab89f35b18e9108c8f
msgid "The output should be similar to this::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:49
# 622c4dcb771042b49aedabfef92fb9cb
msgid "A counter-example would be ``gedit``, which has a homepage set::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:55
# 1d5d5350733f4c799c3cf9a1ee79e6c6
msgid "Sometimes you will find that a particular problem you are looking into is already fixed. To avoid wasting efforts and duplicating work it makes sense to first do some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:61
# eb7b24af2bc64258bf09f3aaf6a4a214
msgid "Research bug situation"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:63
# b6ca4f6a04334abfabef85bb50851f89
msgid "First we should check if a bug for the problem exists in Ubuntu already. Maybe somebody is working on a fix already, or we can contribute to the solution somehow. For Ubuntu we have a quick look at https://bugs.launchpad.net/ubuntu/+source/bumprace and there is no open bug with our problem there."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:69
# 5e9319ce78734588840f70ef3fa043ca
msgid "For Ubuntu the URL ``https://bugs.launchpad.net/ubuntu/+source/<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:73
# 9211dd58302949c6bf6e539ec94c3f76
msgid "For Debian, which is the major source for Ubuntu's packages, we have a look at http://bugs.debian.org/src:bumprace and can't find a bug report for our problem either."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:77
# dbc49ad7be56432c9dab437852872e4f
msgid "For Debian the URL ``http://bugs.debian.org/src:<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:80
# 3897b600f9da43ba991cbecfd2439021
msgid "The problem we are working on is special as it only concerns the packaging-related bits of ``bumprace``. If it was a problem in the source code it would be helpful to also check the Upstream bug tracker. This is unfortunately often different for every package you have a look at, but if you search the web for it, you should in most cases find it pretty easily."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:88
# 44c8d68314fa41cdb497aa5b6a7237b0
msgid "Offering help"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:90
# a458ee3faf334459a1b3d1be2eaf4702
msgid "If you found an open bug and it is not assigned to somebody and you are in a position to fix it, you should comment on it with your solution. Be sure to include as much information as you can: Under which circumstances does the bug occur? How did you fix the problem? Did you test your solution?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:95
# 7d5d18c3cefb4b5f8ba58f40f77cee92
msgid "If no bug report has been filed, you can file a bug for it. What you might want to bear in mind is: Is the issue so small that just asking for somebody to commit it is good enough? Did you manage to only partially fix the issue and you want to at least share your part of it?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:100
# 9a9485ac931843548199886dbad9a29b
msgid "It is great if you can offer help and will surely be appreciated."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:104
# 39a8c644da9c476a9238ef35981f88a5
msgid "Fixing the issue"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:106
# d79426cc5b2843539bfcfb6a323e0662
msgid "For this specific example it is enough to search the web for ``bumprace`` and find the homepage of it. Be sure it is a live site and not just a software catalogue. http://www.linux-games.com/bumprace/ looks like it is the proper place."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:111
# 84f70d9e68d945f5aad8fac3168b8502
msgid "To address the issue in the source package, we first need the source and we can easily get it by running::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:117
# 321eb6cdcb384670af44ef1a5e7d4464
msgid "If you read :doc:`the Debian Directory Overview<./debian-dir-overview>` before, you might remember, that the homepage for a package is specified in the first part of ``debian/control``, the section which starts with ``Source:``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:121
# 2692c6f8d7b84d149add24b1fddc87ce
msgid "So what we do next is run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:125
# a8526d9c904d4ca89d90cece2a22b9b8
msgid "and edit ``debian/control`` to add ``Homepage: http://www.linux-games.com/bumprace/``. At the end of the first section should be a good place for it. Once you have done this, save the file."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:129
# f1c45182479646ffbe458e692fd93613
msgid "If you now run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:133
# a1cfb053e5634b34a65267049b639d86
msgid "you should see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:149
# 3ccd098d503e4e25b6d31a7d3c4552fb
msgid "The diff is pretty simple to understand. The ``+`` indicates a line which was added. In our cases it was added just before the second section, starting with ``Package``, which indicates a resulting binary package."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:157
# 6379c9a1db7344feacc915d0ae70a9cd
msgid "It is important to explain to your fellow developers what exactly you did. If you run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:163
# 71e4900b2cca440a88ac296ae4a45395
msgid "this will start an editor with a boilerplate changelog entry which you just have to fill out. In our case something like ``debian/control: Added project's homepage.`` should do. Then save the file. To double-check this worked out, run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:170
# 7e12507f26f64fa98635fc84a22d1ca7
msgid "and you will see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:189
# 88d4da86a8ba4227954fa0453d5a3635
msgid "A few additional considerations:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:191
# 166adf17e33d4f87bf66536e179a4eeb
msgid "If you have a reference to a Launchpad bug which is fixed by the issue, add (``LP: #<bug number>``) to the changelog entry line, ie: ``(LP: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:193
# 98daf649dfb94e28a7bb6bdf8b42edff
msgid "If you want to get your fix included in Debian, for a Debian bug the syntax is ``(Closes: #<bug number>)``, ie: ``(Closes: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:195
# 0da10720aaba459f9db9aa22c1e59abf
msgid "If it is a reference to an upstream or Debian bug or a mailing list discussion, mention it as well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:197
# 36fb2d66df9b46e7a7b63802553af770
msgid "Try to wrap your lines at 80 characters."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:198
# ca58a76005934c609af5cc435394c7d2
msgid "Try to be specific, not an essay, but enough for somebody (who did not deeply look into the issue) to understand."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:200
# fc89ede3bd85404da12634cb3d3290b5
msgid "Mention how you fixed the issue and where."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:206
# 7505e95b96d04ca08c837d2be12f6f5d
msgid "To test the fix, you need to :doc:`have your development environment set up<./getting-set-up>`, then to build the package, install it and verify the problem is solved. In our case this would be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:214
# 13c68f2d86d5474eafd2e8c2bcd60bbf
msgid "In step one we build the source package from the branch, then build it by using ``pbuilder``, then inspect the resulting package to check if the Homepage field was added properly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:218
# 69005ce4d5e243f6a56c1ca4f427ba4b
msgid "In a lot of cases you will have to actually install the package to make sure it works as expected. Our case is a lot easier. If the build succeeded, you will find the binary packages in ``~/pbuilder/<release>_result``. Install them via ``sudo dpkg -i <package>.deb`` or by double-clicking on them in your file manager."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:225
# 57c6068762784faf862600594224696f
msgid "As we verified, the problem is now solved, so the next step is sharing our solution with the world."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:229
# d6e86ad6bab9413ca39d53919cd4c1e5
msgid "Getting the fix included"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:231
# 617013a5e1b24c94bb0d336f4b4b7df8
msgid "It makes to get fix included as Upstream as possible. Doing that you can guarantee that everybody can take the Upstream source as-is and don't need to have local modifications to fix it."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:235
# 2ba26106b76c4408a62520f6343d5535
msgid "In our case we established that we have a problem with the packaging, both in Ubuntu and Debian. As Ubuntu is based on Debian, we will send the fix to Debian. Once it is included there, it will be picked up by Ubuntu eventually. The issue in our tutorial is clearly non-critical, so this approach makes sense. If it is important to fix the issue as soon as possible, you will need to send the solution to multiple bug trackers. Provided the issue affects all parties in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:243
# 8372ec6dddf54d98afb70f46e9f1c97a
msgid "To submit the patch to Debian, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:247
# 7189eb7d7cb943e2833113e8de1d8c60
msgid "This will take you through a series of steps to make sure the bug ends up in the correct place. Be sure to review the diff again to make sure it does not include random changes you made earlier."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:251
# d0d7515900ae4e18a41ac781752fd1dc
msgid "Communication is important, so when you add some more description to it to the inclusion request, be friendly, explain it well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:254
# 9cf5247871a4440ab663bc94a06afce5
msgid "If everything went well you should get a mail from Debian's bug tracking system with more information. This might sometimes take a few minutes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:257
# 0063ab58111c48a2b42c754e4a36053f
msgid "If the problem is just in Ubuntu, you might want to consider :doc:`Seeking Review and Sponsorship<./udd-sponsorship>` to get the fix included."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:263
# 1903ceeb8b86434e94442baf5be90d97
msgid "Additional considerations"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:265
# 33898e0da95a4200beaa40923f742da1
msgid "If you find a package and find that there are a couple of trivial things you can fix at the same time, do it. This will speed up review and inclusion."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:268
# c2163214a68a4130952d8235e11e6f6a
msgid "If there are multiple big things you want to fix, it might be advisable to send individual patches or merge proposals instead. If there are individual bugs filed for the issues already, this makes it even easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:3
# 356b4c73e498416a8802f779a68f29a0
msgid "Getting Set Up"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:5
# c31cbb4abd37485fab6d86caa76ccf1a
msgid "There are a number of things you need to do to get started developing for Ubuntu. This article is designed to get your computer set up so that you can start working with packages, and upload your packages to Ubuntu's hosting platform, Launchpad. Here's what we'll cover:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:10
# b6950d1c28874b28b38e8a254b1c9862
msgid "Installing packaging-related software. This includes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:12
# 3b35fd2820d84d2eb78bfee7bafd7607
msgid "Ubuntu-specific packaging utilities"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:13
# ecbb669b99d94a3aa4930d215fa9c4f5
msgid "Encryption software so your work can be verified as being done by you"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:14
# 115522c1658d4eac94ba9f13fb33960e
msgid "Additional encryption software so you can securely transfer files"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:16
# 24da21d0fb76484b8ba0164971d3f27a
msgid "Creating and configuring your account on Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:17
# da635e726ab743b2980b2b50ca063e96
msgid "Setting up your development environment to help you do local builds of packages, interact with other developers, and propose your changes on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:22
# 67d5dd3532e048fd81d8f15f0b780fc3
msgid "It is advisable to do packaging work using the current development version of Ubuntu. Doing so will allow you to test changes in the same environment where those changes will actually be applied and used."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:26
# 047965fd9e0b42248cbdf98acbe463c6
msgid "Don't worry though, the `Ubuntu development release wiki page <https://wiki.ubuntu.com/UsingDevelopmentReleases>`_ shows a variety of ways to safely use the development release."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:32
# e3b40ce171b4474988dc99aab7f3816a
msgid "Install basic packaging software"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:34
# 90993c3bfe684181982ce01d372ec7b7
msgid "There are a number of tools that will make your life as an Ubuntu developer much easier.  You will encounter these tools later in this guide.  To install most of the tools you will need run this command::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:41
# afc44759c6824ffc84af811fa8b5ef87
msgid "Note: Since Ubuntu 11.10 \"Oneiric Ocelot\" (or if you have Backports enabled on a currently supported release), the following command will install the above and other tools which are quite common in Ubuntu development::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:49
# d940ae92477a46c3bab649d8673990b1
msgid "This command will install the following software:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:51
# aff35e75f6f24baab6375de4b2688406
msgid "``gnupg`` -- `GNU Privacy Guard`_ contains tools you will need to create a cryptographic key with which you will sign files you want to upload to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:54
# f1217ac7976f45b48ed33da46e56abea
msgid "``pbuilder`` -- a tool to do reproducible builds of a package in a clean and isolated environment."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:56
# 675d546df4ac42658bde2674a209b399
msgid "``ubuntu-dev-tools`` (and ``devscripts``, a direct dependency) -- a collection of tools that make many packaging tasks easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:58
# 4cf1d5fc07234584bb2e754fd11fb0b7
msgid "``bzr-builddeb`` (and ``bzr``, a dependency) -- distributed version control with Bazaar, a new way of working with packages for Ubuntu that will make it easy for many developers to collaborate and work on the same code while keeping it trivial to merge each other's work."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:62
# cf76069685704b418b3c3bd3d1ef64ec
msgid "``apt-file`` provides an easy way to find the binary package that contains a given file."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:67
# b7bbcd45eae84e4c9de34961c1233910
msgid "Create your GPG key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:69
# eed4401083914634bb6577f9ca0f7622
msgid "GPG stands for `GNU Privacy Guard`_ and it implements the OpenPGP standard which allows you to sign and encrypt messages and files. This is useful for a number of purposes. In our case it is important that you can sign files with your key so they can be identified as something that you worked on. If you upload a source package to Launchpad, it will only accept the package if it can absolutely determine who uploaded the package."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:76
# aacf5b2db64942b78a9ee75654b16e8b
msgid "To generate a new GPG key, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:80
# e655f7f6458947dcb0068c00d3981b65
msgid "GPG will first ask you which kind of key you want to generate. Choosing the default (RSA and DSA) is fine. Next it will ask you about the keysize. The default (currently 2048) is fine, but 4096 is more secure. Afterwards, it will ask you if you want it to expire the key at some stage. It is safe to say \"0\", which means the key will never expire. The last questions will be about your name and email address. Just pick the ones you are going to use for Ubuntu development here, you can add additional email addresses later on. Adding a comment is not necessary. Then you will have to set a passphrase, choose a safe one (a passphrase is just a password which is allowed to include spaces)."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:90
# b501453e219b421e91b3848df613682c
msgid "Now GPG will create a key for you, which can take a little bit of time; it needs random bytes, so if you give the system some work to do it will be just fine.  Move the cursor around, type some paragraphs of random text, load some web page."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:95
# bd27322381bd486da6a9a338417d85b1
msgid "Once this is done, you will get a message similar to this one::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:102
# 156cfab011bc4fc8a3d5782a00ddc526
msgid "In this case ``43CDE61D`` is the *key ID*."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:104
# 8eeb4d3e79b14bb8ac135797d3a2f820
msgid "Next, you need to upload the public part of your key to a keyserver so the world can identify messages and files as yours. To do so, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:109
# f16eddb6b2074c59b1146d5fffd6c8f3
msgid "This will send your key to one keyserver, but a network of keyservers will automatically sync the key between themselves. Once this syncing is complete, your signed public key will be ready to verify your contributions around the world."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:116
# 90f3abb91d9d418ba5455525f04cb79b
msgid "Create your SSH key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:118
# 2e54f2ab3d6847cfa76525e0827cc126
msgid "SSH_ stands for *Secure Shell*, and it is a protocol that allows you to exchange data in a secure way over a network. It is common to use SSH to access and open a shell on another computer, and to use it to securely transfer files. For our purposes, we will mainly be using SSH to securely upload source packages to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:124
# c3674055956c4ffab87d23deea665b22
msgid "To generate an SSH key, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:128
# 91c141b523ad409e93fda55064434601
msgid "The default file name usually makes sense, so you can just leave it as it is. For security purposes, it is highly recommended that you use a passphrase."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:133
# 7603c6599f40404a9197fcf13f1a9b36
msgid "Set up pbuilder"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:135
# d100800c15e4461da9911eda655e3145
msgid "``pbuilder`` allows you to build packages locally on your machine. It serves a couple of purposes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:138
# 4a3042756c3e4caf80f9bc4816c3ae1e
msgid "The build will be done in a minimal and clean environment. This helps you make sure your builds succeed in a reproducible way, but without modifying your local system"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:141
# 7c4d5404cea1475989156720b2391d28
msgid "There is no need to install all necessary *build dependencies* locally"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:142
# c9d5cbed39984dac9059e049f60e827c
msgid "You can set up multiple instances for various Ubuntu and Debian releases"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:144
# a531bc97271648d1bde6dbd0e83ae708
msgid "Setting ``pbuilder`` up is very easy, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:148
# 6adc6b3a94bf49e3a30d0456ccc043ae
msgid "where <release> is for example `natty`, `maverick`, `lucid` or in the case of Debian maybe `sid`. This will take a while as it will download all the necessary packages for a \"minimal installation\". These will be cached though."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:154
# 5fddf3125df24734a882133714dc40a6
msgid "Get set up to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:156
# ccde89e17a28468c9020f9dcbed7f9f5
msgid "With a basic local configuration in place, your next step will be to configure your system to work with Launchpad. This section will focus on the following topics:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:160
# 4cb7da1c24a841ffa7bdd6ed197e81bb
msgid "What Launchpad is and creating a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:161
# fd1702dc76b34c038d34c4f67baf6d16
msgid "Uploading your GPG and SSH keys to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:162
# ad64d13354d74711a787187b2beb201e
msgid "Configuring Bazaar to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:163
# f8b286c59f5741cdbd87d530aba9da86
msgid "Configuring Bash to work with Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:167
# da34ae395b004ef2ab7392394eb58482
msgid "About Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:169
# 2a6e80a33b2d4539a5b7665e717140e9
msgid "Launchpad is the central piece of infrastructure we use in Ubuntu. It not only stores our packages and our code, but also things like translations, bug reports, and information about the people who work on Ubuntu and their team memberships.  You will also use Launchpad to publish your proposed fixes, and get other Ubuntu developers to review and sponsor them."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:175
# 591e5dca210e451a90b7b376d0337b21
msgid "You will need to register with Launchpad and provide a minimal amount of information. This will allow you to download and upload code, submit bug reports, and more."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:179
# 3c3e3e131b6c4ed0a4a5b5038ce4943e
msgid "Besides hosting Ubuntu, Launchpad can host any Free Software project. For more information see the `Launchpad Help wiki <https://help.launchpad.net/>`_."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:184
# 0f6e76f7c7994fe298cca7a8380c4911
msgid "Get a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:186
# 10cb11f18fa94224a2b98b4ce7648fe4
msgid "If you don't already have a Launchpad account, you can easily `create one`_. If you have a Launchpad account but cannot remember your Launchpad id, you can find this out by going to https://launchpad.net/~ and looking for the part after the `~` in the URL."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:191
# 846aab363b2f4ee3b5a8de2fefa55834
msgid "Launchpad's registration process will ask you to choose a display name. It is encouraged for you to use your real name here so that your Ubuntu developer colleagues will be able to get to know you better."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:195
# c38f502054584f12a26b1f816c63915b
msgid "When you register a new account, Launchpad will send you an email with a link you need to open in your browser in order to verify your email address. If you don't receive it, check in your spam folder."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:199
# b61fd4ae71ad425eac57b5c109c9dee5
msgid "`The new account help page <https://help.launchpad.net/YourAccount/NewAccount>`_ on Launchpad has more information about the process and additional settings you can change."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:205
# d8d89da5765a47f383e2a45667f790df
msgid "Upload your GPG key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:207
# a383b1d840504095a3790d7f6b8069fd
msgid "To find about your GPG fingerprint, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:211
# 23270a5318d741a1a8c9822ce499dfb0
msgid "and it will print out something like::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:219
# ae8f2aa6811942d8bbdc5bb185193a6f
msgid "Head to https://launchpad.net/~/+editpgpkeys and copy the \"Key fingerprint\" into the text box. In the case above this would be ``5C28 0144 FB08 91C0 2CF3  37AC 6F0B F90F 43CD E61D``. Now click on \"Import Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:224
# dd86b5dc00294ecb95f0cc04b4b15735
msgid "Launchpad will use the fingerprint to check the Ubuntu key server for your key and, if successful, send you an encrypted email asking you to confirm the key import. Check your email account and read the email that Launchpad sent you. `If your email client supports OpenPGP encryption, it will prompt you for the password you chose for the key when GPG generated it. Enter the password, then click the link to confirm that the key is yours.`"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:231
# da25a8156a384ef19af8769628597414
msgid "Launchpad encrypts the email, using your public key, so that it can be sure that the key is yours. If your email software does not support OpenPGP encryption, copy the encrypted email's contents, type ``gpg`` in your terminal, then paste the email contents into your terminal window."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:236
# 3b0eda70cab743b1a7ef690f6d2e5f78
msgid "Back on the Launchpad website, use the Confirm button and Launchpad will complete the import of your OpenPGP key."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:239
# 4a921d01a6264800b0fc16757ffc9e0d
msgid "Find more information at https://help.launchpad.net/YourAccount/ImportingYourPGPKey"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:243
# 5485e8a7cea849018c9d7cc43c8e88b7
msgid "Upload your SSH key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:245
# 318848e062674f6a8d91d5778e719edb
msgid "Open https://launchpad.net/~/+editsshkeys in a web browser, also open ``~/.ssh/id_rsa.pub`` in a text editor. This is the public part of your SSH key, so it is safe to share it with Launchpad. Copy the contents of the file and paste them into the text box on the web page that says \"Add an SSH key\". Now click \"Import Public Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:251
# 3b5953a5eef54bb4acbc2cb7ea7db730
msgid "For more information on this process, visit the `creating an SSH keypair <https://help.launchpad.net/YourAccount/CreatingAnSSHKeyPair>`_ page on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:257
# 366817d501e246708ac4d833b76daa13
msgid "Configure Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:259
# 2f49e4cc494e4402a6c56692f74f7b1b
msgid "Bazaar is the tool we use to store code changes in a logical way, to exchange proposed changes and merge them, even if development is done concurrently.  It is used for the new Ubuntu Distributed Development method of working with Ubuntu packages."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:264
# 4522d572608844d08b82bc3ba8dfb974
msgid "To tell Bazaar who you are, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:269
# c306e6d4f39244368e824b9a1a7b9dae
msgid "`whoami` will tell Bazaar which name and email address it should use for your commit messages. With `launchpad-login` you set your Launchpad ID. This way code that you publish in Launchpad will be associated with you."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:273
# bb50e50bf28245bcbd6f3077cf77d807
msgid "Note: If you can not remember the ID, go to https://launchpad.net/~ and see where it redirects you. The part after the \"~\" in the URL is your Launchpad ID.)"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:279
# 2c25a7574f2c44808b651e9ebb1478a5
msgid "Configure your shell"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:280
# 38cf2e5da70641dd8b3b17128f1e906a
msgid "Similar to Bazaar, the Debian/Ubuntu packaging tools need to learn about you as well. Simply open your `~/.bashrc` in a text editor and add something like this to the bottom of it::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:287
# 2d65a8fa82904a7bb613baf76de6d3c1
msgid "Now save the file and either restart your terminal or run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:291
# 85174e3c60dc4308ae57aebe80120600
msgid "(If you do not use the default shell, which is `bash`, please edit the configuration file for that shell accordingly.)"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:9
# 7238219b0ee14c5e974f29c3b25bd65f
msgid "Ubuntu Packaging Guide"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:11
# 2e149a2727b645edad68704e6edbfdcc
msgid "Ubuntu is not only a free and open source operating system, its platform is also open and developed in a transparent fashion. The source code for every single component can be obtained easily and every single change to the Ubuntu platform can be reviewed."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:16
# c961fa395cde41718837eaf0b3f5a31c
msgid "This means you can actively get involved in improving it and the community of Ubuntu platform developers is always interested in helping peers getting started."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:20
# 41cc3653004b4b00bef4580fb6fb7c24
msgid "The guide is split up into two sections:"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:22
# aaf27be3471e46cfb4664d2ce8cdc55d
msgid "A list of articles based on tasks, things you want to get done."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:23
# 10dcfa5436c045d19ecfd4d3d0a0361b
msgid "A set of knowledge-base articles that dig deeper into specific bits of our tools and workflows."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:26
# a6ea71a8b6b749788e0085bc22e13cca
msgid "This guide focuses on the Ubuntu Distributed Development packaging method. This is a new way of packaging which uses Distributed Revision Control branches.  It currently has some limitations which mean many teams in Ubuntu use :doc:`traditional packaging<./traditional-packaging>` methods.  See the :doc:`UDD Introduction<./udd-intro>` page for an introduction to the differences."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:33
# 07589e3ba39a4d599fab864535107887
msgid "Articles"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:50
# 6e43e9dd4f6e49778895db3aa106a37b
msgid "Knowledge Base"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:3
# caefffdcae824b2d8fa12e51da188ac3
msgid "Introduction to Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:5
# 048f4699c102423984029ceb48ec772c
msgid "Ubuntu is made up of thousands of different components, written in many different programming languages. Every component -  be it a software library, a tool or a graphical application - is available as a source package. Source packages in most cases consist of two parts: the actual source code and metadata. Metadata includes the dependencies of the package, copyright and licensing information, and instructions on how to build the package. Once this source package is compiled, the build process provides binary packages, which are the .deb files users can install."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:14
# 681fcf031bbd4399bdd5ef719fa07538
msgid "Every time a new version of an application is released, or when someone makes a change to the source code that goes into Ubuntu, the source package must be uploaded to Launchpad's build machines to be compiled. The resulting binary packages then are distributed to the archive and its mirrors in different countries. The URLs in ``/etc/apt/sources.list`` point to an archive or mirror. Every day CD images are built for a selection of different Ubuntu flavours. Ubuntu Desktop, Ubuntu Server, Kubuntu and others specify a list of required packages that get on the CD. These CD images are then used for installation tests and provide the feedback for further release planning."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:24
# 6c2f84bdbfbb4e1c87b350aa97d5865a
msgid "Ubuntu's development is very much dependent on the current stage of the release cycle. We release a new version of Ubuntu every six months, which is only possible because we have established strict freeze dates. With every freeze date that is reached developers are expected to make fewer, less intrusive changes. Feature Freeze is the first big freeze date after the first half of the cycle has passed. At this stage features must be largely implemented. The rest of the cycle is supposed to be focused on fixing bugs. After that the user interface, then the documentation, the kernel, etc. are frozen, then the beta release is put out which receives a lot of testing. From the beta release onwards, only critical bugs get fixed and a release candidate release is made and if it does not contain any serious problems, it becomes the final release."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:39
# 36941c464d694575a1378ed25c10cd3a
msgid "Thousands of source packages, billions of lines of code, hundreds of contributors require a lot of communication and planning to maintain high standards of quality. At the beginning of each release cycle we have the Ubuntu Developer Summit where developers and contributors come together to plan the features of the next releases. Every feature is discussed by its stakeholders and a specification is written that contains detailed information about its assumptions, implementation, the necessary changes in other places, how to test it and so on. This is all done in an open and transparent fashion, so even if you cannot attend the event in person, you can participate remotely and listen to a streamcast, chat with attendants and subscribe to changes of specifications, so you are always up to date."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:51
# b98d4b74a327456baac40d692afe7f6c
msgid "Not every single change can be discussed in a meeting though, particularly because Ubuntu relies on changes that are done in other projects. That is why contributors to Ubuntu constantly stay in touch. Most teams or projects use dedicated mailing lists to avoid too much unrelated noise. For more immediate coordination, developers and contributors use Internet Relay Chat (IRC). All discussions are open and public."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:58
# 44f5036429bf4ea2bda21e163b32301e
msgid "Another important tool regarding communication is bug reports. Whenever a defect is found in a package or piece of infrastructure, a bug report is filed in Launchpad. All information is collected in that report and its importance, status and assignee updated when necessary. This makes it an effective tool to stay on top of bugs in a package or project and organise the workload."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:65
# b4e81a83b5c540dbbacc98fa3d875e72
msgid "Most of the software available through Ubuntu is not written by Ubuntu developers themselves. Most of it is written by developers of other Open Source projects and then integrated into Ubuntu. These projects are called \"Upstreams\", because their source code flows into Ubuntu, where we \"just\" integrate it. The relationship to Upstreams is critically important to Ubuntu. It is not just code that Ubuntu gets from Upstreams, but it is also that Upstreams get users, bug reports and patches from Ubuntu (and other distributions)."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:74
# e9e66e99df3748b8b4a9370a3bd72256
msgid "The most important Upstream for Ubuntu is Debian. Debian is the distribution that Ubuntu is based on and many of the design decisions regarding the packaging infrastructure are made there. Traditionally, Debian has always had dedicated maintainers for every single package or dedicated maintenance teams. In Ubuntu there are teams that have an interest in a subset of packages too, and naturally every developer has a special area of expertise, but participation (and upload rights) generally is open to everyone who demonstrates ability and willingness."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:83
# 771d7449f0b24df0a3f4d7848dad76c5
msgid "Getting a change into Ubuntu as a new contributor is not as daunting as it seems and can be a very rewarding experience. It is not only about learning something new and exciting, but also about sharing the solution and solving a problem for millions of users out there."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:88
# d186ebeb4e8a47118dbf9197e95f344f
msgid "Open Source Development happens in a distributed world with different goals and different areas of focus. For example there might be the case that a particular Upstream is interested in working on a new big feature while Ubuntu, because of the tight release schedule, is interested in shipping a solid version with just an additional bug fix. That is why we make use of \"Distributed Development\", where code is being worked on in various branches that are merged with each other after code reviews and sufficient discussion."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:98
# a0ab65f5d6494b6290698fe6b3b859a6
msgid "In the example mentioned above it would make sense to ship Ubuntu with the existing version of the project, add the bugfix, get it into Upstream for their next release and ship that (if suitable) in the next Ubuntu release. It would be the best possible compromise and a situation where everybody wins."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:103
# 87aa49d20c50415f8bafebf161ddf432
msgid "To fix a bug in Ubuntu, you would first get the source code for the package, then work on the fix, document it so it is easy to understand for other developers and users, then build the package to test it. After you have tested it, you can easily propose the change to be included in the current Ubuntu development release. A developer with upload rights will review it for you and then get it integrated into Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:112
# 5aca5fd533014e8a84bb46e20e64bcc1
msgid "When trying to find a solution it is usually a good idea to check with Upstream and see if the problem (or a possible solution) is known already and, if not, do your best to make the solution a concerted effort."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:116
# f5d5453a087c42bbafb03fc8b712654a
msgid "Additional steps might involve getting the change backported to an older, still supported version of Ubuntu and forwarding it to Upstream."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:119
# 5898cfda4fab4cde9843694478913dd8
msgid "The most important requirements for success in Ubuntu development are: having a knack for \"making things work again,\" not being afraid to read documentation and ask questions, being a team player and enjoying some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:123
# 8e1b8ce27fba480f94f60da971f4f313
msgid "Good places to ask your questions are ``ubuntu-motu@lists.ubuntu.com`` and ``#ubuntu-motu`` on ``irc.freenode.net``. You will easily find a lot of new friends and people with the same passion that you have: making the world a better place by making better Open Source software."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:3
# 52d29099420c424f9dbf1b206cac5b2f
msgid "KDE Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:5
# 407c61aaef7c4060ad8ecbf08b6e7479
msgid "Packaging of KDE programs in Ubuntu is managed by the Kubuntu and MOTU teams.  You can contact the Kubuntu team on the `Kubuntu mailing list`_ and ``#kubuntu-devel`` Freenode IRC channel.  More information about Kubuntu development is on the `Kubuntu wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:10
# 739ec75ca1ef4817a11924e185c4b224
msgid "Our packaging follows the practices of the ``Debian Qt/KDE Team`` and Debian KDE Extras Team.  Most of our packages are derived from the packaging of these Debian teams."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:15
# 58e9982b26c34e51a571dda02b9fba8b
msgid "Patching Policy"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:17
# dfce7f470e724e73a820f123e89c7c90
msgid "Kubuntu does not add patches to KDE programs unless they come from the upstream authors or submitted upstream with the expectation they will be merged soon or we have consulted the issue with the upstream authors."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:22
# c45669cf35404653b3d7819cf7a4f5ed
msgid "Kubuntu does not change the branding of packages except where upstream expects this (such as the top left logo of the Kickoff menu) or to simplify (such as removing splash screens)."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:27
#: ../ubuntu-packaging-guide/python-packaging.rst:31
# 7bc2d825ad5a44969c29c6d80e75c54e
# 28dbabd4b8e5498a9fbd93cdc148d661
msgid "debian/rules"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:29
# 808333c9b0934a68b9539a792fbf4429
msgid "Debian packages include some additions to the basic Debhelper usage. These are kept in the ``pkg-kde-tools`` package."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:32
# ee56c7d6b0e9408780bd2e4db57444f5
msgid "Packages which use Debhelper 7 should add the ``--with=kde`` option. This will ensure the correct build flags are used and add options such as handling kdeinit stubs and translations::"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:39
# 37ae2e62176c40deb7e1f70340fd35d3
msgid "Some newer KDE packages use the ``dhmk`` system, an alternative to ``dh`` made by the Debian Qt/KDE team.  You can read about it in /usr/share/pkg-kde-tools/qt-kde-team/2/README.  Packages using this will ``include /usr/share/pkg-kde-tools/qt-kde-team/2/debian-qt-kde.mk`` instead of running ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:47
# 0e7850a2b4a04388920c99c70ba7bdd1
msgid "Translations"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:49
# f95141d9343f40a29d7e5722037686fd
msgid "Packages in main have their translations imported into Launchpad and exported from Launchpad into Ubuntu's language-packs."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:52
# d37099ad7d98442bada2c11d5e43c3e1
msgid "So any KDE package in main must generate translation templates, include or make available upstream translations and handle ``.desktop`` file translations."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:56
# 39edfd4fc7c34524830cdb6d9ac7ea72
msgid "To generate translation templates the package must include a ``Messages.sh`` file; complain to the upstream if it does not.  You can check it works by running ``extract-messages.sh`` which should produce one or more ``.pot`` files in ``po/``.  This will be done automatically during build if you use the ``--with=kde`` option to ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:63
# 8ef9f0907db042f39d0d12d860774545
msgid "Upstream will usually have also put the translation ``.po`` files into the ``po/`` directory.  If they do not, check if they are in separate upstream language packs such as the KDE SC language packs.  If they are in separate language packs Launchpad will need to associate these together manually, contact `dpm`_ to do this."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:69
# 2e2b39335cab4833818dff4aa767072f
msgid "If a package is moved from universe to main it will need to be re-uploaded before the translations get imported into Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:72
# ed77c18ccb854a76bca7b3fd6030c626
msgid "``.desktop`` files also need translations.  We patch KDELibs to read translations out of ``.po`` files which are pointed to by a line ``X-Ubuntu-Gettext-Domain=`` added to ``.desktop`` files at package build time.  A .pot file for each package is be generated at build time and .po files need to be downloaded from upstream and included in the package or in our language packs.  The list of .po files to be downloaded from KDE's repositories is in ``/usr/lib/kubuntu-desktop-i18n/desktop-template-list``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:82
# 6199667d28504b6794d6ef41b2982ab8
msgid "Library Symbols"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:84
# 5fe50b0fc9254bf79a68a9c7f8e01a28
msgid "Library symbols are tracked in ``.symbols`` files to ensure none go missing for new releases.  KDE uses C++ libraries which act a little differently compared to C libraries.  Debian's Qt/KDE Team have scripts to handle this. See `Working with symbols files`_ for how to create and keep these files up to date."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:3
# daa2f3361e0d45c3b1ddede6579740b4
msgid "Shared Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:5
# 624174e2884244c68bb9235ed7227307
msgid "Shared libraries are compiled code which is intended to be shared among several different programs.  They are distributed as ``.so`` files in ``/usr/lib/``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:9
# 0e868e02c8674216911011d507634d24
msgid "A library exports symbols which are the compiled versions of functions, classes and variables.  A library has a name called an SONAME which includes a version number.  This SONAME version does not necessarily match the public release version number.  A program gets compiled against a given SONAME version of the library.  If any of the symbols is removed or changes then the version number needs to be changed which forces any packages using that library to be recompiled against the new version.  Version numbers are usually set by upstream and we follow them in our binary package names called an ABI number, but sometimes upstreams do not use sensible version numbers and packagers have to keep separate version numbers."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:21
# 3e9d5238d9e44f1e85a962f4be9e8926
msgid "Libraries are usually distributed by upstream as standalone releases. Sometimes they are distributed as part of a program.  In this case they can be included in the binary package along with the program (this is called bundling) if you do not expect any other programs to use the library, more often they should be split out into separate binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:27
# cf42922784a64568b8451118ef7d4b33
msgid "The libraries themselves are put into a binary package named ``libfoo1`` where ``foo`` is the name of the library and ``1`` is the version from the SONAME. Development files from the package, such as header files, needed to compile programs against the library are put into a package called ``libfoo-dev``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:34
# c4f388036f9b493ba9823684f8f64224
msgid "An Example"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:36
# af165fa4774e4cf58dce68d5d16a1af9
msgid "We will use libnova as an example::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:41
# 6ad187e33fd64cde94bfabfec25ab19b
msgid "To find the SONAME of the library run::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:45
# e570a82d817b40a2b633481d24b31ca2
msgid "The SONAME is ``libnova-0.12.so.2``, which matches the file name (usually the case but not always). Here upstream has put the upstream version number as part of the SONAME and given it an ABI version of ``2``.  Library package names should follow the SONAME of the library they contain. The library binary package is called ``libnova-0.12-2`` where ``libnova-0.12`` is the name of the library and ``2`` is our ABI number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:52
# ff9381c0f0b14859b7aa6d5c7d7bdcb8
msgid "If upstream makes incompatible changes to their library they will have to reversion their SONAME and we will have to rename our library.  Any other packages using our library package will need to recompiled against the new version, this is called a transition and can take some effort. Hopefully our ABI number will continue to match upstream's SONAME but sometimes they introduce incompatibilities without changing their version number and we will need to change ours."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:60
# 797faf2ded794c679715a61249a9822a
msgid "Looking in debian/libnova-0.12-2.install we see it includes two files::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:65
# d5162a13f4d343bdb99766b7bd8277ef
msgid "The last one is the actual library, complete with minor and point version number.  The first one is a symlink which points to the actual library.  The symlink is what programs using the library will look for, the running programs do not care about the minor version number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:70
# 58977c275dcf4221b6199b56a607f052
msgid "``libnova-dev.install`` includes all the files needed to compile a program with this library.  Header files, a config binary, the ``.la`` libtool file and ``libnova.so`` which is another symlink pointing at the library, programs compiling against the library do not care about the major version number (although the binary they compile into will)."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:76
# 579702c2c9ae43d3af42453dd160cdcf
msgid "``.la`` libtool files are needed on some non-Linux systems with poor library support but usually cause more problems than they solve on Debian systems.  It is a current `Debian goal to remove .la files`_ and we should help with this."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:82
# 56d99cfc0c544cd3b111b31164eec7f6
msgid "Static Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:84
# 60ced9af62344631bcafac001aea53da
msgid "The -dev package also ships ``usr/lib/libnova.a``.  This is a static library, an alternative to the shared library.  Any program compiled against the static library will include the code directory into itself.  This gets round worrying about binary compatibility of the library.  However it also means that any bugs, including security issues, will not be updated along with the library until the program is recompiled.  For this reason programs using static libraries are discouraged."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:94
# 75a625efaacc4819ba5f57ad80263425
msgid "Symbol Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:96
# cd005d4f6d874292b87bcb10da830da4
msgid "When a package builds against a library the ``shlibs`` mechanism will add a package dependency on that library.  This is why most programs will have ``Depends: ${shlibs:Depends}`` in ``debian/control``.  That gets replaced with the library dependencies at build time.  However shlibs can only make it depend on the major ABI version number, ``2`` in our libnova example, so if new symbols get added in libnova 2.1 a program using these symbols could still be installed against libnova ABI 2.0 which would then crash."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:104
# c2b093f649c74056bd3207062a03b9f5
msgid "To make the library dependencies more precise we keep ``.symbols`` files that list all the symbols in a library and the version they appeared in."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:107
# d70ad7a3fd1944e7ab91765d91983710
msgid "libnova has no symbols file so we can create one.  Start by compiling the package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:112
# 69fd61b5e6db482e979bf05bf2b31468
msgid "The ``-nc`` will cause it to finish at the end of compilation without removing the built files.  Change to the build and run ``dpkg-gensymbols`` for the library package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:119
# 8218f8f9176d428c8233b6fb9ce4c1ac
msgid "This makes a diff file which you can self apply::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:123
# d98da44a2bdd47969664e2f8252d69a5
msgid "Which will create a file named similar to ``dpkg-gensymbolsnY_WWI`` that lists all the symbols.  It also lists the current package version.  We can remove the packaging version from that listed in the symbols file because new symbols are not generally added by new packaging versions, but by the upstream developers::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:130
# aa47176c05bd4fd78e14c811f693e5a1
msgid "Now move the file into its location, commit and do a test build::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:138
# 6c94d1aec2e0430091ce7d85e3d34ce8
msgid "If it successfully compiles the symbols file is correct.  With the next upstream version of libnova you would run dpkg-gensymbols again and it will give a diff to update the symbols file."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:143
# 25bfd3d55132469993e28a2f74475b80
msgid "C++ Library Symbols Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:145
# 22439be3f62d4ea58513a94f61a95ded
msgid "C++ has even more exacting standards of binary compatibility than C.  The Debian Qt/KDE Team maintain some scripts to handle this, see their `Working with symbols files`_ page for how to use them."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:150
# cfb29be793674f93ae7dadc056517790
msgid "Further Reading"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:152
# 117fe8f19b6246b3be05d18dd63f132c
msgid "Junichi Uekawa's `Debian Library Packaging Guide`_ goes into this topic in more detail."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:3
# f43505e787d848e392b696d5627a70ec
msgid "Packaging New Software"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:5
# 759bf4cd4b104700a68e352bb14c035b
msgid "While there are thousands of packages in the Ubuntu archive, there are still a lot nobody has gotten to yet. If there is an exciting new piece of software that you feel needs wider exposure, maybe you want to try your hand at creating a package for Ubuntu or a PPA_. This guide will take you through the steps of packaging new software."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:11
# e1108c3e5f484821bec00506a08ab325
msgid "You will want to read the :doc:`Getting Set Up<./getting-set-up>` article first in order to prepare your development environment."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:15
# b84bd90c798f4232969b0c5ffede3476
msgid "Checking the Program"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:17
# 4e4abe7cbf124269bcde5475431c4451
msgid "The first stage in packaging is to get the released tar from upstream (we call the authors of applications \"upstream\") and check that it compiles and runs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:20
# 90a9426ebd5b4874977d9f6a92838dfa
msgid "This guide will take you through packaging a simple application called GNU Hello which has been posted on GNU.org_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:23
# 833b6e64484f42acbf3ff307d4c00fdf
msgid "If you don't have the build tools lets make sure we have them first.  Also if you don't have the required dependencies lets install those as well."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:26
# ec547fd3651643ceb42c1c197dd0f4a7
msgid "Install build tools::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:30
# 12c71909d6994a94bdb724b8790446b3
msgid "Download main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:34
# 7723cb011454479ba915d0381588e157
msgid "Now uncompress main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:39
# 96fdcd0510994243aa6921812cb9ee25
msgid "This application uses the autoconf build system so we want to run ``./configure`` to prepare for compilation."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:42
# 4126c2cd5b0141898663ba8bdc110c20
msgid "This will check for the required build dependencies. As ``hello`` is a simple example, ``build-essential`` should provide everything we need. For more complex programs, the command will fail if you do not have the needed libraries and development files. Install the needed packages and repeat until the command runs successfully.::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:50
# 250a5c5988be4daeb2d09c73eef4ef9b
msgid "Now you can compile the source::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:54
# 3fd84b7ed3934b18a22bc136c1f6a91e
msgid "If compilation completes successfully you can install and run the program::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:60
# 7db7e31572d2436a90b89b1c804bb536
msgid "Starting a Package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:62
# ad1c4b7115cb483593ff6762b4d21fa7
msgid "``bzr-builddeb`` includes a plugin to create a new package from a template. The plugin is a wrapper around the ``dh_make`` command. You should already have these if you installed ``packaging-dev``. Run the command providing the package name, version number, and path to the upstream tarball::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:71
# 5facdfaad43047f9a794f963c2fcf26d
msgid "When it asks what type of package type ``s`` for single binary. This will import the code into a branch and add the ``debian/`` packaging directory.  Have a look at the contents.  Most of the files it adds are only needed for specialist packages (such as Emacs modules) so you can start by removing the optional example files::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:80
# 0d2bad6b00c54386b87a438d2f411481
msgid "You should now customise each of the files."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:82
# abc788e684e6430fbff4c4f524384668
msgid "In ``debian/changelog`` change the version number to an Ubuntu version: ``2.7-0ubuntu1`` (upstream version 2.7, Debian version 0, Ubuntu version 1).  Also change ``unstable`` to the current development Ubuntu release such as ``precise``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:87
# cfc20f219dcf4b058a939202c4851ab9
msgid "Much of the package building work is done by a series of scripts called ``debhelper``.  The exact behaviour of ``debhelper`` changes with new major versions, the compat file instructs ``debhelper`` which version to act as.  You will generally want to set this to the most recent version which is ``8``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:93
# b49c5bcd08e44b74a2b195ed27b86745
msgid "``control`` contains all the metadata of the package.  The first paragraph describes the source package. The second and following paragraphs describe the binary packages to be built.  We will need to add the packages needed to compile the application to ``Build-Depends:``. For ``hello``, make sure that it includes at least::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:101
# bd906ab07f2d46638665c435bd8a9493
msgid "You will also need to fill in a description of the program in the ``Description:`` field."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:104
# 5ac7d764fad04a59bc9371e6351e6ce6
msgid "``copyright`` needs to be filled in to follow the licence of the upstream source.  According to the hello/COPYING file this is GNU GPL 3 or later."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:107
# b0dd77366c9c430b8b6de5a9a81f83d6
msgid "``docs`` contains any upstream documentation files you think should be included in the final package."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:110
# 89b32b53cf9e4918b9916cdc3517784d
msgid "``README.source`` and ``README.Debian`` are only needed if your package has any non-standard features, we don't so you can delete them."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:113
# bad2ef0de1514bea8c76d2761045d919
msgid "``source/format`` can be left as is, this describes the version format of the source package and should be ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:116
# a8e20b64309245d4951ff2d652e5bafb
msgid "``rules`` is the most complex file.  This is a Makefile which compiles the code and turns it into a binary package.  Fortunately most of the work is automatically done these days by ``debhelper 7`` so the universal ``%`` Makefile target just runs the ``dh`` script which will run everything needed."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:121
# fc71919b70384f22ac66c68e3d05eff9
msgid "All of these file are explained in more detail in the :doc:`overview of the debian directory<./debian-dir-overview>` article."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:124
# a9bc78ea3a6949c4a5cde1b334cdd89b
msgid "Finally commit the code to your packaging branch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:129
#: ../ubuntu-packaging-guide/udd-working.rst:69
# 8dc51eb65e4a4340863ab1a55252b776
# 5e0ceb3ec4324e90bb7d0d777b1ed569
msgid "Building the package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:131
# bbddc86bce354c318495f6076c0d7731
msgid "Now we need to check that our packaging successfully compiles the package and builds the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:137
# fecc729b516240f59baaa99c07d2c24a
msgid "``bzr builddeb`` is a command to build the package in its current location. The ``-us -uc`` tell it there is no need to GPG sign the package.  The result will be placed in ``..``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:141
# 64845aa2bf3242f8a37cf68ae162f98f
msgid "You can view the contents of the package with::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:145
# 42a1c6e0bfcb4f01b39ba132caaa715c
msgid "Install the package and check it works::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:150
# 187681c9e62b4bca9a67cca2625d5aa9
msgid "Next Steps"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:152
# 35c434ec79924ef190eef4bff6d39e6c
msgid "Even if it builds the .deb binary package, your packaging may have bugs.  Many errors can be automatically detected by our tool ``lintian`` which can be run on both the source .dsc metadata file and the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:160
# 940ebacf348843e3bb8e030b78606496
msgid "A description of each of the problems it reports can be found on the `lintian website`_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:163
# 84322cebd178401895e2b212ed07e78e
msgid "After making a fix to the packaging you can rebuild using ``-nc`` \"no clean\" without having to build from scratch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:168
# b3e4fa6d5dc941849bca96485687ff54
msgid "Having checked that the package builds locally you should ensure it builds on a clean system using ``pbuilder``. Since we are going to upload to a PPA (Personal Package Archive) shortly, this upload will need to be *signed* to allow Launchpad to verify that the upload comes from you (you can tell the upload will be signed because the ``-us`` and ``-uc`` flags are not passed to ``bzr builddeb`` like they were before). For signing to work you need to have set up GPG. If you haven't set up ``pbuilder-dist`` or GPG yet, :doc:`do so now<./getting-set-up>`::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:181
# 7f86d2750bbf4a68bdba1072d56c1e23
msgid "When you are happy with your package you will want others to review it.  You can upload the branch to Launchpad for review::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:186
# 8e23aa25af744ee6a47e6ce5769408e8
msgid "Uploading it to a PPA will ensure it builds and give an easy way for you and others to test the binary packages.  You will need to set up a PPA in Launchad then upload with ``dput``::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:192
# 142d0d645c614a9f93dae2ffd164f4d5
msgid "See :doc:`uploading<./udd-uploading>` for more information."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:194
# 66e97eaa5eec46688521da398394dbd1
msgid "You can ask for reviews in ``#ubuntu-motu`` IRC channel, or on the `MOTU mailing list`_.  There might also be a more specific team you could ask such as the GNU team for more specific questions."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:199
# 35bafeb1effe4965af8090920bd8a97b
msgid "Submitting for inclusion"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:201
# 78d25891342d4bcdb776240daad9713e
msgid "There are a number of paths that a package can take to enter Ubuntu. In most cases, going through Debian first can be the best path. This way ensures that your package will reach the largest number of users as it will be available in not just Debian and Ubuntu but all of their derivatives as well. Here are some useful links for submitting new packages to Debian:"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:208
# 92d3a14f3e46408f87ecf6872e28798b
msgid "`Debian Mentors FAQ`_ - debian-mentors is for the mentoring of new and prospective Debian Developers. It is where you can find a sponsor to upload your package to the archive."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:212
# 744ca5e77d12412ea80e197b6c38342e
msgid "`Work-Needing and Prospective Packages`_ - Information on how to file \"Intent to Package\" and \"Request for Package\" bugs as well as list of open ITPs and RFPs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:216
# db139d75348c42c89effa6412bd81a2a
msgid "`Debian Developer's Reference, 5.1. New packages`_ - The entire document is invaluable for both Ubuntu and Debian packagers. This section documents processes for submitting new packages."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:220
# 244dfdae8a9649999db66c99a77e5227
msgid "In some cases, it might make sense to go directly into Ubuntu first. For instance, Debian might be in a freeze making it unlikely that your package will make it into Ubuntu in time for the next release. This process is documented on the `\"New Packages\"`_ section of the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:3
# 622acf12072a476b9d01b59dbd694258
msgid "Patches to Packages"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:5
# 400733a45c30426fbd2a575ddcba2b4c
msgid "Sometimes, Ubuntu package maintainers have to change the upstream source code in order to make it work properly on Ubuntu.  Examples include, patches to upstream that haven't yet made it into a released version, or changes to the upstream's build system needed only for building it on Ubuntu.  We could change the upstream source code directly, but doing this makes it more difficult to remove the patches later when upstream has incorporated them, or extract the change to submit to the upstream project.  Instead, we keep these changes as separate patches, in the form of diff files."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:14
# e5b37f7fab8c499ebd59a79640e1fcd7
msgid "There are a number of different ways of handling patches in Debian packages, fortunately we are standardising on one system, `Quilt`_, which is now used by most packages."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:18
# d9b6eec4ae5445c897ea149fafe4b72d
msgid "Let's look at an example package, ``kamoso`` in Natty::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:22
# 595be8a1a8094a9eba51fc163652fbde
msgid "The patches are kept in ``debian/patches``.  This package has one patch ``kubuntu_01_fix_qmax_on_armel.diff`` to fix a compile failure on ARM.  The patch has been given a name to describe what it does, a number to keep the patches in order (two patches can overlap if they change the same file) and in this case the Kubuntu team adds their own prefix to show the patch comes from them rather than from Debian."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:29
# 008eb80177b249f28349be4eb3fef4a0
msgid "The order of patches to apply is kept in ``debian/patches/series``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:32
# b436f36c5b0c4a68aa2fe1af0da58da1
msgid "Patches with Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:34
# 71dcf7c475ef4d72bd805544353dc7a4
msgid "Before working with Quilt you need to tell it where to find the patches.  Add this to your ``~/.bashrc``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:39
# 777a30fe35ce4d7e883bb53e6d9bc3f4
msgid "And source the file to apply the new export::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:43
# 5ee14379f16e460f9af8856b6a1bfb20
msgid "By default all patches are applied already to UDD checkouts or downloaded packages.  You can check this with::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:49
# 2834bf0293d744968f3ed6848c4f83ef
msgid "If you wanted to remove the patch you would run ``pop``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:57
# bdb8da306e8a434496a2f6c535431f27
msgid "And to apply a patch you use ``push``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:67
# 8fec22b3690440bca6abe82af6d65cce
msgid "Adding a New Patch"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:69
# ab7ea4574f574fd3945add61a9ade86d
msgid "To add a new patch you need to tell Quilt to create a new patch, tell it which files that patch should change, edit the files then refresh the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:81
# 1b1eb2c5400946ba9914d6675352a9c2
msgid "The ``quilt add`` step is important, if you forget it the files will not end up in the patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:84
# 56dd00c7e9b747fc9aa3cf4e9a9cdfc6
msgid "The change will now be in ``debian/patches/kubuntu_02_program_description.diff`` and the ``series`` file will have had the new patch added to it.  You should add the new file to the packaging::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:94
# d7b93cb280574d278b89fd46dc1a080a
msgid "Quilt keeps its metadata in the ``.pc/`` directory, so currently you need to add that to the packaging too.  This should be improved in future."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:97
# 48fafa5191964ba796be89812ba2676d
msgid "As a general rule you should be careful adding patches to programs unless they come from upstream, there is often a good reason why that change has not already been made.  The above example changes a user interface string for example, so it would break all translations.  If in doubt, do ask the upstream author before adding a patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:104
# 44e4bfdb2d464fdc82728a83d9a5a722
msgid "Upgrading to New Upstream Versions"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:106
# cdf7651a1472406d9a4dbfa80841982f
msgid "When you upgrade to a new upstream version, patches will often become out of date.  They might need to be refreshed to match the new upstream source or they might need to be removed altogether."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:110
# 0c770fec6bb448b7ad401a4ff656084b
msgid "You should start by ensuring no patches are applied.  Unfortunately a commit is needed before you can merge in the new upstream (this is `bug 815854`_)::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:116
# 55988084091b44909a270c5da4d59572
msgid "Then upgrade to the new version::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:120
# c5fd73c6ea934776bf52e77b5be0f20f
msgid "Then apply the patches one at a time to check for problems::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:129
# 877f4e25de924b20aaaba343e0edf47a
msgid "If it can be reverse-applied this means the patch has been applied already by upstream, so we can delete the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:135
# 094dbb7311aa414da51fc6d9f50992e9
msgid "Then carry on::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:140
# 83a381b3814b405393f4f1027eda6cc2
msgid "It is a good idea to run refresh, this will update the patch relative to the changed upstream source::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:146
# 50668550aef34a448419846fcbf3af3f
msgid "Then commit as usual::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:152
# 96f7606cedc04c3aa21a2588a34f403c
msgid "Making A Package Use Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:154
# 9e01156a34bd4611b0e1e0eed4ee130c
msgid "Modern packages use Quilt by default, it is built into the packaging format.  Check in ``debian/source/format`` to ensure it says ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:158
# 3764fbb87daa465ea3fc76ecdec3b1bb
msgid "Older packages using source format 1.0 will need to explicitly use Quilt, usually by including a makefile into ``debian/rules``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:163
# 12a76164ee25447ba84b66a987d1df30
msgid "Other Patch Systems"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:165
# 4f3d232fb57b4e96929321e02eb7db33
msgid "Other patch systems used by packages include ``dpatch`` and ``cdbs simple-patchsys``, these work similarly to Quilt by keeping patches in debian/patches but have different commands to apply, un-apply or create patches. You can use ``edit-patch``, shown in previous chapters, as a reliable way to work with all systems."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:171
# b730223a667b426d8b3708d8e9ef51bf
msgid "In even older packages changes will be included directly to sources and kept in the ``diff.gz`` source file.  This makes it hard to upgrade to new upstream versions or differentiate between patches and is best avoided."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:175
# 047b3494b0484885a7c7c2d94917a52a
msgid "Bazaar Loom is a way to keep patches as part of bzr trees, see :doc:`Working with Patches via Loom<./udd-patchsys>` for more information."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:178
# 870cdc61843144e1ae9aaef1efabf204
msgid "Do not change a package's patch system without discussing it with the Debian maintainer or relevant Ubuntu team.  If there is no existing patch system then feel free to add Quilt."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:3
# 1a8b7e1ed0e84fbfa4b9803ff2b453f7
msgid "Packaging Python modules and applications"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:5
# bb2bcd8bbb0e40df876ebb1df4f4404d
msgid "Our packaging follows Debian’s `Python policy`_. We will use the `python-markdown`_ package as an example, which can be downloaded from `PyPI`_. You can look at its packaging at its `Subversion repository`_."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:7
# 6b63e02bc37e43a3963c3111ad79b27c
msgid "There are two types of Python packages — *modules* and *apps*."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:9
# 1cedd58ed9034fe3b0ce9b6b24fe47fc
msgid "At the time of writing, Ubuntu has two incompatible versions of Python — *2.x* and *3.x*. ``/usr/bin/python`` is a symbolic link to a default Python 2.x version, and ``/usr/bin/python3`` — to a default Python 3.x version. Python modules should be built against all supported Python versions."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:11
# 5bb833da657f47fa8cc77b632b28772d
msgid "If you are going to package a new Python module, you might find the ``py2dsc`` tool useful (available in `python-stdeb`_ package)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:14
# def8e1e32d154d19a0478e4c9a6443ba
msgid "debian/control"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:16
# 96b7a3c4f5bd48a4bc35f0a8b4ecfd48
msgid "Python 2.x and 3.x versions of the package should be in separate binary packages. Names should have ``python{,3}-modulename`` format (like: ``python3-dbus.mainloop.qt``). Here, we will use ``python-markdown`` and ``python3-markdown`` for module packages and ``python-markdown-doc`` for the documentation package."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:18
# f7ff737e234849acafb266c0342c0d05
msgid "Things in ``debian/control`` that are specific for a Python package:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:20
# dd62b9448195469ebda9980712a7bf98
msgid "The section of module packages should be ``python``, and ``doc`` for the documentation package. For an application, a single binary package will be enough."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:21
# 015bff08fead46f389745402fec473da
msgid "We should add build dependencies on ``python-all (>= 2.6.6-3~)`` and ``python3-all (>= 3.1.2-7~)`` to make sure Python helpers are available (see the next section for details)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:22
# b152ca0fc61f4496880fbd270b1b1739
msgid "It’s recommended to add ``X-Python-Version`` and ``X-Python3-Version`` fields — see “`Specifying Supported Versions`_” section of the Policy for details. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:27
# a6dd3a8edbee4547a2bc10b02b61bdc6
msgid "If your package works only with Python 2.x or 3.x, build depend only on one ``-all`` package and use only one ``-Version`` field."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:28
# 910ef84f7fbe4405b942d36bf0155622
msgid "Module packages should have ``{python:Depends}`` and ``{python3:Depends}`` substitution variables (respectively) in their dependency lists."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:33
# 002114f707194868ab790ea79e136943
msgid "The recommended helpers for python modules are ``dh_python2`` and ``dh_python3``. Unfortunately, ``debhelper`` doesn’t yet build Python 3.x packages automatically (see `bug 597105`_ in Debian BTS), so we’ll need to do that manually in override sections (skip this if your package doesn’t support Python 3.x)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:35
# 15cf589cf0a34be494557d5721ff1d05
msgid "Here’s our ``debian/rules`` file (with annotations):"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:70
# 0f0968cde4284ecb996963a2e2d2fe51
msgid "It is also a good practice to run tests during the build, if they are shipped by upstream. Usually tests can be invoked using ``setup.py test`` or ``setup.py check``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:73
# 236424f098b848e7b952da5247a9a5e5
msgid "debian/\\*.install"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:75
# c3a91192f6004d0585836984d0d462e0
msgid "Python 2.x modules are installed into ``/usr/share/pyshared/`` directory, and symbolic links are created in ``/usr/lib/python2.x/dist-packages/`` for every interpreter version, while Python 3.x ones are all installed into ``/usr/lib/python3/dist-packages/``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:77
# dec0a059ff5641bbabdd7b20c75246c8
msgid "If your package is an application and has private Python modules, they should be installed in ``/usr/share/module``, or ``/usr/lib/module`` if the modules are architecture-dependent (e.g. extensions) (see “`Programs Shipping Private Modules`_” section of the Policy)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:79
# 37637074f2114de4ade4eb300f3e9b0c
msgid "So, our ``python-markdown.install`` file will look like this (we’ll also want to install a ``markdown_py`` executable)::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:84
# 3cdc89118e41414b8c98891e997c3de3
msgid "and ``python3-markdown.install`` will only have one line::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:89
# ae4daad1e1dc445382389dee0d9fb924
msgid "The ``-doc`` package"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:91
# 09bbeed029d04c159d685c1e54c2077c
msgid "The tool most commonly used for building Python docs is `Sphinx`_. To add Sphinx documentation to your package (using ``dh_sphinxdoc`` helper), you should:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:93
# f49aa881bbb24c83b3e2d60383713346
msgid "Add a build-dependency on ``python-sphinx`` or ``python3-sphinx`` (depending on what Python version do you want to use);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:94
# c0d0bc5f5b5e4847bf9d0ed5b281e27e
msgid "Append ``sphinxdoc`` to the ``dh --with`` line;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:95
# 49e55d6bd1a64f5f986a81fa95e8c820
msgid "Run ``setup.py build_sphinx`` in ``override_dh_auto_build`` (sometimes not needed);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:96
# d9f87f5a80fb4d708f2c8d5a8dcd30fb
msgid "Add ``{sphinxdoc:Depends}`` to the dependency list of your ``-doc`` package;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:97
# 4b0cb311e3d44f3cab5871cbbf0ef56a
msgid "Add the path of the built docs directory (usually ``build/sphinx/html``) to your ``.docs`` file."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:99
# 2c538834ef694319a814811c7bba6f00
msgid "In our case, the docs are automatically built in ``build/docs/`` directory when we run ``setup.py build``, so we can simply put this in the ``python-markdown-doc.docs`` file::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:103
# 27bf2e6520f546258035243cc4e1244b
msgid "Because docs also contain source ``.txt`` files, we’ll also tell ``dh_compress`` to not compress them — by adding this to ``debian/rules``:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:111
# 813c9cc9cffc407b9f1bf295497049c6
msgid "Checking for packaging mistakes"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:113
# 123d74ac29764274bce8a2e388b07d4f
msgid "Along with ``lintian``, there is a special tool for checking Python packages — ``lintian4py``. It is available in the `lintian4python`_ package. For example, these two commands invoke both versions of ``lintian`` and check source and binary packages::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:118
# 3e62ecc04ffe496b9f63442dbb7ca83a
msgid "Here, ``-EI`` option is used to enable experimental and informational tags."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:121
# 325bbc33ef32494bac00fb61d95fb79f
msgid "See also"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:123
# a2262c6735524000aac5af47b0897e5f
msgid "The `Python policy`_;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:124
# da48eb9151b344fe82df76fa24787e48
msgid "`Python/Packaging`_ article on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:125
# c426b98b5f3149939ea58894fdcd1d0a
msgid "`Python/LibraryStyleGuide`_ and `Python/AppStyleGuide`_ articles on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:126
# a43531d2cdd047b9bc12dfb8764d1e06
msgid "Debian `python-modules`_ and `python-apps`_ teams."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:3
# f510d04ddd7643dab4a6112a63094c42
msgid "Security and Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:6
# 6f54f29b149d4731ae8b95e5c012414c
msgid "Fixing a Security Bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:11
# 7b85417b32ff46c49954458c88289f96
msgid "Fixing security bugs in Ubuntu is not really any different than :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`, and it is assumed that you are familiar with patching normal bugs. To demonstrate where things are different, we will be updating the dbus package in Ubuntu 10.04 LTS (Lucid Lynx) for a security update."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:19
# 168cee93e66f4e93aac1ac8374888af3
msgid "Obtaining the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:21
# 9c7e9dc31930498c9e4394cdd08c7bfa
msgid "In this example, we already know we want to fix the dbus package in Ubuntu 10.04 LTS (Lucid Lynx). So first you need to determine the version of the package you want to download. We can use the ``rmadison`` to help with this::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:30
# 50113be6f4b6471ca81d72815087444d
msgid "Typically you will want to choose the highest version for the release you want to patch that is not in -proposed or -backports. Since we are updating Lucid's dbus, you'll download 1.2.16-2ubuntu4.2 from lucid-updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:38
# f7cd561b0b274c9bb7e1c0f1352bf32e
msgid "Patching the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:39
# 97a6267e72d34cfd829827f57c5dae5c
msgid "Now that we have the source package, we need to patch it to fix the vulnerability. You may use whatever patch method that is appropriate for the package, including :doc:`UDD techniques<./udd-intro>`, but this example will use ``edit-patch`` (from the ubuntu-dev-tools package). ``edit-patch`` is the easiest way to patch packages and it is basically a wrapper around every other patch system you can imagine."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:46
# 196f08082d5043188d3f37883d8fa633
msgid "To create your patch using ``edit-patch``::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:51
# 10ba28962c2240f6a173a0475e45bfb7
msgid "This will apply the existing patches and put the packaging in a temporary directory. Now edit the files needed to fix the vulnerability.  Often upstream will have provided a patch so you can apply that patch::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:57
# 5729e2820e014ff4997f0c28a6bc3395
msgid "After making the necessary changes, you just hit Ctrl-D or type exit to leave the temporary shell."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:61
# 454e8bf20fe54c448bf70f5fcd39f936
msgid "Formatting the changelog and patches"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:63
# 84e037e219b3433894d59298024d259d
msgid "After applying your patches you will want to update the changelog. The ``dch`` command is used to edit the ``debian/changelog`` file and ``edit-patch`` will launch ``dch`` automatically after un-applying all the patches. If you are not using ``edit-patch``, you can launch ``dch -i`` manually. Unlike with regular patches, you should use the following format (note the distribution name uses lucid-security since this is a security update for Lucid) for security updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:80
# 1d027231ed464a60a58a0ccdcdb6f334
msgid "Update your patch to use the appropriate patch tags. Your patch should have at a minimum the Origin, Description and Bug-Ubuntu tags. For example, edit debian/patches/99-fix-a-vulnerability.patch to have something like::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:91
# 799f198d9b6949dd9ee7ce88a7226835
msgid "Multiple vulnerabilities can be fixed in the same security upload; just be sure to use different patches for different vulnerabilities."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:95
# 75db5f7ed96149ad8f02886f36b33c55
msgid "Test and Submit your work"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:97
# 104ecbf269d24ef393ecfb806213a847
msgid "At this point the process is the same as for :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`. Specifically, you will want to:"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:100
# 4863d071598c4bde8a84e7f9562fe1bd
msgid "Build your package and verify that it compiles without error and without any added compiler warnings"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:102
# 0df1c49b32084c8aac1e93cf02c3c4e4
msgid "Upgrade to the new version of the package from the previous version"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:103
# 7eaad8c32930485eb6b2eeae8384d3df
msgid "Test that the new package fixes the vulnerability and does not introduce any regressions"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:105
# 4045fcf395544d29a13383a34019a009
msgid "Submit your work via a Launchpad merge proposal and file a Launchpad bug being sure to mark the bug as a security bug and to subscribe ``ubuntu-security-sponsors``"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:109
# 56f4c0c4758746a5bbf70fa511a57f4d
msgid "If the security vulnerability is not yet public then do not file a merge proposal and ensure you mark the bug as private."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:112
# 706ed25cdd2a4d7a8efc46a125ffe41b
msgid "The filed bug should include a Test Case, i.e. a comment which clearly shows how to recreate the bug by running the old version then how to ensure the bug no longer exists in the new version."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:116
# 9f49822e739a462c8d155d6a91fd7e68
msgid "The bug report should also confirm that the issue is fixed in Ubuntu versions newer than the one with the proposed fix (in the above example newer than Lucid).  If the issue is not fixed in newer Ubuntu versions you should prepare updates for those versions too."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:123
# 7412b4ee14c14ecbbd13715e3bff4551
msgid "Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:125
# fc7e9645972b40759a32236ed6647997
msgid "We also allow updates to releases where a package has a high impact bug such as a severe regression from a previous release or a bug which could cause data loss.  Due to the potential for such updates to themselves introduce bugs we only allow this where the change can be easily understood and verified."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:130
# 3a018e7c8ad04fb08f8225a7fd7c19a3
msgid "The process for Stable Release Updates is just the same as the process for security bugs except you should subscribe ``ubuntu-sru`` to the bug."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:133
# 6aebe080f961401fb0bc4b10e4741e96
msgid "The update will go into the ``proposed`` archive (for example ``lucid-proposed``) where it will need to be checked that it fixes the problem and does not introduce new problems.  After a week without reported problems it can be moved to ``updates``."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:138
# 7f31600d349a40d190a854507af04643
msgid "See the `Stable Release Updates wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:3
# b8e7226bce7340789a3dad41b9d396cc
msgid "Traditional Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:5
# 7985e00a45e348a6944918ce9d54a2a1
msgid "The majority of this guide deals with :doc:`Ubuntu Distributed Development <./udd-intro>` (UDD) which utilizes the distributed version control system (DVCS) Bazaar for :ref:`retrieving package sources <branching>` and submitting fixes with :ref:`merge proposals. <merge-proposal>` This article will discuss what we will call traditional packaging methods for lack of a better word. Before Bazaar was adopted for Ubuntu development, these were the typical methods for contributing to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:13
# 40156597ac08466b9625891d0c4c7b11
msgid "In some cases, you may need to use these tools instead of UDD. So it is good to be familiar with them. Before you begin, you should already have read the article :doc:`Getting Set Up. <./getting-set-up>`"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:18
#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:3
# 72bfc5e053f440fd958438f1d25ecd03
# fa9d683e34c342c1befd2a3324df70a3
msgid "Getting the Source"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:20
# 6abd87e35aff49ab8dda9744e271c848
msgid "In order to get a source package, you can simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:24
# f40ce0f6423d4e45aeb60b25a3579733
msgid "This method has some draw backs though. It downloads the version of the source that is available on **your system.** You are likely running the current stable release, but you want to contribute your change against the package in the development release. Luckily, the ``ubuntu-dev-tools`` package provides a helper script::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:32
# 4c86bb41ae8f4534933dcc71643e8f4f
msgid "By default, the  latest version in the development release will be downloaded. You can also specify a version or Ubuntu release like::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:37
# 23298303e27a4bb0ab6349c7af6b5f8e
msgid "to pull the source from the ``precise`` release, or::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:41
# 1004c2b399e64eaa9e896648a32fab5f
msgid "to download version ``1.0-1ubuntu1`` of the package. For more information on the command, see ``man pull-lp-source``."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:44
# 95b5918727f6467697e84c1e25cba096
msgid "For our example, let's pretend we got a bug report saying that \"colour\" in the description of ``xicc`` should be \"color,\" and we want to fix it. *(Note: This is just an example of something to change and not really a bug.)* To get the source, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:52
# 385782a1d5414a199b42cf505693ca72
msgid "Creating a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:54
# b4ac518861684da297f2a36d3b695300
msgid "A ``debdiff`` shows the difference between two Debian packages. The name of the command used to generate one is also ``debdiff``. It is part of the ``devscripts`` package. See ``man debdiff`` for all the details. To compare two source packages, pass the two ``dsc`` files as arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:61
# 05351fe103404ceeb411c865c831fe9b
msgid "To continue with our example, let's edit the ``debian/control`` and \"fix\" our \"bug\"::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:67
# 2ffe4552ffbf4aa3ae8e28cee5fc7d8a
msgid "We also must adhere to the `Debian Maintainer Field Spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ and edit ``debian/control`` to replace::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:73
# 238b4aa6c60f4efab550a59075494839
msgid "with::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:78
# 2c6d6a0973c84366a102682f2de609f0
msgid "You can use the ``update-maintainer`` tool (in the ``ubuntu-dev-tools`` package) to do that."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:81
# 3bdc8a918ec74ef5b87c2eb581dbac3d
msgid "Remember to document your changes in ``debian/changelog`` using ``dch -i`` and then we can generate a new source package::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:86
# 55c30966212a45079b7d110b3210fb44
msgid "Now we can examine our changes using ``debdiff``::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:91
# 002da94a853b4dffae650ad62bcc8bfa
msgid "To create a patch file that you can send to others or attach to a bug report for sponsorship, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:98
# f1f40491ac6347609c8b371dc833049a
msgid "Applying a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:100
# 913060216e754ffca2dea809d131e4e0
msgid "In order to apply a debdiff, first make sure you have the source code of the version that it was created against::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:105
# 5c15cac00c6946a7946c4cb7c4b8d794
msgid "Then in a terminal, change the to the directory where the source was uncompressed::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:110
# 4022351a31224373af9d2cd5bcfefe81
msgid "A debdiff is just like a normal patch file. Apply it as usual with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:6
# a90fdc58687342239e4674661b160492
msgid "Source package URLs"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:8
# 9f4a0e9fbd8144a6a7ee197e39c28c1c
msgid "Bazaar provides some very nice shortcuts for accessing Launchpad's source branches of packages in both Ubuntu and Debian."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:11
# addacecd874e4aadafdd6728910cc11e
msgid "To refer to source branches use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:15
# a39505695fd44e078ab85038b830e507
msgid "where *package* refers to the package name you're interested in.  This URL refers to the package in the current development version of Ubuntu.  To refer to the branch of Tomboy in the development version, you would use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:21
# 83301201c913466cb77c49468f48d80f
msgid "To refer to the version of a source package in an older release of Ubuntu, just prefix the package name with the release's code name.  E.g. to refer to Tomboy's source package in Maverick_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:27
# 1ffa266c495444f7bab88dcbfb071507
msgid "Since they are unique, you can also abbreviate the distro-series name::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:31
# 0d4dbfaf23014da38ecaebad08b596f8
msgid "You can use a similar scheme to access the source branches in Debian, although there are no shortcuts for the Debian distro-series names.  To access the Tomboy branch in the current development series for Debian use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:37
# ddf4f64c30754e70b0ae8d0eef1a52ab
msgid "and to access Tomboy in Debian Lenny_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:48
# 2fcf9d72f16842c9904f6094a77ce65a
msgid "Getting the source"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:50
# 83ef1655d6e84dd7b23a282b542fdcae
msgid "Every source package in Ubuntu has an associated source branch on Launchpad. These source branches are updated automatically by Launchpad, although the process is not currently foolproof."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:54
# 7430ca1fd9624b22ad776a4deeea8052
msgid "There are a couple of things that we do first in order to make the workflow more efficient later.  Once you are used to the process you will learn when it makes sense to skip these steps."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:62
# 7062fe95c06c4c958ff25047228c9e99
msgid "Creating a shared repository"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:64
# e3606e2e0b17405baac299a93708c2dd
msgid "Say that you want to work on the Tomboy package, and you've verified that the source package is named ``tomboy``.  Before actually branching the code for Tomboy, create a shared repository to hold the branches for this package.  The shared repository will make future work much more efficient."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:70
# a50c3c67edba4499b8ec7f481214d9c2
msgid "Do this using the `bzr init-repo` command, passing it the directory name we would like to use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:75
# e978774ccaf64962a5c34a3a52ef9658
msgid "You will see that a `tomboy` directory is created in your current working area.  Change to this new directory for the rest of your work::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:82
# 4ec1e480b1124dbdb174a278a3731998
msgid "Getting the trunk branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:84
# 7586d5560da544abbe67d7708bb0fded
msgid "We use the `bzr branch` command to create a local branch of the package. We'll name the target directory `tomboy.dev` just to keep things easy to remember::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:90
# 163130c128a04b60b25888c0de905de5
msgid "The tomboy.dev directory represents the version of Tomboy in the development version of Ubuntu, and you can always ``cd`` into this directory and do a `bzr pull` to get any future updates."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:97
# 8233c45b5bd14224b830240e331ff063
msgid "Ensuring the version is up to date"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:99
# f608327d56824a9d902cbe144408c504
msgid "When you do your ``bzr branch`` you will get a message telling you if the packaging branch is up to date.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:107
# bf8fcad5b4504c93b482959933b913ba
msgid "Occasionally the importer fails and packaging branches do not match what is in the archive.  A message saying::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:112
# 5aa7c80f9fb641fa8d18f3397c33c93f
msgid "means the importer has failed.  You can find out why on http://package-import.ubuntu.com/status/ and `file a bug on the UDD project`_ to get the issue resolved."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:118
# 55b98c5f1dc340ee87a6b4e6be9b9d76
msgid "Upstream Tar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:120
# 31a5c7f7e0d344cd98e43366248df439
msgid "You can get the upstream tar by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:124
# 002f5f722b574b5fbb5807b94e39e9d4
msgid "This will try a number of methods to get the upstream tar, firstly by recreating it from the ``upstream-x.y`` tag in the bzr archive, then by downloading from the Ubuntu archive, lastly by running ``debian/rules get-orig-source``. The upstream tar will also be recreated when using bzr to build the package::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:132
# 0c403def77494f0eb28e7f4c3a6d781e
msgid "The `builddeb` plugin has several `configuration options`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:136
# 8b9eb8905aae4dde883b0654760a749a
msgid "Getting a branch for a particular release"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:138
# 3664a2e5dc0c43e3a164651dfbafeebf
msgid "When you want to do something like a `stable release update`_ (SRU), or you just want to examine the code in an old release, you'll want to grab the branch corresponding to a particular Ubuntu release.  For example, to get the Tomboy package for Maverick do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:147
# 19d821d38e234ddcbc9841b6eb4a8f93
msgid "Importing a Debian source package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:149
# a2cbeb606daf41eabb51e461f273a639
msgid "If the package you want to work on is available in Debian but not Ubuntu, it's still easy to import the code to a local bzr branch for development.  Let's say you want to import the `newpackage` source package.  We'll start by creating a shared repository as normal, but we also have to create a working tree to which the source package will be imported (remember to cd out of the `tomboy` directory created above)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:162
# 87c8e37725f54ef987c6f68cc98a50a4
msgid "As you can see, we just need to provide the remote location of the dsc file, and Bazaar will do the rest.  You've now got a Bazaar source branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:3
# 98d62f7981674160a25a0c2ff9c53d3c
msgid "Ubuntu Distributed Development — Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:5
# affd9d93704a45d79fd6b284d066d782
msgid "This guide focuses on packaging using the *Ubuntu Distributed Development* (UDD) method."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:8
# f77f49a6ccf849539e8011ec1d0bb955
msgid "*Ubuntu Distributed Development* (UDD) is a new technique for developing Ubuntu packages that uses tools, processes, and workflows similar to generic distributed version control system (DVCS) based software development.  The DVCS used for UDD is Bazaar_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:14
# 4e85de5b54f941c7aa4ac1c7ce2fa19f
msgid "Traditional Packaging Limitations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:16
# 83b2cd947b544699a40644d34a944016
msgid "Traditionally Ubuntu packages have been kept in tar archive files.  A traditional source package is made up of the upstream source tar, a \"debian\" tar (or compressed diff file for older packages) containing the packaging and a .dsc meta-data file.  To see a traditional package run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:23
# ef9ba614c0b546e29b3855bb3259581c
msgid "This will download the upstream source ``kdetoys_4.6.5.orig.tar.bz2``, the packaging ``kdetoys_4.6.5-0ubuntu1.debian.tar.gz`` and the meta-data ``kdetoys_4.6.5-0ubuntu1~ppa1.dsc``.  Assuming you have dpkg-dev installed it will extract these and give you the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:28
# 295974834a12405889cbb9ad1696d5f3
msgid "Traditional packaging would edit these files and upload.  However this gives limited opportunity to collaborate with other developers, changes have to be passed around as diff files with no central way to track them and two developers can not make changes at the same time.  So most teams have moved to putting their packaging in a revision control system.  This makes it easier for several developers to work on a package together.  However there is no direct connection between the revision control system and the archive packages so the two must be manually kept in sync.  Since each team works in its own revision control system a prospective developer must first work out where that is and how to get the packaging before they can work on the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:40
# 1466cafd72e249779bf85e7985378b3c
msgid "Ubuntu Distributed Development"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:42
# 27b1916043874fd3ae580fbeaad2ed64
msgid "With Ubuntu Distributed Development all packages in the Ubuntu (and Debian) archive are automatically imported into Bazaar branches on our code hosting site Launchpad.  Changes can be made directly to these branches in incremental steps and by anyone with commit access.  Changes can also be made in forked branches and merged back in with Merge Proposals when they are large enough to need review or if they are by someone without direct commit access."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:49
# eeae6c5703514da086c6106531352fd4
msgid "UDD branches are all in a standard location, so doing a checkout is easy::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:53
# 749ff4357a0b45ebb55e30fb92a6f516
msgid "The merge history includes two separate branches, one for the upstream source and one which adds the ``debian/`` packaging directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:59
# bde8c78ed79a49b18f0b79788e803521
msgid "(This command uses *qbzr* for a GUI, run ``log`` instead of ``qlog`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:64
# 84a4747007934fa8be478dbc3e0edb2a
msgid "This UDD branch of *kdetoys* shows the full packaging for each version uploaded to Ubuntu with grey circles and the upstream source versions with green circles.  Versions are tagged with either the version in Ubuntu such as ``4:4.2.29-0ubuntu1`` or for the upstream branch with the upstream version ``upstream-4.2.96``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:70
# a50767607e394809a4a1b40fa91543de
msgid "Many Ubuntu packages are based on the packages in Debian, UDD also imports the Debian package into our branches.  In the *kdetoys* branch above the Debian versions from *unstable* are from the merge with blue circles while those from *Debian experimental* are from the merge with yellow circles.  Debian releases are tagged with their version number, e.g., ``4:4.2.2-1``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:76
# 5ebb33a30b1c4bbf8d87ba1689564a79
msgid "So from a UDD branch you can see the complete history of changes to the package and compare any two versions.  For example, to see the changes between version 4.2.2 in Debian and the 4.2.2 in Ubuntu use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:82
# 937534b40b8f48b7b49885b3664817c4
msgid "(This command uses *qbzr* for a GUI, run ``diff`` instead of ``qdiff`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:87
# e417c6c26e0a4006a133ee14689115db
msgid "From this we can clearly see what has changed in Ubuntu compared to Debian, very handy."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:91
# a6b0a73c6d9b4f268683ad93d9c7bbfd
msgid "Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:93
# 83209fae586e4384bafd310c1dd7e8c7
msgid "UDD branches use Bazaar, a distributed revision control system intended to be easy to use for those familiar with popular systems such as Subversion while offering the power of Git."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:97
# bb33fbc8fef847c68ff836209bd597dd
msgid "To do packaging with UDD you will need to know the basics of how to use Bazaar to manage files.  For an introduction to Bazaar see the `Bazaar Five Minute Tutorial <http://doc.bazaar.canonical.com/bzr.dev/en/mini-tutorial/index.html>`_ and the `Bazaar Users Guide <http://doc.bazaar.canonical.com/bzr.dev/en/user-guide/index.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:105
# a2005aaf6ee34b13b6ec0dd31430b0e1
msgid "Limitations of UDD"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:107
# bc29c3b5832a4a99b38825f0ea1fae55
msgid "Ubuntu Distributed Development is a new method for working with Ubuntu packages.  It currently has some notable limitations:"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:110
# 4eb68e6595a54e82a1daf1339c9ef9a7
msgid "Doing a full branch with history can take a lot of time and network resources.  You may find it quicker to do a lightweight checkout ``bzr checkout --lightweight ubuntu:kdetoys`` but this will need a network access for any further bzr operations."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:115
# 35c996830b9e442ea0c91806d7ddb194
msgid "Working with patches is fiddly.  Patches can be seen as a branched revision control system, so we end up with RCS on top of RCS."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:118
# d0d047cf968e4999aca9bb52707f3abd
msgid "There is no way to build directly from branches.  You need to create a source package and upload that."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:121
# 46ddaf08fdd04d288a17934e807da9fb
msgid "Some packages have not been successfully imported into UDD branches.  Recent versions of Bazaar will automatically notify you when this is the case. You can also check the `status of the package importer`_ manually before working on a branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:126
# f9816bc9a16e42e6a5414b446e74e5c0
msgid "All of the above are being worked on and UDD is expected to become the main way to work on Ubuntu packages soon.  However currently most teams within Ubuntu do not yet work with UDD branches for their  development.  However because UDD branches are the same as the packages in the  archive any team should be able to accept merges against them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:3
# d882bc9c246e4e858008d8e6f5f852b1
msgid "Getting The Latest"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:5
# 7e5bb094eee047549b6a00241694eb28
msgid "If someone else has landed changes on a package, you will want to pull those changes in your own copies of the package branches."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:10
# b4a9223cc5dd4201b939d42d3050c9b0
msgid "Updating your main branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:12
# 9956eadbf96247c09103c89d3c633524
msgid "Updating your copy of a branch that corresponds to the package in a particular release is very simple, simply use `bzr pull` from the appropriate directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:18
# b4fa41f80e784d9b94dc50c19bf49f31
msgid "This works wherever you have a checkout of a branch, so it will work for things like branches of `maverick`, `hardy-proposed`, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:23
# a6efb61c7cd343809116a9262c46b3d2
msgid "Getting the latest in to your working branches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:25
# ad58951f1af34c24ad84df4491de1e91
msgid "Once you have updated your copy of a distroseries branch, then you may want to merge this in to your working branches as well, so that they are based on the latest code."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:29
# 2c651dfd976a425f872af432c130d521
msgid "You don't have to do this all the time though.  You can work on slightly older code with no problems.  The disadvantage would come if you were working on some code that someone else changed.  If you are not working on the latest version then your changes may not be correct, and may even produce conflicts."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:34
# 16a9c1b39f9549aba21a85d54c21ca11
msgid "The merge does have to be done at some point though.  The longer it is left, the harder may be, so doing it regularly should keep each merge simple.  Even if there are many merges the total effort would hopefully be less."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:38
# a963a8804697407f8eec87cdbb925d0f
msgid "To merge the changes you just need to use ``bzr merge``, but you must have committed your current work first::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:44
# b0e63d1786f2424bb6f2bda0909a7633
msgid "Any conflicts will be reported, and you can fix them up.  To review the changes that you just merged use ``bzr diff``.  To undo the merge use ``bzr revert``.  Once you are happy with the changes then use ``bzr commit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:50
# 24d45ed4b31546a783b76323b0728cf7
msgid "Referring to versions of a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:52
# a1966a6b70f24132ae8884b9f8bc70bb
msgid "You will often think in terms of versions of a package, rather than the underlying Bazaar revision numbers.  `bzr-builddeb` provides a revision specifier that makes this convenient.  Any command that takes a ``-r`` argument to specify a revision or revision range will work with this specifier, e.g. ``bzr log``, ``bzr diff``, and so on.  To view the versions of a package, use the ``package:`` specifier::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:61
# ad15067288e043f18556c0cb4fe43c73
msgid "This shows you the difference between package version 0.1-1 and 0.1-2."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:3
# 0026c50e060c4899a43c1ba2cbf16c96
msgid "Merging — Updating from Debian and Upstream"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:5
# ae521079c77f4cc5b65a683e0960b9b6
msgid "Merging is one of the strengths of Bazaar, and something we do often in Ubuntu development.  Updates can be merged from Debian, from a new upstream release, and from other Ubuntu developers.  Doing it in Bazaar is pretty simple, and all based around the ``bzr merge`` command [#]_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:10
# a064903a42da41b3bbe8f4c8ee73d6df
msgid "While you are in any branch's working directory, you can merge in a branch from a different location.  First check that you have no uncommitted changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:15
# fb6afbcab1964fe3996c089f640bb655
msgid "If that reports anything then you will either have to commit the changes, revert them, or shelve them to come back to later."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:20
# d5916a06f37a4517acc4f1543b3caa1c
msgid "Merging from Debian"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:22
# a7cd8976c358401f8427c3515e6b5be1
msgid "Next run ``bzr merge`` passing the URL of the branch to merge from.  For example, to merge from the version of the package in Debian Squeeze_ run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:27
# 19e318d0e079404d9ec238efadd84f88
msgid "This will merge the changes since the last merge point and leave you with changes to review.  This may cause some conflicts.  You can see everything that the ``merge`` command did by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:34
# 60fa7e3a2f0247ed98ce13dd5baa386e
msgid "If conflicts are reported then you need to edit those files to make them look how they should, removing the *conflict markers*.  Once you have done this, run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:41
# 07d8db37435a4f099a4cef032e3c7875
msgid "This will resolve any conflicted files that you fixed, and then tell you what else you have to deal with."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:44
# 888fb1b465244368bce7b4a3670601a6
msgid "Once any conflicts are resolved, and you have made any other changes that you need, you will add a new changelog entry, and commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:50
# 11d112d8f2584984877041d623aea53a
msgid "as described earlier."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:52
# 1149f5668214466e970dd07f9064ed15
msgid "However, before you commit, it is always a good thing to check all the Ubuntu changes by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:57
# 0d4b9caeb41b4428be91a4d4e27841b2
msgid "which will show the differences between the Debian (0.6.10-5) and Ubuntu versions (0.6.10-5ubuntu1).  In similar way you can compare to any other versions.  To see all available versions run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:63
# 7cf3561fe8f04f218f3258a7b552ed9e
msgid "After testing and committing the merge, you will need to seek sponsorship or upload to the archive in the normal way."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:66
# e20a58b051174988810db14baee00162
msgid "If you are going to build the source package from this merged branch, you would use the ``-S`` option to the ``bd`` command.  One other thing you'll want to consider is also using the ``--package-merge`` option.  This will add the appropriate ``-v`` and ``-sa`` options to the source package so that all the changelog entries since the last Ubuntu change will be included in your ``_source.changes`` file.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:77
# 6449c44c0a21482f914cad478e087f11
msgid "Merging a new upstream version"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:79
# cfe52deda01b45308418c6878f641248
msgid "When upstream releases a new version (or you want to package a snapshot), you have to merge a tarball into your branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:82
# 45e61c344ce6454cb6217a699622febd
msgid "This is done using the ``bzr merge-upstream`` command.  If your package has a valid ``debian/watch`` file, from inside the branch that you want to merge to, just type this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:88
# eede75bad8df4ce0a235c97b2aad5180
msgid "This will download the tarball and merge it into your branch, automatically adding a ``debian/changelog`` entry for you.  ``bzr-builddeb`` looks at the ``debian/watch`` file for the upstream tarball location."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:92
# 2d2b30c4c97e4a7eb39ae635a8e52be6
msgid "If you do *not* have a ``debian/watch`` file, you'll need to specify the location of the upstream tarball, and the version manually::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:97
# fb14cc3629a540ef8dd9f07e05d41706
msgid "The ``--version`` option is used to specify the upstream version that is being merged in, as the command isn't able to infer that (yet)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:100
# c96d6615c25e4523a6d18d7f2af784e2
msgid "The last parameter is the location of the tarball that you are upgrading to; this can either be a local filesystem path, or a http, ftp, sftp, etc. URI as shown.  The command will automatically download the tarball for you.  The tarball will be renamed appropriately and, if required, converted to ``.gz``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:105
# 52c1679313414d7ba67422d14def73dd
msgid "The `merge-upstream` command will either tell you that it completed successfully, or that there were conflicts.  Either way you will be able to review the changes before committing as normal."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:109
# 6711575b5f5f451e9b4e127080baf38d
msgid "If you are merging an upstream release into an existing Bazaar branch that has not previously used the UDD layout, ``bzr merge-upstream`` will fail with an error that the tag for the previous upstream version is not available; the merge can't be completed without knowing what base version to merge against. To work around this, create a tag in your existing repository for the last upstream version present there; e.g., if the last Ubuntu release was *1.1-0ubuntu3*, create the tag *upstream-1.1* pointing to the bzr revision you want to use as the tip of the upstream branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:122
# 11a9b1ea14bd4fb78aedb854170015c1
msgid "You will need newer versions of ``bzr`` and the ``bzr-builddeb`` for the ``merge`` command to work.  Use the versions from Ubuntu 12.04 (Precise) or the development versions from the ``bzr`` PPA.  Specifically, you need ``bzr`` version 2.5 beta 5 or newer, and ``bzr-builddeb`` version 2.8.1 or newer.  For older versions, use the ``bzr merge-package`` command instead."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:3
# cf454d0786c747e2a4545fceec697720
msgid "Working with Patches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:5
# ede3c1dc93dd4ad99a30e5c0fafe048e
msgid "Many existing packages that have changes from upstream express those changes using a patch system, of which there are several to choose from.  Usually, when you make an additional change to a package, you'll want to add a patch file to the patch system being used, rather than editing the source code in place.  Note however that it is considered bad practice to add a patch system to a package that does not already have one.  In that case, either coordinate with the Debian maintainer, or edit the files in place.  You can find out if your package has a patch system by using the ``what-patch`` command (from the ``ubuntu-dev-tools`` package)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:15
# dc59782a90c54387aabec9c3dd3c80a5
msgid "While Debian has several patch systems, Quilt_ is becoming the most popular. Quilt acts something like a version control system itself, and in the context of UDD, this can be both a good thing and a bad thing.  With Bazaar 2.5 and ``bzr-builddeb`` 2.8.1 (in Ubuntu 12.04 Precise), handling source packages with quilt patches has become much easier."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:21
# 37c742600c404a77bbbc637586d9c2d6
msgid "There are two main tasks where you'll have to be aware of quilt patches, when developing your own patch to the upstream code, and when merging new versions of the package from Debian where either the Debian or Ubuntu (or both) have quilt patches in the source branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:26
# e0f06bc64ad2448b9ff01ecf1cd87945
msgid "Here are some guidelines for working with quilt patches in UDD in these two scenarios.  Some of these techniques are works-in-progress, so you should adapt them to your own workflow, and keep watching for improvements from the Bazaar teams."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:33
# a5f3be4d199b41028ca638fede68a8bf
msgid "Patches are applied in source branches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:35
# eda7a25f80ef4591890ad9b4f0172c9b
msgid "One important thing to keep in mind: all source branches reflect the tree after a ``quilt push -a``.  In other words, when you branch a source branch from Launchpad, you get the tree with all patches applied, ready for you to jump right into hacking.  You do not need to ``quilt push -a`` manually, and in fact, you'll get a tree with lots of distracting modifications if you push or pop all the changes.  Or to put it another way, once you have a branch, jump right in!"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:45
# 12efc2547446457588e42469f5df38f3
msgid "Merging from Debian with quilt patches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:47
# d2a460f360644915a0c66e7ae2aef053
msgid "With newer versions of Bazaar as mentioned above, merging new Debian versions to Ubuntu versions should be quite easy now, even when one or both packages have quilt patches.  Just use ``bzr merge`` as you normally would.  Under the hood, Bazaar will first un-apply all the patches, then do the merge, then if there are no conflicts, it will re-apply the patches leaving you again with a source branch in the ``quilt push -a`` state."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:54
# 767cfa2ed65c4054bb6fdd43eba82fb9
msgid "For example, if we want to merge the Debian version of the ``aptitude`` package with the Ubuntu version, we would do something like this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:64
# e3bd69868872495d849628ed5eb38071
msgid "If there are merge conflicts, the quilt patches will remain un-applied so that you can resolve the conflicts more easily.  You would use a combination of bzr and quilt commands to resolve the conflicts, until all the quilt patches are applied again.  Then you're ready to commit, push, and build as you normally would."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:72
# af9de64ce78c44fb8a4b4d4b0e051a4a
msgid "Develop your patch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:74
# b0ddaa46a26c4be6ba7f59d833c44590
msgid "There is a strong preference to fixing packages using a patch system like quilt, rather than modifying the source code directly.  This is because with a patch system, it's easier to communicate those changes to Debian or upstream (where UDD isn't used), and to remove patches when upstream fixes the bug the patch addresses (possibly in a completely different way)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:80
# 7d88480c9ee7425e9a24d06b7c596e2c
msgid "Let's say there's a bug in the ``dbus`` package that you want to fix.  You start the way you normally would with any package in UDD::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:89
# bf012c8e17bd49239747073c746f5b69
msgid "Maybe the bug is pretty simple; there's a typo in the ``README`` file.  Just fix the typo in your favorite editor, then do a ``bzr stat`` to prove that the file has been edited::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:97
# 9e1f13f374f24974a6d193175063fbad
msgid "Now, in order to get this fix into a quilt patch, we need to generate a diff, but we need the resulting patch to have a format that is consumable by quilt. The way to do that is to use the ``--prefix`` (or ``-p``) option to ``bzr diff``::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:104
# 7fa17bbfbb5149bab6555d154043afeb
msgid "What this actually does is to produce a *level 1* diff, which is required by the quilt command we're going to use below.  Normally, ``bzr diff`` produces *level 0* diffs which are more easily read by humans, but this won't work with quilt (despite the implication in the quilt documentation)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:109
# b542f1f9a0b447f1a9898a7ed319dc1c
msgid "The above command generates the patch and stores it in a file one level up from the working tree.  Note that here we're using the ``a`` and ``b`` directory prefixes for the diff, but the actual names don't really matter."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:113
# d5db34047ce94cfc88c7aae0b8a2904b
msgid "Now all you need to do is to import the patch into your quilt patches.  If you named the file above with the same name you want into your quilt stack, then just do this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:120
# 275df7a982334f6cbdf87bc7add9efbb
msgid "You need the last line to inform Bazaar about the new quilt patch file.  You can see that the quilt patch's name is the same as the file name you generated above.  Of course, you can change this by using the ``-P`` option to ``quilt import``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:125
# a6ed4984ccc84a9fa09e3c34d6697b6c
msgid "One important thing to notice is that if you do the commands ``bzr stat`` and a ``quilt applied`` , you'll see that the ``README`` file is still modified, but the ``bug-12345.patch`` is not yet applied.  If you try to apply the newly imported quilt patch (with ``quilt push``), it will fail because you're applying a patch on top of the already patched file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:131
# 93072effb70b4d45981b6a1cc1185c63
msgid "One way around this is to revert the change to ``README`` before doing the ``quilt push``.  However, if you think you may want to continue to develop the patch, and thus do not want to throw away your in-tree changes, use ``bzr shelve`` to save the change in the working tree to the side, then do ``quilt push``.  Either way, once you've pushed your top quilt patch, you can just edit the tree in place, and do ``quilt refresh`` commands to update the top quilt patch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:141
# c1b4e6eb67ec43e8ac60ca3546b0bd37
msgid "Gotchas"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:143
# 99bdf3321f1c474aaca91d509f1b23b6
msgid "One thing to keep in mind is that quilt uses a hidden ``.pc`` directory to record its status.  This directory is under version control in all source branches.  *Watch out* for changes to the ``.pc`` directory that are unrelated (or more accurately, uninteresting) to your patch.  This can happen because the UDD source branch importer `currently includes any existing .pc directory`_ in the imported branch.  This can cause conflicts, or other unwanted or unknown changes because you've essentially got two conflicting version control systems competing for the same thing (i.e. bzr and quilt). For now, the best recommendation is to revert any changes to the ``.pc`` directory in your branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:156
# 9931cf0d9f1c4da0beb9a5c37417d359
msgid "edit-patch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:158
# b8a8464b40f5430ba9176a4c1ac750ea
msgid "``edit-patch`` is a nice little wrapper script that comes as part of the ``ubuntu-dev-tools`` package.  It pretty much hides the nasty details of dealing with the patch system specifically.  For example, while the above works well if your package is using quilt already, you'll have to adjust the workflow, perhaps significantly, to work with `a different patch system`_.  In theory ``edit-patch`` should solve this, but there are currently two blockers."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:165
# 1340ac3946d64efb865c2b286664aef9
msgid "By default, ``bzr diff`` produces a ``-p0`` patch, but ``edit-patch`` defers to the underlying patch system's default.  For quilt, this is ``-p1``.  ``quilt import`` takes a ``-p`` argument to specify the prefix level, but this isn't yet exposed in ``edit-patch``.  If you use the ``--prefix`` argument to the ``bzr diff`` command as shown above, you should be okay."
msgstr ""

#: ../ubuntu-packaging-guide/udd-patchsys.rst:171
# bda8f4c616424ce6ae0cf406aabe3231
msgid "By default, ``edit-patch`` requires a path to an existing patch file, but it's more convenient to pipe the output of ``bzr diff`` to the stdin of ``edit-patch``, as shown above.  The alternative would be to save the diff in a temporary file, and then point ``edit-patch`` to this temporary file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:3
# 98c16f9a5e5d4970a89cf242069047ff
msgid "Seeking Review and Sponsorship"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:5
# e7f52169c6cb41189b65b1cb18550ab2
msgid "One of the biggest advantages to using the UDD workflow is to improve quality by seeking review of changes by your peers.  This is true whether or not you have upload rights yourself.  Of course, if you don't have upload rights, you will need to seek sponsorship."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:10
# 4cd1cd4c57e6480587c44865570664aa
msgid "Once you are happy with your fix, and have a branch ready to go, the following steps can be used to publish your branch on Launchpad, link it to the bug issue, and create a *merge proposal* for others to review, and sponsors to upload."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:19
# bc3ad587269d4802b5def051d6dc4979
msgid "Pushing to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:21
# ba27e98ae4774b719ef0da0f2d7e1c47
msgid "We previously showed you how to :ref:`associate your branch to the bug <link-via-changelog>` using ``dch`` and ``bzr commit``.  However, the branch and bug don't actually get linked until you push the branch to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:25
# 8e05f07b7b1f4bcf803f9c1ffddbf04b
msgid "It is not critical to have a link to a bug for every change you make, but if you are fixing reported bugs then linking to them will be useful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:28
# e90a17d52bfc4dbb8bcb6dc224084aa8
msgid "The general form of the URL you should push your branch to is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:32
# 50689cdcf1ec40f1ad5004ae21c427a4
msgid "For example, to push your fix for bug 12345 in the Tomboy package for Natty, you'd use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:37
# ca003b3271364cc383ffe8ae1f8f02c9
msgid "The last component of the path is arbitrary; it's up to you to pick something meaningful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:40
# 01b05d9a0af44d03a0fdc337edfb9dd2
msgid "However, this usually isn't enough to get Ubuntu developers to review and sponsor your change.  You should next submit a *merge proposal*."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:43
# d2faa81ab1964b34b76385864b97c27a
msgid "To do this open the bug page in a browser, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:47
# 8fed9bd7dc97484a86691e6eb2f42da1
msgid "If that fails, then you can use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:51
# 02d83794102e4ae580d0264ef97cd44a
msgid "where most of the URL matches what you used for `bzr push`.  On this page, you'll see a link that says *Propose for merging into another branch*.  Type in an explanation of your change in the *Initial Comment* box.  Lastly, click *Propose Merge* to complete the process."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:56
# 59b636a31d93492e91be6aa30c686857
msgid "Merge proposals to package source branches will automatically subscribe the `~ubuntu-branches` team, which should be enough to reach an Ubuntu developer who can review and sponsor your package change."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:62
# a8090665433c4c628809c3f4b5819181
msgid "Generating a debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:64
# 70a225bba31d4d2fbbd1d203934abf0a
msgid "As noted above, some sponsors still prefer reviewing a *debdiff* attached to bug reports instead of a merge proposal.  If you're requested to include a debdiff, you can generate one like this (from inside your `bug-12345` branch)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:71
# f817417a7a8c420681f6955f5e58dc82
msgid "Another way is to is to open the merge proposal and download the diff."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:73
# 016be3f1f8824f63a8e6711abdeb22eb
msgid "You should ensure that diff has the changes you expect, no more and no less. Name the diff appropriately, e.g. ``foobar-12345.debdiff`` and attach it to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:79
# a76ae0b65d9244118aa1e1dbfd6ae9e8
msgid "Dealing with feedback from sponsors"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:81
# f609037c8de94d08b516f8509e3c2189
msgid "If a sponsor reviews your branch and asks you to change something, you can do this fairly easily.  Simply go to the branch that you were working in before, make the changes requested, and then commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:87
# 29b4a2148f564f7fa6a64807d60e6e66
msgid "Now when you push your branch to Launchpad, Bazaar will remembered where you pushed to, and will update the branch on Launchpad with your latest commits. All you need to do is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:93
# 835fb4784134419ca5a29f839a614962
msgid "You can then reply to the merge proposal review email explaining what you changed, and asking for re-review, or you can reply on the merge proposal page in Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:97
# a529f8dfbbf945da94d07f873c66fc22
msgid "Note that if you are sponsored via a debdiff attached to a bug report you need to manually update by generating a new diff and attaching that to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:103
# c25f31be74684300936966ce66509c25
msgid "Expectations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:105
# 710fdfbff36944389ae352d14fc12856
msgid "The Ubuntu developers have set up a schedule of \"patch pilots\", who regularly review the sponsoring queue and give feedback on branches and patches. Even though this measure has been put in place it might still take several days until you hear back. This depends on how busy everybody is, if the development release is currently frozen, or other factors."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:111
# 1992c74eea644dc198bd3b64cf1be5d8
msgid "If you haven't heard back in a while, feel free to join `#ubuntu-devel` on `irc.freenode.net` and find out if somebody can help you there."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:114
# 89fa1e613c4d4630907e1fe98592499d
msgid "For more information on the generall sponsorship process, review the documentation on our wiki as well: https://wiki.ubuntu.com/SponsorshipProcess"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:3
# fc7537e5788149399ebd624a0ed86c5c
msgid "Uploading a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:5
# 61d44b0a27ab41cab0789e91d0360ba0
msgid "Once your merge proposal is reviewed and approved, you will want to upload your package, either to the archive (if you have permission) or to your `Personal Package Archive`_ (PPA).  You might also want to do an upload if you are sponsoring someone else's changes."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:12
# f9c3fcb8956c44ae8cbc1cf44ad5c326
msgid "Uploading a change made by you"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:14
# 80560b5164cd474aa6f9f347aae2855c
msgid "When you have a branch with a change that you would like to upload you need to get that change back on to the main source branch, build a source package, and then upload it."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:18
# 3248c86ff9ac4351ad87f3790e81aba3
msgid "First, you need to check that you have the latest version of the package in your checkout of the development package trunk::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:24
# 7a644bb57ac647de88cecdf1d538138b
msgid "This pulls in any changes that may have been committed while you were working on your fix.  From here, you have several options.  If the changes on the trunk are large and you feel should be tested along with your change you can merge them into your bug fix branch and test there.  If not, then you can carry on merging your bug fix branch into the development trunk branch.  As of bzr 2.5 and bzr-builddeb 2.8.1, this works with just the standard ``merge`` command::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:34
# 9c6acf1a6ad7478088f8d08fa0c380b2
msgid "For older versions of bzr, you can use the ``merge-package`` command instead::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:38
# 2c0ca41e764d43bda365b37b140f3842
msgid "This will merge the two trees, possibly producing conflicts, which you'll need to resolve manually."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:41
# 92cb3c91b6e64805bd2322ff88c2e3b6
msgid "Next you should make sure the ``debian/changelog`` is as you would like, with the correct distribution, version number, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:44
# 28dd90f19b7f4ac3bdf977d5d2031007
msgid "Once that is done you should review the change you are about to commit with ``bzr diff``.  This should show you the same changes as a debdiff would before you upload the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:48
# 08e0e623b1fb4ebfb3f86b3d90df951c
msgid "The next step is to build and test the modified source package as you normally would::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:53
# e5c96ad162e14e1fb0252f967d4e0964
msgid "When you're finally happy with your branch, make sure you've committed all your changes, then tag the branch with the changelog's version number.  The ``bzr tag`` command will do this for you automatically when given no arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:60
# a092eeacf8f845dfa723bd1953ead2e4
msgid "This tag will tell the package importer that what is in the Bazaar branch is the same as in the archive."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:63
# 6c739bff60f542338bd4923ef9855ac9
msgid "Now you can push the changes back to Launchpad::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:67
# c2dd5e0027cb4500aed09d34cfe2666e
msgid "(Change the destination if you are uploading an SRU or similar.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:69
# dc9918896ee544efa2e0b99ce5cd32e8
msgid "You need one last step to get your changes uploaded into Ubuntu or your PPA; you need to ``dput`` the source package to the appropriate location.  For example, if you want to upload your changes to your PPA, you'd do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:75
# 093521ec3a664b1ab2bd90b92ee4a00e
msgid "or, if you have permission to upload to the primary archive::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:79
# 4225b6bed6e64afea8e7af00cab62ea4
msgid "You are now free to delete your feature branch, as it is merged, and can be re-downloaded from Launchpad if needed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:84
# 68506df1b97747a6bdb79eb56438a38e
msgid "Sponsoring a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:86
# 7fa0fad550e54982b3ae70cd62a023f5
msgid "Sponsoring someone else's change is just like the above procedure, but instead of merging from a branch you created, you merge from the branch in the merge proposal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:92
# 9acb2f513355448d89f15740a1ffefd3
msgid "If there are lots of merge conflicts you would probably want to ask the contributor to fix them up.  See the next section to learn how to cancel a pending merge."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:96
# 4ad42213f2464882a701a41359bb2f96
msgid "But if the changes look good, commit and then follow the rest of the uploading process::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:103
# fc504d4e67b44d8c8e1000bd17ff8822
msgid "Canceling an upload"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:105
# a5b037b13a174e748d10bdb76e27fc55
msgid "At any time before you `dput` the source package you can decide to cancel an upload and revert the changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:110
# bf13fe3f9f8e4bf39b84ff38f1e0d14f
msgid "You can do this if you notice something needs more work, or if you would like to ask the contributor to fix up conflicts when sponsoring something."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:115
# 401fbcf6e24b4ee2be0ec7ab257e78df
msgid "Sponsoring something and making your own changes"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:117
# 01cab2242297461795b712eabce5107a
msgid "If you are going to sponsor someone's work, but you would like to roll it up with some changes of your own then you can merge their work in to a separate branch first."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:121
# 2225d5bddfe34fb09046bd210f7a4b06
msgid "If you already have a branch where you are working on the package and you would like to include their changes, then simply run the ``bzr merge`` from that branch, instead of the checkout of the development package.  You can then make the changes and commit, and then carry on with your changes to the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:127
# 23e52db35bec4ceb8a98cc5466fe0b4f
msgid "If you don't have an existing branch, but you know you would like to make changes based on what the contributor provides then you should start by grabbing their branch::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:133
# 800418162af64afc9fdcf905055bb551
msgid "then work in this new branch, and then merge it in to the main one and upload as if it was your own work.  The contributor will still be mentioned in the changelog, and Bazaar will correctly attribute the changes they made to them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:3
# e77d940397834c93b440e28718e177bd
msgid "Working on a Package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:5
# bed843c6603644549dd99b0dbbc92b82
msgid "Once you have the source package branch in a shared repository, you'll want to create additional branches for the fixes or other work you plan to do.  You'll want to base your branch off the package source branch for the distro release that you plan to upload to.  Usually this is the current development release, but it may be older releases if you're backporting to an SRU for example."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:13
# 24ad9d19993840998a5732f08685fc06
msgid "Branching for a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:15
# 23774c0a324640b89e1e5b6dd86fcd5a
msgid "The first thing to do is to make sure your source package branch is up-to-date.  It will be if you just checked it out, otherwise do this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:21
# 0dcb17b78ef14fe6b0034fd7f112926e
msgid "Any updates to the package that have uploaded since your checkout will now be pulled in.  You do not want to make changes to this branch.  Instead, create a branch that will contain just the changes you're going to make.  Let's say you want to fix bug 12345 for the Tomboy project.  When you're in the shared repository you previously created for Tomboy, you can create your bug fix branch like this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:31
# 845472e39557458582889b4c53523ea5
msgid "Now you can do all my work in the ``bug-12345`` directory.  You make changes there as necessary, committing as you go along.  This is just like doing any kind of software development with Bazaar.  You can make intermediate commits as often as you like, and when your changes are finished, you will use the standard ``dch`` command (from the ``devscripts`` package)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:39
# 087b1ff979be4f32b37a61dd0b587522
msgid "This will drop you in an editor to add an entry to the `debian/changelog` file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:44
# 2f3be1fd424448e7abc56f61e046dccd
msgid "When you added your ``debian/changelog`` entry, you should have included a bug fix tag that indicated which Launchpad bug issue you're fixing.  The format of this textual tag is pretty strict: ``LP: #12345``.  The space between the ``:`` and the ``#`` is required and of course you should use the actual bug number that you're fixing.  Your ``debian/changelog`` entry might look something like::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:57
# 9fcbc75414e34001b0df8c6bb9d87f3b
msgid "Commit with the normal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:61
# 3ea0b321398b47efbd10575eedf8fa40
msgid "A hook in bzr-builddeb will use the debian/changelog text as the commit message and set the tag to mark bug #12345 as fixed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:64
# 0042e190c60c400d9a98b91cf1a263a0
msgid "This only works with bzr-builddeb 2.7.5 and bzr 2.4, for older versions use ``debcommit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:71
# 411e569a1d8d4448b6ce41cf934caa28
msgid "Along the way, you'll want to build your branch so that you can test it to make sure it does actually fix the bug."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:74
# 3eb0868f9ea54679b06995b99222f4e9
msgid "In order to build the package you can use the ``bzr builddeb`` command from the ``bzr-builddeb`` package.  You can build a source package with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:79
# ddedadc4699044ba96db880d69020598
msgid "(``bd`` is an alias for ``builddeb``.)  You can leave the package unsigned by appending ``-- -uc -us`` to the command."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:82
# a45d85ae55cd47268ecd50b91e2ed89f
msgid "It is also possible to use your normal tools, as long as they are able to strip the .bzr directories from the package, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:87
# 0c9609604eef455a8570e994cb22d24a
msgid "If you ever see an error related to trying to build a native package without a tarball, check to see if there is a ``.bzr-builddeb/default.conf`` file erroneously specifying the package as native.  If the changelog version has a dash in it, then it's not a native package, so remove the configuration file. Note that while ``bzr builddeb`` has a ``--native`` switch, it does not have a ``--no-native`` switch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:94
# 8b1f39690cc546d2af055031e22a4877
msgid "Once you've got the source package, you can build it as normal with ``pbuilder-dist`` (or ``pbuilder`` or `sbuild`_)."
msgstr ""

