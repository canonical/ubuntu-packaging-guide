# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2012, Ubuntu Developers
# This file is distributed under the same license as the ubuntu-packaging-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ubuntu-packaging-guide 0.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-11-21 09:26\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:3
# 8af77443ed97433385b6283f69942491
msgid "autopkgtest: Automatic testing for packages"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:5
# b9207ee0c2a84d6d9041569a623cba42
msgid "The `DEP 8 specification`_ defines how automatic testing can very easily be integrated into packages. To integrate a test into a package, all you need to do is:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:9
# 43f1527a9dcc4ac1a8abbc81d06ad113
msgid "add the following to the Source section in ``debian/control``::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:13
# 3fe2d2a117c446f4a8aaaf8fdc19de41
msgid "add a file called ``debian/tests/control`` which specifies the requirements for the testbed,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:15
# 55f74fb01f0c441997b81b25542c8299
msgid "add the tests in ``debian/tests/``."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:19
# 15a1aaf8b0f74837aebf991099226b6d
msgid "Testbed requirements"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:21
# 36cafcdf881f42819cc4b23c89f44476
msgid "In ``debian/tests/control`` you specify what to expect from the testbed. So for example you list all the required packages for the tests, if the testbed gets broken during the build or if ``root`` permissions are required. The `DEP 8 specification`_ lists all available options."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:26
# b7adc3c3bbbd406eb5fa3c4ddbfc470b
msgid "Below we are having a look at the ``glib2.0`` source package. In a very simple case the file would look like this::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:32
# fa124303d8594b60a917bb52eb1c2cc3
msgid "For the test in ``debian/tests/build`` this would ensure that the packages ``libglib2.0-dev`` and ``build-essential`` are installed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:35
# a0fe769b2407463888492b87b105c74e
msgid "You can use ``@`` in the ``Depends`` line to indicate that you want all the packages installed which are built by the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:41
# 18797a9071754fab97dc6b4001407a34
msgid "The actual tests"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:43
# 306f602b0c984614a0c7c2becd89862e
msgid "The accompanying test for the example above might be:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:75
# 732283377f6f48caad64d7796405d52e
msgid "Here a very simple piece of C code is written to a temporary directory. Then this is compiled with system libraries (using flags and library paths as provided by `pkg-config`). Then the compiled binary, which just exercises some parts of core glib functionality, is run."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:80
# b545b04bc79f44eaa2b57fcc5ab44350
msgid "While this test is very small and basic, it tests quite a number of core components on a system. This may help to uncover critical issues early on."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:84
# 6a3211f5fad04f3eaf0f1bace08b00be
msgid "Executing the test"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:86
# 32a3b7c9fc90442e8708f9a359f15512
msgid "The test script can be easily executed on its own, but if you want to make sure that the testbed is properly set up, you might want to use ``adt-run`` from the ``autopkgtest`` package to execute the test. Simply run this command in the source tree::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:95
# 4d0e6fdb9c4941559191ac67ac00b399
msgid "Further examples"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:97
# 8f05cf940ec54a46ae3e716c25fd46cf
msgid "This list is not comprehensive, but might help you get a better idea of how automated tests are implemented and used in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:100
# 0ba5c5b80e904972916c775e9c89b674
msgid "The `libxml2 tests`_ are very similar. They also run a test-build of a simple piece of C code and execute it."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:102
# 2be2045b791b4e5e961fa4b1221fd38e
msgid "The `gtk+3.0 tests`_ also do a compile/link/run check in the \"build\" test. There is an additional \"python3-gi\" test which verifies that the GTK library can also be used through introspection."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:105
# 08662d4c5e104140ae5f0676ec5e5519
msgid "In the `ubiquity tests`_ the upstream test-suite is executed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:106
# 3c56b1e7319840d2858db196e34dcfc6
msgid "The `gvfs tests`_ have comprehensive testing of their functionality and are very interesting because they emulate usage of CDs, Samba, DAV and other bits."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:111
# 96520544a7c64498b1001158eab682af
msgid "Ubuntu infrastructure"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:113
# 153247f8366640d58d6ff157d906d04c
msgid "Packages which have ``autopkgtest`` enabled will have their tests run whenever they get uploaded or any of their reverse-dependencies change. The output of `automatically run autopkgtest tests`_ can be viewed on the web and is regularly updated."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:118
# 624fcdee809c4ad29f693810b3526ee1
msgid "While Debian does not have an automatic testing infrastructure set up yet, they should still be submitted to Debian, as DEP-8 is a Debian specification and Debian developers or users can still manually run the tests."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:122
# 9618a6b93cd444c2bb73f3761b3ac099
msgid "Packages in Debian with a testsuite header will also be automatically added when they are synced to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:126
# 9f7b0f67fdb944c39bae861a58cc5a52
msgid "Getting the test into Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:128
# 6923e3edc65c4bd5ba07d9f7399ccfd0
msgid "The process of submitting an autopkgtest for a package is largely similar to :doc:`fixing a bug in Ubuntu<./fixing-a-bug>`. Essentially you simply:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:131
# 2ffa985467604500b0070825227220a9
msgid "run ``bzr branch ubuntu:<packagename>``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:132
# 9811d24b6ebc4de2bf9690cfd8f71e4e
msgid "edit ``debian/control`` to enable the tests,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:133
# 97d8cb7cd5bc40eaaea60b8e52864153
msgid "add the ``debian/tests`` directory,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:134
# 812c8f406b0c4ced92a7cfbc4ed1ebab
msgid "write the ``debian/tests/control`` based on the `DEP 8 Specification`_,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:135
# a4f6bb2a7cd1475bb263d26815e94921
msgid "add your test case(s) to ``debian/tests``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:136
# 311d0dfe6cea49429742c50811aeefd2
msgid "commit your changes, push them to Launchpad, propose a merge and get it reviewed just like any other improvement in a source package."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:3
# 6a67b138481f487890eea830b8c1211d
msgid "Backporting software updates"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:5
# 838d59bd69a949899df9a8a54f705237
msgid "Sometimes you might want to make new functionality available in a stable release which is not connected to a critical bug fix. For these scenarios you have two options: either you `upload to a PPA <https://help.launchpad.net/Packaging/PPA>`_ or prepare a backport."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:12
# 0f705404bc6340cd920643a56ede7645
msgid "Personal Package Archive (PPA)"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:14
# d3e627b83a3a40faa96be7c31559aefe
msgid "Using a PPA has a number of benefits. It is fairly straight-forward, you don't need approval of anyone, but the downside of it is that your users will have to manually enable it. It is a non-standard software source."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:18
# df9011af544e4e418b488e35221ecd25
msgid "The `PPA documentation on Launchpad`_ is fairly comprehensive and should get you up and running in no time."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:25
# 22dfea1976b44bc3afbea92c0db2b6c7
msgid "Official Ubuntu Backports"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:27
# bf22306718c646ef9ad8e1336fc1a200
msgid "The Backports Project is a means to provide new features to users. Because of the inherent stability risks in backporting packages, users do not get backported packages without some explicit action on their part. This generally makes backports an inappropriate avenue for fixing bugs. If a package in an Ubuntu release has a bug, it should be fixed either through the :doc:`Security Update or the Stable Release Update process<./security-and-stable-release-updates>`, as appropriate."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:35
# 71f5f1eb94b04c6b9c109b939fa4fd87
msgid "Once you determined you want a package to be backported to a stable release, you will need to test-build and test it on the given stable release. ``pbuilder-dist`` (in the ``ubuntu-dev-tools`` package) is a very handy tool to do this easily."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:40
# f74e32d7ddbc4903a7477ef3ee11ee7e
msgid "To report the backport request and get it processed by the Backporters team, you can use the ``requestbackport`` tool (also in the ``ubuntu-dev-tools`` package). It will determine the intermediate releases that package needs to be backported to, list all reverse-dependencies, and file the backporting request.  Also will it include a testing checklist in the bug."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:3
# 2487f65f188c45309a2a6b5e31e459f0
msgid "Using Chroots"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:5
# c4b18da99c2e46c6aba4d44308cb0486
msgid "If you are running one version of Ubuntu but working on packages for another versions you can create the environment of the other version with a ``chroot``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:9
# fadbaba221014b639dd6ebc71797c13d
msgid "A ``chroot`` allows you to have a full filesystem from another distribution which you can work in quite normally.  It avoids the overhead of running a full virtual machine."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:14
# 445b20b2f8714dc6bb8ca0af5afb8195
msgid "Creating a Chroot"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:16
# b97afa22eae543db8519cdcff26a63cc
msgid "Use the command ``debootstrap`` to create a new chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:20
# be99f58bed9d4e53b643f8258a19e7d4
msgid "This will create a directory ``oneiric`` and install a minimal oneiric system into it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:23
# c9f73ab98ac84c58adc5ea797cabac2e
msgid "If your version of ``debootstrap`` does not know about oneiric you can try upgrading to the version in ``backports``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:26
# e1ae5f6d3e8141ebb129faf488b98ec2
msgid "You can then work inside the chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:30
# 05737cb33b0b4e18a06f6bca92ca773d
msgid "Where you can install or remove any package you wish without affecting your main system."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:33
# 4a436463e753456eb1f0430e14a1422c
msgid "You might want to copy your GPG/ssh keys and Bazaar configuration into the chroot so you can access and sign packages directly::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:39
# 637c8e6883aa457b8d170c9713b2dce9
msgid "To stop apt and other programs complaining about missing locales you can install your relevant language pack::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:44
# 55a1445fa3dc45c08547a735d3005ffe
msgid "If you want to run X programs you will need to bind the /tmp directory into the chroot, from outside the chroot run::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:50
# fc1266d2c48f49e2965eed105a939445
msgid "Some programs may need you to bind /dev or /proc."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:52
# 0d825d64f8484566b48ee54db22b8391
msgid "For more information on chroots see our `Debootstrap Chroot wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:55
# d1553b4ad98345c0a987cb1166ed8c6c
msgid "Alternatives"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:57
# 0e2c1a2dd0424fc6a1dfce191a80e975
msgid "SBuild is a system similar to PBuilder for creating an environment to run test package builds in.  It closer matches that used by Launchpad for building packages but takes some more setup compared to PBuilder.  See `the Security Team Build Environment wiki page`_ for a full explanation."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:59
# 347634c1d94f40f0924347910aef22e6
msgid "Full virtual machines can be useful for packaging and testing programs.  TestDrive is a program to automate syncing and running daily ISO images, see `the TestDrive wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:63
# 022abd096f75481685fbd6de6ce5791a
msgid "You can also set up pbuilder to pause when it comes across a build failure.  Copy C10shell from /usr/share/doc/pbuilder/examples into a directory and use the ``--hookdir=`` argument to point to it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:67
# cada8916fedb44d896c72be290e98ed4
msgid "Amazon's `EC2 cloud computers`_ allow you to hire a computer paying a few US cents per hour, you can set up Ubuntu machines of any supported version and package on those.  This is useful when you want to compile many packages at the same time or to overcome bandwidth restraints."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:3
# b09aa5944e704ab7a2c2b4ebbf56a426
msgid "Communication in Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:5
# 3f9e945cd3af4dd9b82a0495693ea5dd
msgid "In a project where thousands of lines of code are changed, lots of decisions are made and hundreds of people interact every day, it is important to communicate effectively."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:10
# 9f08b89ea16f401a8cc047dfe7baf086
msgid "Mailing lists"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:12
# dddd6c01a29949249ef19e9da4b9ad4c
msgid "Mailing lists are a very important tool if you want to communicate ideas to a broader team and make sure that you reach everybody, even across timezones."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:16
# cd262917aead42a3b17a6347927569b3
msgid "In terms of development, these are the most important ones:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:18
# 5dd157c02881464395986dbfc1504c60
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel-announce (announce-only, the most important development announcements go here)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:20
# a8519505386040bfa9142a549c3ba13a
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel (general Ubuntu development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:22
# 8d80adf03a394dd58fd884ebc6269064
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-motu (MOTU Team discussion, get help with packaging)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:27
# e6e068e9c9344acc8adb1481b527858e
msgid "IRC Channels"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:29
# c2a5ac1076644cfb91b6ac2e50e76b85
msgid "For real-time discussions, please connect to irc.freenode.net and join one or any of these channels:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:32
# b7b48fa99e4c45369ea61066fc738fd4
msgid "#ubuntu-devel (for general development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:33
# c6107c50b667498b8e398967aa515c92
msgid "#ubuntu-motu (for MOTU team discussion and generally getting help)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:2
# e07540d0c5894b188b8bc3808755e586
msgid "Basic Overview of the ``debian/`` Directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:4
# 93627d28b7d54057b1341790ebe90ec7
msgid "This article will briefly explain the different files important to the packaging of Ubuntu packages which are contained in the ``debian/`` directory. The most important of them are ``changelog``, ``control``, ``copyright``, and ``rules``. These are required for all packages. A number of additional files in the ``debian/`` may be used in order to customize and configure the behavior of the package. Some of these files are discussed in this article, but this is not meant to be a complete list."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:13
# dbe936b243d24791b8abfabf93235c36
msgid "The changelog"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:15
# 62a556a14f3b4b2aba7df252470315cc
msgid "This file is, as its name implies, a listing of the changes made in each version. It has a specific format that gives the package name, version, distribution, changes, and who made the changes at a given time. If you have a GPG key (see: :doc:`Getting set up<./getting-set-up/>`), make sure to use the same name and email address in ``changelog`` as you have in your key. The following is a template ``changelog``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:31
# 425a744f6f8b41d0a0424dbad07f09d3
msgid "The format (especially of the date) is important. The date should be in :rfc:`5322` format, which can be obtained by using the command ``date -R``. For convenience, the command ``dch`` may be used to edit changelog. It will update the date automatically."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:36
# bff88aed50864f3ab2448be20a345116
msgid "Minor bullet points are indicated by a dash \"-\", while major points use an asterisk \"*\"."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:39
# 063b4446d6604bb4a4a93c6317f0d503
msgid "If you are packaging from scratch, ``dch --create`` (``dch`` is in the ``devscripts`` package) will create a standard ``debian/changelog`` for you."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:43
# 628cb6f846c24dfd990a4477c6910946
msgid "Here is a sample ``changelog`` file for hello::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:52
# f13b9355507940b3b02d06eb94681fd1
msgid "Notice that the version has a ``-0ubuntu1`` appended to it, this is the distro revision, used so that the packaging can be updated (to fix bugs for example) with new uploads within the same source release version."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:56
# 964f8b3229c949848bbf76f462b5d317
msgid "Ubuntu and Debian have slightly different package versioning schemes to avoid conflicting packages with the same source version. If a Debian package has been changed in Ubuntu, it has ``ubuntuX`` (where ``X`` is the Ubuntu revision number) appended to the end of the Debian version. So if the Debian hello ``2.6-1`` package was changed by Ubuntu, the version string would be ``2.6-1ubuntu1``. If a package for the application does not exist in Debian, then the Debian revision is ``0`` (e.g. ``2.6-0ubuntu1``)."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:64
# c74eb5f7bd484122959b0c960eb3580d
msgid "For further information, see the `changelog section (Section 4.4) <http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:70
# 6d0496f2904e47c5895be7b9d1be67da
msgid "The control file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:72
# 3e5ed6bb0f104ca39b80db100d47f5d4
msgid "The ``control`` file contains the information that the package manager (such as ``apt-get``, ``synaptic``, and ``adept``) uses, build-time dependencies, maintainer information, and much more."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:76
# 01de212ac9554f4cb07f92c37d3a1805
msgid "For the Ubuntu ``hello`` package, the ``control`` file looks something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:101
# b59afe2565564d488554f77b0c99f4c9
msgid "The first paragraph describes the source package including the list of packages required to build the package from source in the ``Build-Depends`` field. It also contains some meta-information such as the maintainer's name, the version of Debian Policy that the package complies with, the location of the packaging version control repository, and the upstream home page."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:108
# 6e85d20cda3846b7bd5d9a76ef0fb826
msgid "Note that in Ubuntu, we set the ``Maintainer`` field to a general address because anyone can change any package (this differs from Debian where changing packages is usually restricted to an individual or a team). Packages in Ubuntu should generally have the ``Maintainer`` field set to ``Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>``. If the Maintainer field is modified, the old value should be saved in the ``XSBC-Original-Maintainer`` field. This can be done automatically with the  ``update-maintainer`` script available in the ``ubuntu-dev-tools`` package. For further information, see the `Debian Maintainer Field spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ on the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:120
# d24e338e783a4f3d88226507e210900c
msgid "Each additional paragraph describes a binary package to be built."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:122
# bc1a16af875043c69ee5f42af7138eb7
msgid "For further information, see the `control file section (Chapter 5) <http://www.debian.org/doc/debian-policy/ch-controlfields.html>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:128
# bf32194e09c24fc7a96337f2faec238b
msgid "The copyright file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:130
# 7d10bfe56ba548c68710ddaf9affbae5
msgid "This file gives the copyright information for both the upstream source and the packaging. Ubuntu and `Debian Policy (Section 12.5) <http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile>`_ require that each package installs a verbatim copy of its copyright and license information to ``/usr/share/doc/$(package_name)/copyright``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:136
# 0654bcf289a9405abf1fbd604b96bf9d
msgid "Generally, copyright information is found in the ``COPYING`` file in the program's source directory. This file should include such information as the names of the author and the packager, the URL from which the source came, a Copyright line with the year and copyright holder, and the text of the copyright itself. An example template would be::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:178
# f1dd04a4404d4fb3b6ef93c368e97d81
msgid "This example follows the `Machine-readable debian/copyright <http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/>`_ format. You are encouraged to use this format as well."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:184
# 57bea0a2b41a45f6a35ac9ec37b9c48c
msgid "The rules file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:186
# c90a1dd50ba74977b68478539ece6e1f
msgid "The last file we need to look at is ``rules``. This does all the work for creating our package. It is a Makefile with targets to compile and install the application, then create the ``.deb`` file from the installed files. It also has a target to clean up all the build files so you end up with just a source package again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:194
# 12edbbba3b444a40afc4ff249a88a006
msgid "Here is a simplified version of the rules file created by ``dh_make`` (which can be found in the ``dh-make`` package):"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:208
# 1f2f19d52316483397f3d42fe27d316b
msgid "Let us go through this file in some detail. What this does is pass every build target that ``debian/rules`` is called with as an argument to ``/usr/bin/dh``, which itself will call all the necessary ``dh_*`` commands."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:212
# b709039bb12b4107b5dae570216a8ad3
msgid "``dh`` runs a sequence of debhelper commands. The supported sequences correspond to the targets of a ``debian/rules`` file: \"build\", \"clean\", \"install\", \"binary-arch\", \"binary-indep\", and \"binary\". In order to see what commands are run in each target, run::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:221
# f9a0f143be4644349ac16560fb06ba41
msgid "Commands in the binary-indep sequence are passed the \"-i\" option to ensure they only work on binary independent packages, and commands in the binary-arch sequences are passed the \"-a\" option to ensure they only work on architecture dependent packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:226
# 7de22a4d5460471393deee61e42550a0
msgid "Each debhelper command will record when it's successfully run in ``debian/package.debhelper.log``. (Which dh_clean deletes.) So dh can tell which commands have already been run, for which packages, and skip running those commands again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:231
# f2807ac23bc34839b386df554e989b10
msgid "Each time ``dh`` is run, it examines the log, and finds the last logged command that is in the specified sequence. It then continues with the next command in the sequence. The ``--until``, ``--before``, ``--after``, and ``--remaining`` options can override this behavior."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:236
# 0f91d268382e441fbf813d2202f7b82b
msgid "If ``debian/rules`` contains a target with a name like ``override_dh_command``, then when it gets to that command in the sequence, ``dh`` will run that target from the rules file, rather than running the actual command. The override target can then run the command with additional options, or run entirely different commands instead. (Note that to use this feature, you should Build-Depend on debhelper 7.0.50 or above.)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:245
# 820005f67b3b42a292887e1a97a412fa
msgid "Have a look at ``/usr/share/doc/debhelper/examples/`` and ``man dh`` for more examples. Also see `the rules section (Section 4.9) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:251
# f251c2629c6c451ca7f0a2c5a28ed3fd
msgid "Additional Files"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:254
# 7b5d6716bd71474fb02da1049f614ea2
msgid "The install file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:256
# 328cd566055041eeae919be55db39258
msgid "The ``install`` file is used by ``dh_install`` to install files into the binary package. It has two standard use cases:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:259
# aa1364c667e240f8ab56eaf1fcd666d0
msgid "To install files into your package that are not handled by the upstream build system."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:260
# 4674387aa9664f4282f7706546eed1cd
msgid "Splitting a single large source package into multiple binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:262
# 412fabe5262f466babf49f4566c04f05
msgid "In the first case, the ``install`` file should have one line per file installed, specifying both the file and the installation directory. For example, the following ``install`` file would install the script ``foo`` in the source package's root directory to ``usr/bin`` and a desktop file in the ``debian`` directory to ``usr/share/applications``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:273
# c2fd211633534c76a54090151a48e150
msgid "When a source package is producing multiple binary packages ``dh`` will install the files into ``debian/tmp`` rather than directly into ``debian/<package>``. Files installed into ``debian/tmp`` can then be moved into separate binary packages using multiple ``$package_name.install`` files. This is often done to split large amounts of architecture independent data out of architecture dependent packages and into ``Architecture: all`` packages. In this case, only the name of the files (or directories) to be installed are needed without the installation directory. For example, ``foo.install`` containing only the architecture dependent files might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:286
# 58ced56e491041f58f471f4cb12414cc
msgid "While ``foo-common.install`` containing only the architecture independent file might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:294
# f82978afa6c2492f8ef83d02cea5955a
msgid "This would create two binary packages, ``foo`` and ``foo-common``. Both would require their own paragraph in ``debian/control``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:297
# f1d8efc7788c4abe95881ee168524f4a
msgid "See ``man dh_install`` and the `install file section (Section 5.11) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#install>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:302
# 9de346c0710746899ae6d96714d73c0b
msgid "The watch file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:304
# b590fa2db4cc48b59eb4fbc47de9cc36
msgid "The ``debian/watch`` file allows us to check automatically for new upstream versions using the tool ``uscan`` found in the ``devscripts`` package. The first line of the watch file must be the format version (3, at the time of this writing), while the following lines contain any URLs to parse. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:313
# c2fcedb8d50d4b8998c8ecc59eef617d
msgid "Running ``uscan`` in the root source directory will now compare the upstream version number in ``debian/changelog`` with the latest available upstream version. If a new upstream version is found, it will be automatically downloaded. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:326
# 04f380ee57ab48f18083db5173221f46
msgid "If your tarballs live on Launchpad, the ``debian/watch`` file is a little more complicated (see `Question 21146`_ and `Bug 231797`_ for why this is).  In that case, use something like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:333
# 35e8c81cbff548438cd63137183595a8
msgid "For further information, see ``man uscan`` and the `watch file section (Section 4.11) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianwatch>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:337
# dcb7edec01fa4836b60c1b4805213c02
msgid "For a list of packages where the ``watch`` file reports they are not in sync with upstream see `Ubuntu External Health Status <http://qa.ubuntuwire.org/uehs/no_updated.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:342
# 44137e0bd8814cee88c63f9f5f58965e
msgid "The source/format file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:344
# 16c87f8522e643708701efa0a38d0cd8
msgid "This file indicates the format of the source package. It should contain a single line indicating the desired format:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:347
# fbd3d2c5761d4a6195878d4ff3ca7258
msgid "``3.0 (native)`` for Debian native packages (no upstream version)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:349
# 899268ab335b46fa8e3524ca0869da45
msgid "``3.0 (quilt)`` for packages with a separate upstream tarball"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:351
# 7c616a4a789242c3bc9d48e27f5a402e
msgid "``1.0`` for packages wishing to explicitly declare the default format"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:353
# 5986ad65a5ca4266a6d34a0328ea51d9
msgid "Currently, the package source format will default to 1.0 if this file does not exist. You can make this explicit in the source/format file. If you choose not to use this file to define the source format, Lintian will warn about the missing file. This warning is informational only and may be safely ignored."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:358
# 91caa2c7439d4389bd6a434e99bf4fdc
msgid "You are encouraged to use the newer 3.0 source format. It provides a number of new features:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:361
# 38a971a583ec44009462d508072f94f7
msgid "Support for additional compression formats: bzip2, lzma and xz"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:363
# 34c78ff92b664c5891c7b5ff66d19df8
msgid "Support for multiple upstream tarballs"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:365
# 96f44c79530e4cfa9ca62a0f85137180
msgid "Not necessary to repack the upstream tarball to strip the debian directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:367
# 96a40d7b46dc451581d1ffd5c3a2be6f
msgid "Debian-specific changes are no longer stored in a single .diff.gz but in multiple patches compatible with quilt under ``debian/patches/``"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:369
# fa76e69ab89f4b5eb9ae463e0d514e38
msgid "http://wiki.debian.org/Projects/DebSrc3.0 summarizes additional information concerning the switch to the 3.0 source package formats."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:372
# 731af63b526b4c2ba826da181866dbf3
msgid "See ``man dpkg-source`` and the `source/format section (Section 5.21) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#sourcef>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:377
# f8c500336a1c45ae87095d9b70eeebe0
msgid "Additional Resources"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:379
# 88ce991a712f42638c0bbee4dd135fbe
msgid "In addition to the links to the Debian Policy Manual in each section above, the Debian New Maintainers' Guide has more detailed descriptions of each file. `Chapter 4, \"Required files under the debian directory\" <http://www.debian.org/doc/maint-guide/dreq.en.html>`_ further discusses the control, changelog, copyright and rules files. `Chapter 5, \"Other files under the debian directory\" <http://www.debian.org/doc/maint-guide/dother.en.html>`_ discusses additional files that may be used."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:3
# c3bfaf8d679e44dd90ec6bbab27594f2
msgid "Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:6
#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:9
# 9626290e917544b0b5abcd0fa7c658a8
# 4c5a19d855e64b20ab5270434e87f9b3
msgid "Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:8
# e8f436a4fed64ba88813fd1417363381
msgid "If you followed the instructions to :doc:`get set up with Ubuntu Development<./getting-set-up>`, you should be all set and ready to go."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:13
# 90832eaa7c9747e3b5fd1a142f4dea1b
msgid "As you can see in the image above, there is no surprises in the process of fixing bugs in Ubuntu: you found a problem, you get the code, work on the fix, test it, push your changes to Launchpad and ask for it to be reviewed and merged. In this guide we will go through all the necessary steps one by one."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:20
# ec9b1e3823674fe9b5a77fc4537e7ff2
msgid "Finding the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:22
# 1036a28c0db54285a5f334a498a6baa7
msgid "There are a lot of different ways to find things to work on. It might be a bug report you are encountering yourself (which gives you a good opportunity to test the fix), or a problem you noted elsewhere, maybe in a bug report."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:26
# 8f5962b2b67e46e6ba0b935601951e26
msgid "`Harvest <http://harvest.ubuntu.com/>`_ is where we keep track of various TODO lists regarding Ubuntu development. It lists bugs that were fixed upstream or in Debian already, lists small bugs (we call them 'bitesize'), and so on. Check it out and find your first bug to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:35
# bcef5fcfaa5a43c6825dc318028f96e8
msgid "Figuring out what to fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:37
# 4db05611c2a64d86910e2592faf62325
msgid "If you don't know the source package containing the code that has the problem, but you do know the path to the affected program on your system, you can discover the source package that you'll need to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:41
# bc69b87b61e9491aaad6da3e93abdf1b
msgid "Let's say you've found a bug in Tomboy, a note taking desktop application. The Tomboy application can be started by running ``/usr/bin/tomboy`` on the command line.  To find the binary package containing this application, use this command::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:48
# 7063c9eb2311489aa1268ec62c8137c2
msgid "This would print out::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:52
# 8202082d38f84a1cb39be112d6f81142
msgid "Note that the part preceding the colon is the binary package name.  It's often the case that the source package and binary package will have different names. This is most common when a single source package is used to build multiple different binary packages.  To find the source package for a particular binary package, type::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:63
# 78d33e2adfe24928aa05f1b95da632e5
msgid "``apt-cache`` is part of the standard installation of Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:66
# 949a1c43328840baa6e37aaa3fef3d6c
msgid "Getting the code"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:68
# cac994118e0648139958f0ced0dddc97
msgid "Once you know the source package to work on, you will want to get a copy of the code on your system, so that you can debug it.  In Ubuntu Distributed Development this is done by :ref:`*branching* the source package <branching>` branch corresponding to the source package.  Launchpad maintains source package branches for all the packages in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:74
# 93b7179f0d9d48649bd0b9b8022774da
msgid "Once you've got a local branch of the source package, you can investigate the bug, create a fix, and upload your proposed fix to Launchpad, in the form of a Bazaar branch.  When you are happy with your fix, you can :ref:`submit a *merge proposal* <merge-proposal>`, which asks other Ubuntu developers to review and approve your change.  If they agree with your changes, an Ubuntu developer will upload the new version of the package to Ubuntu so that everyone gets the benefit of your excellent fix - and you get a little bit of credit.  You're now on your way to becoming an Ubuntu developer!"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:83
# 3cf8538b920b4c66a63ba3f04f7ee40a
msgid "We'll describe specifics on how to branch the code, push your fix, and request a review in the following sections."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:88
# 59382029127f4af6a0b884ceb8448bc6
msgid "Work on a fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:90
# 086bb002bb3549be95f5a3083b9525fd
msgid "There are entire books written about finding bugs, fixing them, testing them, etc. If you are completely new to programming, try to fix easy bugs such as obvious typos first. Try to keep changes as minimal as possible and document your change and assumptions clearly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:95
# 52031c9a681f4e0f99a602c742b8da5b
msgid "Before working on a fix yourself, make sure to investigate if nobody else has fixed it already or is currently working on a fix. Good sources to check are:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:98
# af309e2981624047a9708fdcf808fd3c
msgid "Upstream (and Debian) bug tracker (open and closed bugs),"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:99
# d18e5546e00742ac91d9d8027c5f0d5b
msgid "Upstream revision history (or newer release) might have fixed the problem,"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:100
# 258c911c0b6941969be60352c4c71e15
msgid "bugs or package uploads of Debian or other distributions."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:105
# 8b8f4ca3ae214a63819e215580076f7e
msgid "You now want to create a patch which includes the fix.  The command ``edit-patch`` is a simple way to add a patch to a package. Run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:110
# 3efb88337529442d9aaf9054324025b8
msgid "This will copy the packaging to a temporary directory.  You can now edit files with a text editor or apply patches from upstream, for example::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:115
# bd7007cc9485438b9aa7d11d0c8cefeb
msgid "After editing the file type ``exit`` or press ``control-d`` to quit the temporary shell.  The new patch will have been added into ``debian/patches``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:120
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:204
# ffe781409683496087dd1a72d4c2a6e3
# f14c741bda9049b49f7de1e4a9b08786
msgid "Testing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:122
# 6fee349ca3944068b5b9282601a898b6
msgid "To build a test package with your changes, run these commands::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:127
# b25290e8bdae47c1ae1e0553cf392a26
msgid "This will create a source package from the branch contents (``-us -uc`` will just omit the step to sign the source package) and ``pbuilder-dist`` will build the package from source for whatever ``release`` you choose."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:131
# c7c276df725b4ecd80bcb909562336b0
msgid "Once the build succeeds, install the package from ``~/pbuilder/<release>_result/`` (using ``sudo dpkg -i <package>_<version>.deb``).  Then test to see if the bug is fixed."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:138
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:155
# 927b7d0e745d487bbae43bf451eb5ae2
# 7e78dedfc3334f4eb483057d2ddbf20a
msgid "Documenting the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:140
# 8d5ebea0c7b24ece85f4557b411f5cc6
msgid "It is very important to document your change sufficiently so developers who look at the code in the future won't have to guess what your reasoning was and what your assumptions were. Every Debian and Ubuntu package source includes ``debian/changelog``, where changes of each uploaded package are tracked."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:145
# c5da006f634b426f9de20a0777f6ba77
msgid "The easiest way to update this is to run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:149
# 9406b18b4e7c47b99c0898566e96aa9a
msgid "This will add a boilerplate changelog entry for you and launch an editor where you can fill in the blanks. An example of this could be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:158
# 5cfd955030624b0a9120b44e2dc0e190
msgid "``dch`` should fill out the first and last line of such a changelog entry for you already. Line 1 consists of the source package name, the version number, which Ubuntu release it is uploaded to, the urgency (which almost always is 'low'). The last line always contains the name, email address and timestamp (in :rfc:`5322` format) of the change."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:164
# 85c55d5f0c8c48f8a199432ee37d8c47
msgid "With that out of the way, let's focus on the actual changelog entry itself: it is very important to document:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:167
# 7d951432608c415f87499ee9c6b196c7
msgid "where the change was done"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:168
# 8d0a7be604a54afeb1a38cf225125678
msgid "what was changed"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:169
# e3d23410f07142d18b168fa403a712e5
msgid "where the discussion of the change happened"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:171
# 18db6b38a86d4462b3880cd4749dd02b
msgid "In our (very sparse) example the last point is covered by ``(LP: #123456)`` which refers to Launchpad bug 123456. Bug reports or mailing list threads or specifications are usually good information to provide as a rationale for a change. As a bonus, if you use the ``LP: #<number>`` notation for Launchpad bugs, the bug will be automatically closed when the package is uploaded to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:180
# 01e956c0c31d401e9f494d8576bfa584
msgid "Committing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:182
# 09f170c43d484b339ec3e5cffab69275
msgid "With the changelog entry written and saved, you can just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:186
# 301593ebf4944f668bdd0b00e02780ba
msgid "and the change will be committed (locally) with your changelog entry as a commit message."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:189
# 26a2945a16914e41a73e90b991db11da
msgid "To push it to Launchpad, as the remote branch name, you need to stick to the following nomenclature::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:194
# 04d9314cf72b454a91fe1115b578ae0d
msgid "This could for example be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:198
# 54eb6f56238141f7afc8aed464cc962f
msgid "So if you just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:203
# 9174cefe8875439f9493c0f8a652d3cc
msgid "you should be all set. The push command should push it to Launchpad and the second command will open the Launchpad page of the remote branch in your browser. There find the \"(+) Propose for merging\" link, click it to get the change reviewed by somebody and included in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:208
# 8e6506d04c17490fad9576935324f877
msgid "Our article about :doc:`seeking sponsorship<./udd-sponsorship>` goes into more detail about getting feedback for your proposed changes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:211
# eb418e76194d4e38978268f1c9356d2d
msgid "If your branch fixes issues in stable releases or it is a security fix, you might want to have a look at our :doc:`Security and stable release updates<./security-and-stable-release-updates>` article."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:3
# 436c70d080b04b2abbe103187581395e
msgid "Tutorial: Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:5
# 0b5e4a60ae094fad8388b185dca14e33
msgid "While the mechanics for :doc:`fixing a bug<./fixing-a-bug>` are the same for every bug, every problem you look at is likely to be different from another. An example of a concrete problem might help to get an idea what to consider generally."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:10
# d658bea6af6347e0a654a5d886a7dbb7
msgid "At the time of writing this article this was not fixed yet. When you are reading the article this might actually be fixed. Take this as an example and try to adapt it to the specific problem you are facing."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:15
# 7f0af57f7d274ed0b405edb8080dbcdb
msgid "Confirming the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:17
# 27c72b48eb2e4c07b8d61cb91ba0ba8e
msgid "Let's say the package ``bumprace`` does not have a homepage in its package description. As a first step you would check if the problem is not solved already. This is easy to check, either take a look at Software Center or run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:23
# f9ccf68081724e46b3fad9c15d0ad92e
msgid "The output should be similar to this::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:49
# 6267681d353c4c3ab5385d9b68b661be
msgid "A counter-example would be ``gedit``, which has a homepage set::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:55
# fbdecbb6c2b9404fa98fa70c405c93a7
msgid "Sometimes you will find that a particular problem you are looking into is already fixed. To avoid wasting efforts and duplicating work it makes sense to first do some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:61
# b51c6f740ce641eb8b45a3ee7257a684
msgid "Research bug situation"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:63
# a9fcfcc3a159409f818dce3da334bec1
msgid "First we should check if a bug for the problem exists in Ubuntu already. Maybe somebody is working on a fix already, or we can contribute to the solution somehow. For Ubuntu we have a quick look at https://bugs.launchpad.net/ubuntu/+source/bumprace and there is no open bug with our problem there."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:69
# f4f5b59489da49d9bb5e84f8e0faf68e
msgid "For Ubuntu the URL ``https://bugs.launchpad.net/ubuntu/+source/<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:73
# f3dcead1a2fe40afb19b33f4430775ed
msgid "For Debian, which is the major source for Ubuntu's packages, we have a look at http://bugs.debian.org/src:bumprace and can't find a bug report for our problem either."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:77
# 660635f42b714b9ea834ab05ae0b36f9
msgid "For Debian the URL ``http://bugs.debian.org/src:<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:80
# 49ea65a5681a49598e6fe986577c800d
msgid "The problem we are working on is special as it only concerns the packaging-related bits of ``bumprace``. If it was a problem in the source code it would be helpful to also check the Upstream bug tracker. This is unfortunately often different for every package you have a look at, but if you search the web for it, you should in most cases find it pretty easily."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:88
# 8585dbd05e3949cd97096848b504602f
msgid "Offering help"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:90
# 7edacb5a7a59419ab0aaa58f454a8ff3
msgid "If you found an open bug and it is not assigned to somebody and you are in a position to fix it, you should comment on it with your solution. Be sure to include as much information as you can: Under which circumstances does the bug occur? How did you fix the problem? Did you test your solution?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:95
# 6f05f7aa2496408d89f704f325bca82f
msgid "If no bug report has been filed, you can file a bug for it. What you might want to bear in mind is: Is the issue so small that just asking for somebody to commit it is good enough? Did you manage to only partially fix the issue and you want to at least share your part of it?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:100
# 5ea05556659a45499665090fdd754509
msgid "It is great if you can offer help and will surely be appreciated."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:104
# 89df929e42754ce187203bd711cbe026
msgid "Fixing the issue"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:106
# 6ba124c0cc6147b7a6bcb645d7b1ad56
msgid "For this specific example it is enough to search the web for ``bumprace`` and find the homepage of it. Be sure it is a live site and not just a software catalogue. http://www.linux-games.com/bumprace/ looks like it is the proper place."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:111
# 562f67dbbbe04c95aaf078dbdbffec36
msgid "To address the issue in the source package, we first need the source and we can easily get it by running::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:117
# c769a67350a849f2a225ff6df7f6a724
msgid "If you read :doc:`the Debian Directory Overview<./debian-dir-overview>` before, you might remember, that the homepage for a package is specified in the first part of ``debian/control``, the section which starts with ``Source:``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:121
# 4a8f48b157d3480f8f427d3d7b5da828
msgid "So what we do next is run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:125
# 3c5d66fcedcb4522bb6e28656aacd403
msgid "and edit ``debian/control`` to add ``Homepage: http://www.linux-games.com/bumprace/``. At the end of the first section should be a good place for it. Once you have done this, save the file."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:129
# 5ddacef42b874491b0002527209285fa
msgid "If you now run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:133
# 89eca62d81544cf995f52aafedb28377
msgid "you should see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:149
# b7fcae1896f246f2860962ef0014f076
msgid "The diff is pretty simple to understand. The ``+`` indicates a line which was added. In our cases it was added just before the second section, starting with ``Package``, which indicates a resulting binary package."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:157
# 478a0a6c87b04f7c8cbdcc11af21cdb3
msgid "It is important to explain to your fellow developers what exactly you did. If you run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:163
# b08bb245a7584ac797156ae288f05549
msgid "this will start an editor with a boilerplate changelog entry which you just have to fill out. In our case something like ``debian/control: Added project's homepage.`` should do. Then save the file. To double-check this worked out, run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:170
# 2aea364a7caa473781c498de211c646b
msgid "and you will see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:189
# 415602136a7643d99c2da178e589d456
msgid "A few additional considerations:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:191
# 718c1eda1b234ced8b1a79151ba9cac6
msgid "If you have a reference to a Launchpad bug which is fixed by the issue, add (``LP: #<bug number>``) to the changelog entry line, ie: ``(LP: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:193
# ba4fd01d093f49f7b4c84843819afc62
msgid "If you want to get your fix included in Debian, for a Debian bug the syntax is ``(Closes: #<bug number>)``, ie: ``(Closes: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:195
# d4af6efe53a2445a8c2a0ffbffa4f3ea
msgid "If it is a reference to an upstream or Debian bug or a mailing list discussion, mention it as well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:197
# db7320ede1994d1aa7c4754754e138ff
msgid "Try to wrap your lines at 80 characters."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:198
# b12cec431faa4f6d8886da990ec0c422
msgid "Try to be specific, not an essay, but enough for somebody (who did not deeply look into the issue) to understand."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:200
# 3f6c7d5d1b9e44af9416f4f12cc61376
msgid "Mention how you fixed the issue and where."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:206
# 052abcf131354d55b568e16ea2068c06
msgid "To test the fix, you need to :doc:`have your development environment set up<./getting-set-up>`, then to build the package, install it and verify the problem is solved. In our case this would be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:214
# 9086c6d982d246ceb077e42d09c188c7
msgid "In step one we build the source package from the branch, then build it by using ``pbuilder``, then inspect the resulting package to check if the Homepage field was added properly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:218
# 448f32fbf7844b948c4ec9e486a97449
msgid "In a lot of cases you will have to actually install the package to make sure it works as expected. Our case is a lot easier. If the build succeeded, you will find the binary packages in ``~/pbuilder/<release>_result``. Install them via ``sudo dpkg -i <package>.deb`` or by double-clicking on them in your file manager."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:225
# d79e9e1b597a4804b9e832a71598d74c
msgid "As we verified, the problem is now solved, so the next step is sharing our solution with the world."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:229
# acdecad57aef4337a81a2178fb73e7b3
msgid "Getting the fix included"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:231
# e9dda1caa8414778bd0a5b63dcf464c5
msgid "It makes to get fix included as Upstream as possible. Doing that you can guarantee that everybody can take the Upstream source as-is and don't need to have local modifications to fix it."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:235
# d05e7df426c148a2b3782da849ec36b2
msgid "In our case we established that we have a problem with the packaging, both in Ubuntu and Debian. As Ubuntu is based on Debian, we will send the fix to Debian. Once it is included there, it will be picked up by Ubuntu eventually. The issue in our tutorial is clearly non-critical, so this approach makes sense. If it is important to fix the issue as soon as possible, you will need to send the solution to multiple bug trackers. Provided the issue affects all parties in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:243
# 93f7e892e0db43819e73eece26567cce
msgid "To submit the patch to Debian, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:247
# 06ae6e2f999e4d6e85ce1f86ff46a2e2
msgid "This will take you through a series of steps to make sure the bug ends up in the correct place. Be sure to review the diff again to make sure it does not include random changes you made earlier."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:251
# 8b597e4a3918464d997f924c75825646
msgid "Communication is important, so when you add some more description to it to the inclusion request, be friendly, explain it well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:254
# 883a07cd8bfa4a348bab12116d624dd9
msgid "If everything went well you should get a mail from Debian's bug tracking system with more information. This might sometimes take a few minutes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:257
# 117ce1bebbd84713a7c24f96ac81dbfc
msgid "If the problem is just in Ubuntu, you might want to consider :doc:`Seeking Review and Sponsorship<./udd-sponsorship>` to get the fix included."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:263
# 449c92970f8e49fa860d2e1c28f81493
msgid "Additional considerations"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:265
# cead182a2dfd447a9e71f82fe77d1c3e
msgid "If you find a package and find that there are a couple of trivial things you can fix at the same time, do it. This will speed up review and inclusion."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:268
# c25353be397444a29180a43954f6ad47
msgid "If there are multiple big things you want to fix, it might be advisable to send individual patches or merge proposals instead. If there are individual bugs filed for the issues already, this makes it even easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:3
# 37567c7c735e42528e033c23e427a0c9
msgid "Getting Set Up"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:5
# 76179565abf14538821fc0bba0d8071e
msgid "There are a number of things you need to do to get started developing for Ubuntu. This article is designed to get your computer set up so that you can start working with packages, and upload your packages to Ubuntu's hosting platform, Launchpad. Here's what we'll cover:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:10
# a0cedf534a464adeaeb44c6efc7f03d4
msgid "Installing packaging-related software. This includes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:12
# fcbc04274a97427da2d5130f9772736f
msgid "Ubuntu-specific packaging utilities"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:13
# 3185ed3d7378487b891da81e9a121305
msgid "Encryption software so your work can be verified as being done by you"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:14
# 10d992b1aea44c89a81b599670ccaf7e
msgid "Additional encryption software so you can securely transfer files"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:16
# 592ac1c0b6b34db28a979fe136541b98
msgid "Creating and configuring your account on Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:17
# 6e610f26b23648f6bbc5068995c4409b
msgid "Setting up your development environment to help you do local builds of packages, interact with other developers, and propose your changes on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:22
# 4c04bb9d0e0449ffb6a4d05d5e28bf17
msgid "It is advisable to do packaging work using the current development version of Ubuntu. Doing so will allow you to test changes in the same environment where those changes will actually be applied and used."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:26
# c1740ea18b19422f8963e871f1a5caff
msgid "Don't worry though, the `Ubuntu development release wiki page <https://wiki.ubuntu.com/UsingDevelopmentReleases>`_ shows a variety of ways to safely use the development release."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:32
# e50dea93f45e4bf789a07f3bd02b6479
msgid "Install basic packaging software"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:34
# 1f0e8c78eb0c4c4ea8e7db35899b81ba
msgid "There are a number of tools that will make your life as an Ubuntu developer much easier.  You will encounter these tools later in this guide.  To install most of the tools you will need run this command::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:41
# 8ef925000218414f8b2c7eff741bd9ce
msgid "Note: Since Ubuntu 11.10 \"Oneiric Ocelot\" (or if you have Backports enabled on a currently supported release), the following command will install the above and other tools which are quite common in Ubuntu development::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:49
# a147a32613fe411fa9ebb997d5c32b2b
msgid "This command will install the following software:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:51
# d2303975ca324e95ab4821c76202a984
msgid "``gnupg`` -- `GNU Privacy Guard`_ contains tools you will need to create a cryptographic key with which you will sign files you want to upload to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:54
# d7b77b266dbe4ee58e1a37d159fbb0f1
msgid "``pbuilder`` -- a tool to do reproducible builds of a package in a clean and isolated environment."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:56
# 9c3ec47bfa1a469b9ce4347cee83bb14
msgid "``ubuntu-dev-tools`` (and ``devscripts``, a direct dependency) -- a collection of tools that make many packaging tasks easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:58
# 91ef13a74f9e4736a2da83dbaa65f021
msgid "``bzr-builddeb`` (and ``bzr``, a dependency) -- distributed version control with Bazaar, a new way of working with packages for Ubuntu that will make it easy for many developers to collaborate and work on the same code while keeping it trivial to merge each other's work."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:62
# 98a9aa9b3bfd4ad695dbd40c88d6b8db
msgid "``apt-file`` provides an easy way to find the binary package that contains a given file."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:67
# 28cc5a639f19476bac2afaac0a142ada
msgid "Create your GPG key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:69
# c5166ff082fd4e6a97e5f9c304a4ae20
msgid "GPG stands for `GNU Privacy Guard`_ and it implements the OpenPGP standard which allows you to sign and encrypt messages and files. This is useful for a number of purposes. In our case it is important that you can sign files with your key so they can be identified as something that you worked on. If you upload a source package to Launchpad, it will only accept the package if it can absolutely determine who uploaded the package."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:76
# 5e1a34d992284bc5bf88806e3ce6d950
msgid "To generate a new GPG key, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:80
# 4e315a48702240b3887b9e1f629dca12
msgid "GPG will first ask you which kind of key you want to generate. Choosing the default (RSA and DSA) is fine. Next it will ask you about the keysize. The default (currently 2048) is fine, but 4096 is more secure. Afterwards, it will ask you if you want it to expire the key at some stage. It is safe to say \"0\", which means the key will never expire. The last questions will be about your name and email address. Just pick the ones you are going to use for Ubuntu development here, you can add additional email addresses later on. Adding a comment is not necessary. Then you will have to set a passphrase, choose a safe one (a passphrase is just a password which is allowed to include spaces)."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:90
# 4e3ece15f32242938970a468d5b4d0eb
msgid "Now GPG will create a key for you, which can take a little bit of time; it needs random bytes, so if you give the system some work to do it will be just fine.  Move the cursor around, type some paragraphs of random text, load some web page."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:95
# bd7c3609de1a4810bdc5130739863536
msgid "Once this is done, you will get a message similar to this one::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:102
# ceb8d80136174634a98d03a07ac8c0bd
msgid "In this case ``43CDE61D`` is the *key ID*."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:104
# a56a18ffe8284895a7c59fb9279affa3
msgid "Next, you need to upload the public part of your key to a keyserver so the world can identify messages and files as yours. To do so, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:109
# 02b25e8cf011443d87c194b17744934a
msgid "This will send your key to one keyserver, but a network of keyservers will automatically sync the key between themselves. Once this syncing is complete, your signed public key will be ready to verify your contributions around the world."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:116
# ceedeb53b7724c77b7fcc1ca3b1623e4
msgid "Create your SSH key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:118
# 1549b593b44844e39da829509b090c4b
msgid "SSH_ stands for *Secure Shell*, and it is a protocol that allows you to exchange data in a secure way over a network. It is common to use SSH to access and open a shell on another computer, and to use it to securely transfer files. For our purposes, we will mainly be using SSH to securely upload source packages to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:124
# ecc84428202848bfadf92de31c0de098
msgid "To generate an SSH key, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:128
# 03744fe1daf64933a9fe65a33fab34a0
msgid "The default file name usually makes sense, so you can just leave it as it is. For security purposes, it is highly recommended that you use a passphrase."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:133
# e9988fd4eacc45c1a64b1e538f59e417
msgid "Set up pbuilder"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:135
# 0c77c07f499149258829e9011057f563
msgid "``pbuilder`` allows you to build packages locally on your machine. It serves a couple of purposes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:138
# adaf4dfb746d463a95015735363a8b13
msgid "The build will be done in a minimal and clean environment. This helps you make sure your builds succeed in a reproducible way, but without modifying your local system"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:141
# d8413a9d2cb7429db20b8a3e22163967
msgid "There is no need to install all necessary *build dependencies* locally"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:142
# 82ebb8c7b91442f5bfd4c89bac66e5ba
msgid "You can set up multiple instances for various Ubuntu and Debian releases"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:144
# dea442049b6c4bf1805246d331116500
msgid "Setting ``pbuilder`` up is very easy, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:148
# 5fb882cc3f504ab3b1c2701cd3e87b95
msgid "where <release> is for example `natty`, `maverick`, `lucid` or in the case of Debian maybe `sid`. This will take a while as it will download all the necessary packages for a \"minimal installation\". These will be cached though."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:154
# 46d728d1c8fc4b9d9316b3739fe3587e
msgid "Get set up to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:156
# 4265fe772eee49d78fb89784f3517a0c
msgid "With a basic local configuration in place, your next step will be to configure your system to work with Launchpad. This section will focus on the following topics:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:160
# 9df71d2d82c040b382f98d98b92034c8
msgid "What Launchpad is and creating a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:161
# 3f30f9b8594f4f848badd4a66eff2370
msgid "Uploading your GPG and SSH keys to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:162
# 106f783958ce468699b8ba888b755d59
msgid "Configuring Bazaar to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:163
# 13e68b37829f44b8bbcd9a73169c32ed
msgid "Configuring Bash to work with Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:167
# 294eb4bfcfd74dc59bde3bb2ba9cac84
msgid "About Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:169
# 596070cd37534cff9a50492a2e0ea3b3
msgid "Launchpad is the central piece of infrastructure we use in Ubuntu. It not only stores our packages and our code, but also things like translations, bug reports, and information about the people who work on Ubuntu and their team memberships.  You will also use Launchpad to publish your proposed fixes, and get other Ubuntu developers to review and sponsor them."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:175
# 44f2575baa2348d4a50fa5738c4305df
msgid "You will need to register with Launchpad and provide a minimal amount of information. This will allow you to download and upload code, submit bug reports, and more."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:179
# 018901b6384c462bb2f4b1ae461d3b8f
msgid "Besides hosting Ubuntu, Launchpad can host any Free Software project. For more information see the `Launchpad Help wiki <https://help.launchpad.net/>`_."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:184
# 78f4cf586e90482a992d43a098a87677
msgid "Get a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:186
# 985babbfcd3c47bf83271061f6c3ed2f
msgid "If you don't already have a Launchpad account, you can easily `create one`_. If you have a Launchpad account but cannot remember your Launchpad id, you can find this out by going to https://launchpad.net/~ and looking for the part after the `~` in the URL."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:191
# 49f447f9c26e4200bedfc73cd430429a
msgid "Launchpad's registration process will ask you to choose a display name. It is encouraged for you to use your real name here so that your Ubuntu developer colleagues will be able to get to know you better."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:195
# e01e947527d446ab8a1426ad41abf312
msgid "When you register a new account, Launchpad will send you an email with a link you need to open in your browser in order to verify your email address. If you don't receive it, check in your spam folder."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:199
# 88a3b435214e403e868b3065216d8541
msgid "`The new account help page <https://help.launchpad.net/YourAccount/NewAccount>`_ on Launchpad has more information about the process and additional settings you can change."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:205
# 1e8b4d75d1b341ceadb9e0d8702cd1de
msgid "Upload your GPG key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:207
# 95f1c28f09ee45ea83e74b016c4ab46d
msgid "To find about your GPG fingerprint, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:211
# 019149f425554aaca5bca8007710d70b
msgid "and it will print out something like::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:219
# b0dc7a725e284b34bad1c3302026be63
msgid "Head to https://launchpad.net/~/+editpgpkeys and copy the \"Key fingerprint\" into the text box. In the case above this would be ``5C28 0144 FB08 91C0 2CF3  37AC 6F0B F90F 43CD E61D``. Now click on \"Import Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:224
# 659bc8ef20ab4b44aa5bec7ea8ccfc16
msgid "Launchpad will use the fingerprint to check the Ubuntu key server for your key and, if successful, send you an encrypted email asking you to confirm the key import. Check your email account and read the email that Launchpad sent you. `If your email client supports OpenPGP encryption, it will prompt you for the password you chose for the key when GPG generated it. Enter the password, then click the link to confirm that the key is yours.`"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:231
# 8c04586261a747678d4c4057e8ee5971
msgid "Launchpad encrypts the email, using your public key, so that it can be sure that the key is yours. If your email software does not support OpenPGP encryption, copy the encrypted email's contents, type ``gpg`` in your terminal, then paste the email contents into your terminal window."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:236
# b795cf26392943258af06ddaece1de4c
msgid "Back on the Launchpad website, use the Confirm button and Launchpad will complete the import of your OpenPGP key."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:239
# 6fc0573570b9450ca4ac560fd3196e79
msgid "Find more information at https://help.launchpad.net/YourAccount/ImportingYourPGPKey"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:243
# 6628240b6b0c472d92a58d6db20f3cc1
msgid "Upload your SSH key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:245
# 6c9f51740fc040d495b67dd818eaa7cb
msgid "Open https://launchpad.net/~/+editsshkeys in a web browser, also open ``~/.ssh/id_rsa.pub`` in a text editor. This is the public part of your SSH key, so it is safe to share it with Launchpad. Copy the contents of the file and paste them into the text box on the web page that says \"Add an SSH key\". Now click \"Import Public Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:251
# f9a0aa845fe44f3d9174dda23e93fcc3
msgid "For more information on this process, visit the `creating an SSH keypair <https://help.launchpad.net/YourAccount/CreatingAnSSHKeyPair>`_ page on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:257
# 85877e054dbc461f9e3c183eb8411188
msgid "Configure Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:259
# ff8e3780a2c443b8a91e90931edc0072
msgid "Bazaar is the tool we use to store code changes in a logical way, to exchange proposed changes and merge them, even if development is done concurrently.  It is used for the new Ubuntu Distributed Development method of working with Ubuntu packages."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:264
# 503178fcf9e648d090f6f410981e51ea
msgid "To tell Bazaar who you are, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:269
# a3c1fa7fa3fc4ec1b380fcb05d50b54b
msgid "`whoami` will tell Bazaar which name and email address it should use for your commit messages. With `launchpad-login` you set your Launchpad ID. This way code that you publish in Launchpad will be associated with you."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:273
# b585e2f86626430bb41fb68c8054acc8
msgid "Note: If you can not remember the ID, go to https://launchpad.net/~ and see where it redirects you. The part after the \"~\" in the URL is your Launchpad ID.)"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:279
# d49b2b03b89f409ebb0a61ee0cf41597
msgid "Configure your shell"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:280
# ff5f4395271f44148e36a7eb9af7cbc5
msgid "Similar to Bazaar, the Debian/Ubuntu packaging tools need to learn about you as well. Simply open your `~/.bashrc` in a text editor and add something like this to the bottom of it::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:287
# 0916d8afa160489d9182ce52bfbf7419
msgid "Now save the file and either restart your terminal or run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:291
# ab9c2bdd6ff644cf8de41fa1ed41481a
msgid "(If you do not use the default shell, which is `bash`, please edit the configuration file for that shell accordingly.)"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:9
# dcd359a4dea7490ca3542cd80cedd1b9
msgid "Ubuntu Packaging Guide"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:11
# ebd18421432945aabd47d70638aa8372
msgid "Ubuntu is not only a free and open source operating system, its platform is also open and developed in a transparent fashion. The source code for every single component can be obtained easily and every single change to the Ubuntu platform can be reviewed."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:16
# 7f3ce9b2e20e49c7a0160c9d003898f0
msgid "This means you can actively get involved in improving it and the community of Ubuntu platform developers is always interested in helping peers getting started."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:20
# 47ba0e5cfcd04362a032ad348060f9d1
msgid "The guide is split up into two sections:"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:22
# 9e1010004a484ed9b90172c255d0cf5e
msgid "A list of articles based on tasks, things you want to get done."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:23
# a2b8ce6787cf44e9b77005f094de2b87
msgid "A set of knowledge-base articles that dig deeper into specific bits of our tools and workflows."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:26
# 27d1fb0863d1448e88d258e93359e1bd
msgid "This guide focuses on the Ubuntu Distributed Development packaging method. This is a new way of packaging which uses Distributed Revision Control branches.  It currently has some limitations which mean many teams in Ubuntu use :doc:`traditional packaging<./traditional-packaging>` methods.  See the :doc:`UDD Introduction<./udd-intro>` page for an introduction to the differences."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:33
# 835cbd13576e453fabfceb4bbfbee0bf
msgid "Articles"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:50
# 05592ba2e0254dd69c348cefba626b6f
msgid "Knowledge Base"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:3
# 38e6e4d0af4c4b8e9cd8c8234a9a6e51
msgid "Introduction to Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:5
# 437f83f9cd6d4670b4c29bcdfca379d9
msgid "Ubuntu is made up of thousands of different components, written in many different programming languages. Every component -  be it a software library, a tool or a graphical application - is available as a source package. Source packages in most cases consist of two parts: the actual source code and metadata. Metadata includes the dependencies of the package, copyright and licensing information, and instructions on how to build the package. Once this source package is compiled, the build process provides binary packages, which are the .deb files users can install."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:14
# fd5bcca4522048e2956faca619f9395a
msgid "Every time a new version of an application is released, or when someone makes a change to the source code that goes into Ubuntu, the source package must be uploaded to Launchpad's build machines to be compiled. The resulting binary packages then are distributed to the archive and its mirrors in different countries. The URLs in ``/etc/apt/sources.list`` point to an archive or mirror. Every day CD images are built for a selection of different Ubuntu flavours. Ubuntu Desktop, Ubuntu Server, Kubuntu and others specify a list of required packages that get on the CD. These CD images are then used for installation tests and provide the feedback for further release planning."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:24
# 51e2175c41cf4c8bbd0e878d9fddf056
msgid "Ubuntu's development is very much dependent on the current stage of the release cycle. We release a new version of Ubuntu every six months, which is only possible because we have established strict freeze dates. With every freeze date that is reached developers are expected to make fewer, less intrusive changes. Feature Freeze is the first big freeze date after the first half of the cycle has passed. At this stage features must be largely implemented. The rest of the cycle is supposed to be focused on fixing bugs. After that the user interface, then the documentation, the kernel, etc. are frozen, then the beta release is put out which receives a lot of testing. From the beta release onwards, only critical bugs get fixed and a release candidate release is made and if it does not contain any serious problems, it becomes the final release."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:39
# 746946e1abce46538b965585a236c7da
msgid "Thousands of source packages, billions of lines of code, hundreds of contributors require a lot of communication and planning to maintain high standards of quality. At the beginning of each release cycle we have the Ubuntu Developer Summit where developers and contributors come together to plan the features of the next releases. Every feature is discussed by its stakeholders and a specification is written that contains detailed information about its assumptions, implementation, the necessary changes in other places, how to test it and so on. This is all done in an open and transparent fashion, so even if you cannot attend the event in person, you can participate remotely and listen to a streamcast, chat with attendants and subscribe to changes of specifications, so you are always up to date."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:51
# c10b9e07f9644f7b99859c7407f808fe
msgid "Not every single change can be discussed in a meeting though, particularly because Ubuntu relies on changes that are done in other projects. That is why contributors to Ubuntu constantly stay in touch. Most teams or projects use dedicated mailing lists to avoid too much unrelated noise. For more immediate coordination, developers and contributors use Internet Relay Chat (IRC). All discussions are open and public."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:58
# 5508779d48894a17b500b83a5ccd9a5f
msgid "Another important tool regarding communication is bug reports. Whenever a defect is found in a package or piece of infrastructure, a bug report is filed in Launchpad. All information is collected in that report and its importance, status and assignee updated when necessary. This makes it an effective tool to stay on top of bugs in a package or project and organise the workload."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:65
# 40098a2860824d1ebc5793d93c7c3380
msgid "Most of the software available through Ubuntu is not written by Ubuntu developers themselves. Most of it is written by developers of other Open Source projects and then integrated into Ubuntu. These projects are called \"Upstreams\", because their source code flows into Ubuntu, where we \"just\" integrate it. The relationship to Upstreams is critically important to Ubuntu. It is not just code that Ubuntu gets from Upstreams, but it is also that Upstreams get users, bug reports and patches from Ubuntu (and other distributions)."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:74
# 466b633b55ea48dfa46b3c4b4d5567e7
msgid "The most important Upstream for Ubuntu is Debian. Debian is the distribution that Ubuntu is based on and many of the design decisions regarding the packaging infrastructure are made there. Traditionally, Debian has always had dedicated maintainers for every single package or dedicated maintenance teams. In Ubuntu there are teams that have an interest in a subset of packages too, and naturally every developer has a special area of expertise, but participation (and upload rights) generally is open to everyone who demonstrates ability and willingness."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:83
# ec414ba52da54a4b95ba4aa12bfd6e38
msgid "Getting a change into Ubuntu as a new contributor is not as daunting as it seems and can be a very rewarding experience. It is not only about learning something new and exciting, but also about sharing the solution and solving a problem for millions of users out there."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:88
# 2563fe48af2040ffbb24adfe8dceb6aa
msgid "Open Source Development happens in a distributed world with different goals and different areas of focus. For example there might be the case that a particular Upstream is interested in working on a new big feature while Ubuntu, because of the tight release schedule, is interested in shipping a solid version with just an additional bug fix. That is why we make use of \"Distributed Development\", where code is being worked on in various branches that are merged with each other after code reviews and sufficient discussion."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:98
# 59170cb4cd8841d1a8ccd528137a0b0e
msgid "In the example mentioned above it would make sense to ship Ubuntu with the existing version of the project, add the bugfix, get it into Upstream for their next release and ship that (if suitable) in the next Ubuntu release. It would be the best possible compromise and a situation where everybody wins."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:103
# ee2d6790f9864b9eace908ace0b81dc9
msgid "To fix a bug in Ubuntu, you would first get the source code for the package, then work on the fix, document it so it is easy to understand for other developers and users, then build the package to test it. After you have tested it, you can easily propose the change to be included in the current Ubuntu development release. A developer with upload rights will review it for you and then get it integrated into Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:112
# b4cbe6f422394d11ba5053ff36d79f34
msgid "When trying to find a solution it is usually a good idea to check with Upstream and see if the problem (or a possible solution) is known already and, if not, do your best to make the solution a concerted effort."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:116
# 22f423dd33ba49cf82692f0e453705e4
msgid "Additional steps might involve getting the change backported to an older, still supported version of Ubuntu and forwarding it to Upstream."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:119
# d68d3d8b21744d4c808b72b3ca29f927
msgid "The most important requirements for success in Ubuntu development are: having a knack for \"making things work again,\" not being afraid to read documentation and ask questions, being a team player and enjoying some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:123
# c5ae6ebcce6a4043b2e785dec57efc4b
msgid "Good places to ask your questions are ``ubuntu-motu@lists.ubuntu.com`` and ``#ubuntu-motu`` on ``irc.freenode.net``. You will easily find a lot of new friends and people with the same passion that you have: making the world a better place by making better Open Source software."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:3
# 482d57dad98a4c94a5c9356d302f8ebe
msgid "KDE Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:5
# f5e8ca336d8c40f9a9221bc93df183e9
msgid "Packaging of KDE programs in Ubuntu is managed by the Kubuntu and MOTU teams.  You can contact the Kubuntu team on the `Kubuntu mailing list`_ and ``#kubuntu-devel`` Freenode IRC channel.  More information about Kubuntu development is on the `Kubuntu wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:10
# dec194eeeb154da1bf8723d99ae64a69
msgid "Our packaging follows the practices of the ``Debian Qt/KDE Team`` and Debian KDE Extras Team.  Most of our packages are derived from the packaging of these Debian teams."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:15
# e90fc2161ad24d71b239b658a74b7a84
msgid "Patching Policy"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:17
# 5f34fb5f028a4e558ea01d24c6b5278c
msgid "Kubuntu does not add patches to KDE programs unless they come from the upstream authors or submitted upstream with the expectation they will be merged soon or we have consulted the issue with the upstream authors."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:22
# bb1e5963b78b4bd28302b781a06e7241
msgid "Kubuntu does not change the branding of packages except where upstream expects this (such as the top left logo of the Kickoff menu) or to simplify (such as removing splash screens)."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:27
#: ../ubuntu-packaging-guide/python-packaging.rst:31
# 0b304b60583c4342b48a112c1ce45ef6
# 862b7ef5e2a04d16bedfae44dc74457e
msgid "debian/rules"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:29
# a258bb91f55a4fed92d3329edaddfa43
msgid "Debian packages include some additions to the basic Debhelper usage. These are kept in the ``pkg-kde-tools`` package."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:32
# c095caaa12da457b8bdecc6fd5f8a2ca
msgid "Packages which use Debhelper 7 should add the ``--with=kde`` option. This will ensure the correct build flags are used and add options such as handling kdeinit stubs and translations::"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:39
# 4725dfb6e08947748b4a5d95948f8de8
msgid "Some newer KDE packages use the ``dhmk`` system, an alternative to ``dh`` made by the Debian Qt/KDE team.  You can read about it in /usr/share/pkg-kde-tools/qt-kde-team/2/README.  Packages using this will ``include /usr/share/pkg-kde-tools/qt-kde-team/2/debian-qt-kde.mk`` instead of running ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:47
# cdbd0c159b044fbf89bc892c0f774537
msgid "Translations"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:49
# 3731e26f99804e6ba1b9c339b685c5f1
msgid "Packages in main have their translations imported into Launchpad and exported from Launchpad into Ubuntu's language-packs."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:52
# bccb5bb7e7214f1ab452aabf21a6a752
msgid "So any KDE package in main must generate translation templates, include or make available upstream translations and handle ``.desktop`` file translations."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:56
# 480b7369e66e47c884b2be0da0997b08
msgid "To generate translation templates the package must include a ``Messages.sh`` file; complain to the upstream if it does not.  You can check it works by running ``extract-messages.sh`` which should produce one or more ``.pot`` files in ``po/``.  This will be done automatically during build if you use the ``--with=kde`` option to ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:63
# 1f95b17e54e743f496d0ac96544991d9
msgid "Upstream will usually have also put the translation ``.po`` files into the ``po/`` directory.  If they do not, check if they are in separate upstream language packs such as the KDE SC language packs.  If they are in separate language packs Launchpad will need to associate these together manually, contact `dpm`_ to do this."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:69
# 76efa7d12d2b4db896d891cdbe617b1b
msgid "If a package is moved from universe to main it will need to be re-uploaded before the translations get imported into Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:72
# 87406fb72d31442eb0caec1e21193043
msgid "``.desktop`` files also need translations.  We patch KDELibs to read translations out of ``.po`` files which are pointed to by a line ``X-Ubuntu-Gettext-Domain=`` added to ``.desktop`` files at package build time.  A .pot file for each package is be generated at build time and .po files need to be downloaded from upstream and included in the package or in our language packs.  The list of .po files to be downloaded from KDE's repositories is in ``/usr/lib/kubuntu-desktop-i18n/desktop-template-list``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:82
# dd3e11083c7b472687dd9a90abd6eec5
msgid "Library Symbols"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:84
# 1b6749e27ea34d5386f6c8cf970252e7
msgid "Library symbols are tracked in ``.symbols`` files to ensure none go missing for new releases.  KDE uses C++ libraries which act a little differently compared to C libraries.  Debian's Qt/KDE Team have scripts to handle this. See `Working with symbols files`_ for how to create and keep these files up to date."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:3
# 550d172303a347949389941aa6cb6d8d
msgid "Shared Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:5
# b11f561a983f42c1a5905f4a469407c5
msgid "Shared libraries are compiled code which is intended to be shared among several different programs.  They are distributed as ``.so`` files in ``/usr/lib/``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:9
# 5309bab420924b66accc98f0499887f5
msgid "A library exports symbols which are the compiled versions of functions, classes and variables.  A library has a name called an SONAME which includes a version number.  This SONAME version does not necessarily match the public release version number.  A program gets compiled against a given SONAME version of the library.  If any of the symbols is removed or changes then the version number needs to be changed which forces any packages using that library to be recompiled against the new version.  Version numbers are usually set by upstream and we follow them in our binary package names called an ABI number, but sometimes upstreams do not use sensible version numbers and packagers have to keep separate version numbers."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:21
# 190bbec08b3745f49ec7aebb52e3a686
msgid "Libraries are usually distributed by upstream as standalone releases. Sometimes they are distributed as part of a program.  In this case they can be included in the binary package along with the program (this is called bundling) if you do not expect any other programs to use the library, more often they should be split out into separate binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:27
# 846d1c275d77433499ddbf2ad950db1b
msgid "The libraries themselves are put into a binary package named ``libfoo1`` where ``foo`` is the name of the library and ``1`` is the version from the SONAME. Development files from the package, such as header files, needed to compile programs against the library are put into a package called ``libfoo-dev``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:34
# 1c5d9c63474b49b0aa98cbdc0b0a426c
msgid "An Example"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:36
# d894a0d4e5964d06bcb36809dfe3bcbc
msgid "We will use libnova as an example::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:41
# f17cda1081b947ba990498abcdbc53f1
msgid "To find the SONAME of the library run::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:45
# 4cbcfb7e1ddd4dd7be77e2688484414d
msgid "The SONAME is ``libnova-0.12.so.2``, which matches the file name (usually the case but not always). Here upstream has put the upstream version number as part of the SONAME and given it an ABI version of ``2``.  Library package names should follow the SONAME of the library they contain. The library binary package is called ``libnova-0.12-2`` where ``libnova-0.12`` is the name of the library and ``2`` is our ABI number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:52
# 5f794f9478744a548d3c5e3a2e623b74
msgid "If upstream makes incompatible changes to their library they will have to reversion their SONAME and we will have to rename our library.  Any other packages using our library package will need to recompiled against the new version, this is called a transition and can take some effort. Hopefully our ABI number will continue to match upstream's SONAME but sometimes they introduce incompatibilities without changing their version number and we will need to change ours."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:60
# 4bc5a91b881f44e19d93b413d30bbd93
msgid "Looking in debian/libnova-0.12-2.install we see it includes two files::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:65
# 36d86cfccd6644d89efde603293d3647
msgid "The last one is the actual library, complete with minor and point version number.  The first one is a symlink which points to the actual library.  The symlink is what programs using the library will look for, the running programs do not care about the minor version number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:70
# 4d4eb75dc00243f7b9c0593c9829c707
msgid "``libnova-dev.install`` includes all the files needed to compile a program with this library.  Header files, a config binary, the ``.la`` libtool file and ``libnova.so`` which is another symlink pointing at the library, programs compiling against the library do not care about the major version number (although the binary they compile into will)."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:76
# 7f706bbe20bf4eddb0f8057062b12818
msgid "``.la`` libtool files are needed on some non-Linux systems with poor library support but usually cause more problems than they solve on Debian systems.  It is a current `Debian goal to remove .la files`_ and we should help with this."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:82
# bced8c5468b741e1b00ed3735b6e3c68
msgid "Static Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:84
# f040cfd448fa405bbeaa276b7d1b815c
msgid "The -dev package also ships ``usr/lib/libnova.a``.  This is a static library, an alternative to the shared library.  Any program compiled against the static library will include the code directory into itself.  This gets round worrying about binary compatibility of the library.  However it also means that any bugs, including security issues, will not be updated along with the library until the program is recompiled.  For this reason programs using static libraries are discouraged."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:94
# f5279f94f9ac43e9a4266df1a0aac825
msgid "Symbol Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:96
# bad2f53be9c44ac5afb8095a1da8d6c6
msgid "When a package builds against a library the ``shlibs`` mechanism will add a package dependency on that library.  This is why most programs will have ``Depends: ${shlibs:Depends}`` in ``debian/control``.  That gets replaced with the library dependencies at build time.  However shlibs can only make it depend on the major ABI version number, ``2`` in our libnova example, so if new symbols get added in libnova 2.1 a program using these symbols could still be installed against libnova ABI 2.0 which would then crash."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:104
# bab2e8659af64bb1ae2e04bcb34d490b
msgid "To make the library dependencies more precise we keep ``.symbols`` files that list all the symbols in a library and the version they appeared in."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:107
# 99dcfe1150684aca9a98a5a40a9546aa
msgid "libnova has no symbols file so we can create one.  Start by compiling the package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:112
# bcec3037ce144348b789c89a9112931e
msgid "The ``-nc`` will cause it to finish at the end of compilation without removing the built files.  Change to the build and run ``dpkg-gensymbols`` for the library package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:119
# 44e0041b5fc443cdb6acd54b25fb4ec3
msgid "This makes a diff file which you can self apply::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:123
# 1aa89fa4b3124c6183960168e32ff6b0
msgid "Which will create a file named similar to ``dpkg-gensymbolsnY_WWI`` that lists all the symbols.  It also lists the current package version.  We can remove the packaging version from that listed in the symbols file because new symbols are not generally added by new packaging versions, but by the upstream developers::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:130
# 186edab60e3b49d6901a51dede49e9b9
msgid "Now move the file into its location, commit and do a test build::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:138
# 031c7a23b9894110a1708d2516f8c2ed
msgid "If it successfully compiles the symbols file is correct.  With the next upstream version of libnova you would run dpkg-gensymbols again and it will give a diff to update the symbols file."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:143
# 6796615584f2427ea9e2c71cb1ddc88b
msgid "C++ Library Symbols Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:145
# 828f87f5fb63434cadec2cc90db73800
msgid "C++ has even more exacting standards of binary compatibility than C.  The Debian Qt/KDE Team maintain some scripts to handle this, see their `Working with symbols files`_ page for how to use them."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:150
# 306429d235954cc3a46fedbda0043d09
msgid "Further Reading"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:152
# 59355d322da8413281c353366eb6f302
msgid "Junichi Uekawa's `Debian Library Packaging Guide`_ goes into this topic in more detail."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:3
# 2d26700d60814d0e81707125c9143fc5
msgid "Packaging New Software"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:5
# 39deb6d1e53b42aab1a4d09b348a5fd4
msgid "While there are thousands of packages in the Ubuntu archive, there are still a lot nobody has gotten to yet. If there is an exciting new piece of software that you feel needs wider exposure, maybe you want to try your hand at creating a package for Ubuntu or a PPA_. This guide will take you through the steps of packaging new software."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:11
# aac574c784f0400c94a983f920fef489
msgid "You will want to read the :doc:`Getting Set Up<./getting-set-up>` article first in order to prepare your development environment."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:15
# d22cd164be9141799d0f424193ba2323
msgid "Checking the Program"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:17
# 98b84fcdcc0e4238aae10a7650653ade
msgid "The first stage in packaging is to get the released tar from upstream (we call the authors of applications \"upstream\") and check that it compiles and runs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:20
# 279938ed46084b19a314a3f5b9378e55
msgid "This guide will take you through packaging a simple application called GNU Hello which has been posted on GNU.org_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:23
# d653e2d25f804692888a75e93866d91c
msgid "If you don't have the build tools lets make sure we have them first.  Also if you don't have the required dependencies lets install those as well."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:26
# 877a2a2a24d54999a3004ac572eb068e
msgid "Install build tools::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:30
# edec257e8ff64989a3585b108c7369e1
msgid "Download main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:34
# 47adfa7ba2ea4714b231d11df107a1ba
msgid "Now uncompress main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:39
# 02ba507f8bfa44c79cb33bada7ee2f5c
msgid "This application uses the autoconf build system so we want to run ``./configure`` to prepare for compilation."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:42
# df79590359e2411183f30890c7b4de14
msgid "This will check for the required build dependencies. As ``hello`` is a simple example, ``build-essential`` should provide everything we need. For more complex programs, the command will fail if you do not have the needed libraries and development files. Install the needed packages and repeat until the command runs successfully.::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:50
# fe9c27f61f1541f5b738c0ed38cacc81
msgid "Now you can compile the source::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:54
# 7919b4076f744388a20e628146e98e88
msgid "If compilation completes successfully you can install and run the program::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:60
# 1accea58201d4080abf7ddbea32e8124
msgid "Starting a Package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:62
# ec9f32e03ba04c5b8a3b06485d9b0761
msgid "``bzr-builddeb`` includes a plugin to create a new package from a template. The plugin is a wrapper around the ``dh_make`` command. You should already have these if you installed ``packaging-dev``. Run the command providing the package name, version number, and path to the upstream tarball::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:71
# cf1fce3e3a534c95aa00a837a9c57aaa
msgid "When it asks what type of package type ``s`` for single binary. This will import the code into a branch and add the ``debian/`` packaging directory.  Have a look at the contents.  Most of the files it adds are only needed for specialist packages (such as Emacs modules) so you can start by removing the optional example files::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:80
# 1a8c6186652f42588a5eee0e29b001b5
msgid "You should now customise each of the files."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:82
# f99faaa7ce5e44fbb2e00f258e43877a
msgid "In ``debian/changelog`` change the version number to an Ubuntu version: ``2.7-0ubuntu1`` (upstream version 2.7, Debian version 0, Ubuntu version 1).  Also change ``unstable`` to the current development Ubuntu release such as ``precise``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:87
# 8839c7f6c9af4d90b3585ef54e1c10d8
msgid "Much of the package building work is done by a series of scripts called ``debhelper``.  The exact behaviour of ``debhelper`` changes with new major versions, the compat file instructs ``debhelper`` which version to act as.  You will generally want to set this to the most recent version which is ``8``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:93
# 76a9e910d00b4de9899e01ba2c399d23
msgid "``control`` contains all the metadata of the package.  The first paragraph describes the source package. The second and following paragraphs describe the binary packages to be built.  We will need to add the packages needed to compile the application to ``Build-Depends:``. For ``hello``, make sure that it includes at least::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:101
# bfbc2727759d4daa974c9acdf10974ff
msgid "You will also need to fill in a description of the program in the ``Description:`` field."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:104
# 1ad54caef90a45b7a146da0d64f18ce1
msgid "``copyright`` needs to be filled in to follow the licence of the upstream source.  According to the hello/COPYING file this is GNU GPL 3 or later."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:107
# aa73daf6ccb44529bfbe5584bcd3fa39
msgid "``docs`` contains any upstream documentation files you think should be included in the final package."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:110
# aa15fa08d9c140e78d08abed5f53366e
msgid "``README.source`` and ``README.Debian`` are only needed if your package has any non-standard features, we don't so you can delete them."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:113
# 205494c7d14e47b189af68ede43125f7
msgid "``source/format`` can be left as is, this describes the version format of the source package and should be ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:116
# 0bfb564be7a145d6868a1b345f8580cd
msgid "``rules`` is the most complex file.  This is a Makefile which compiles the code and turns it into a binary package.  Fortunately most of the work is automatically done these days by ``debhelper 7`` so the universal ``%`` Makefile target just runs the ``dh`` script which will run everything needed."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:121
# a3cebd9aab564dffa902b01d4b3d5fc8
msgid "All of these file are explained in more detail in the :doc:`overview of the debian directory<./debian-dir-overview>` article."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:124
# bf7a8398fd684d6184df57343c5581ed
msgid "Finally commit the code to your packaging branch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:129
#: ../ubuntu-packaging-guide/udd-working.rst:69
# 1bc771b7e74c4c7bbbb54b5d836f6d5b
# 7ac8a7fe94ac475caa81f2ccca4dbc6d
msgid "Building the package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:131
# 84cd09fcbe604ed59c71ce91b82c9d0b
msgid "Now we need to check that our packaging successfully compiles the package and builds the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:137
# 7100c4a88f32476cbb1db334f09178ae
msgid "``bzr builddeb`` is a command to build the package in its current location. The ``-us -uc`` tell it there is no need to GPG sign the package.  The result will be placed in ``..``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:141
# a8fcae9465424eeb8b814ac2e5034743
msgid "You can view the contents of the package with::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:145
# 5e95d7496f7e4bce823de863f9466043
msgid "Install the package and check it works::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:150
# 2118d76af76845168cc06c8a2b080557
msgid "Next Steps"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:152
# 450263fb1efc43b5841441ca0b0e115d
msgid "Even if it builds the .deb binary package, your packaging may have bugs.  Many errors can be automatically detected by our tool ``lintian`` which can be run on both the source .dsc metadata file and the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:160
# 5aacc40415ff4e8c9d20fd7272824c82
msgid "A description of each of the problems it reports can be found on the `lintian website`_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:163
# c6384544d54846ba84d0fda2f53b4145
msgid "After making a fix to the packaging you can rebuild using ``-nc`` \"no clean\" without having to build from scratch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:168
# 9ad487d435b74f258fdb0bdc55bc6854
msgid "Having checked that the package builds locally you should ensure it builds on a clean system using ``pbuilder``. Since we are going to upload to a PPA (Personal Package Archive) shortly, this upload will need to be *signed* to allow Launchpad to verify that the upload comes from you (you can tell the upload will be signed because the ``-us`` and ``-uc`` flags are not passed to ``bzr builddeb`` like they were before). For signing to work you need to have set up GPG. If you haven't set up ``pbuilder-dist`` or GPG yet, :doc:`do so now<./getting-set-up>`::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:181
# bc900fcbc78e49a9ab6bea45b82cb3cf
msgid "When you are happy with your package you will want others to review it.  You can upload the branch to Launchpad for review::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:186
# b6834f048673450f90bb18135cd30592
msgid "Uploading it to a PPA will ensure it builds and give an easy way for you and others to test the binary packages.  You will need to set up a PPA in Launchad then upload with ``dput``::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:192
# 9ba93fdd362443e8b1f603496f0bb04c
msgid "See :doc:`uploading<./udd-uploading>` for more information."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:194
# 077790a323db4cd686ae74b3f3cbf415
msgid "You can ask for reviews in ``#ubuntu-motu`` IRC channel, or on the `MOTU mailing list`_.  There might also be a more specific team you could ask such as the GNU team for more specific questions."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:199
# 5038e3991f8b496d940399d163c59d36
msgid "Submitting for inclusion"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:201
# ce5b9d14e4c649b69de35065d2b5bae0
msgid "There are a number of paths that a package can take to enter Ubuntu. In most cases, going through Debian first can be the best path. This way ensures that your package will reach the largest number of users as it will be available in not just Debian and Ubuntu but all of their derivatives as well. Here are some useful links for submitting new packages to Debian:"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:208
# 9d91ef7a3faa4363b7fd15a10741bd7e
msgid "`Debian Mentors FAQ`_ - debian-mentors is for the mentoring of new and prospective Debian Developers. It is where you can find a sponsor to upload your package to the archive."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:212
# d6ddf510185f4a6aa30b320936eed8ae
msgid "`Work-Needing and Prospective Packages`_ - Information on how to file \"Intent to Package\" and \"Request for Package\" bugs as well as list of open ITPs and RFPs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:216
# 7fa6629d3ad8438a9526168ee5b32eed
msgid "`Debian Developer's Reference, 5.1. New packages`_ - The entire document is invaluable for both Ubuntu and Debian packagers. This section documents processes for submitting new packages."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:220
# 4d15df9d7fd445aeb3be1975641db56f
msgid "In some cases, it might make sense to go directly into Ubuntu first. For instance, Debian might be in a freeze making it unlikely that your package will make it into Ubuntu in time for the next release. This process is documented on the `\"New Packages\"`_ section of the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:3
# bd7ea63e67e34203b43f183809e9dd5c
msgid "Patches to Packages"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:5
# 2a49ddd0d005418aaffbc9135a192d0c
msgid "Sometimes, Ubuntu package maintainers have to change the upstream source code in order to make it work properly on Ubuntu.  Examples include, patches to upstream that haven't yet made it into a released version, or changes to the upstream's build system needed only for building it on Ubuntu.  We could change the upstream source code directly, but doing this makes it more difficult to remove the patches later when upstream has incorporated them, or extract the change to submit to the upstream project.  Instead, we keep these changes as separate patches, in the form of diff files."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:14
# 8d4e2ea3ed344ff2a91b9e8337de387e
msgid "There are a number of different ways of handling patches in Debian packages, fortunately we are standardizing on one system, `Quilt`_, which is now used by most packages."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:18
# 3803e876e1b647fbbe24dc8c46774de6
msgid "Let's look at an example package, ``kamoso`` in Natty::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:22
# 286451a977834bd7a7f62ff58cccbc5b
msgid "The patches are kept in ``debian/patches``.  This package has one patch ``kubuntu_01_fix_qmax_on_armel.diff`` to fix a compile failure on ARM.  The patch has been given a name to describe what it does, a number to keep the patches in order (two patches can overlap if they change the same file) and in this case the Kubuntu team adds their own prefix to show the patch comes from them rather than from Debian."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:29
# 7b9c8e401a9d4a5a951be0e34680e6fb
msgid "The order of patches to apply is kept in ``debian/patches/series``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:32
# cd3c8fdae9fe4998a0d1408349c2856f
msgid "Patches with Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:34
# 840bbcdf72ab4fabb792e7f646031a2e
msgid "Before working with Quilt you need to tell it where to find the patches.  Add this to your ``~/.bashrc``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:39
# 6e72379c3ded407783e6f77c435c4982
msgid "And source the file to apply the new export::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:43
# 96c535b6be684bd2a0fdb0173cabe532
msgid "By default all patches are applied already to UDD checkouts or downloaded packages.  You can check this with::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:49
# 85cfe11a86aa48808cebbf30ea6e2139
msgid "If you wanted to remove the patch you would run ``pop``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:57
# 5b18991f154d4c129a02a2a6997bd60a
msgid "And to apply a patch you use ``push``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:67
# 1cf1f1d9811a42ccb88c06bce8a5f3a5
msgid "Adding a New Patch"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:69
# 2f88d695b2894202ad3e9a5b6fdd3f0c
msgid "To add a new patch you need to tell Quilt to create a new patch, tell it which files that patch should change, edit the files then refresh the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:81
# 3f013faaf401486ab5038bbdc653bf29
msgid "The ``quilt add`` step is important, if you forget it the files will not end up in the patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:84
# bf89669f074949a3bfce988e3de6e8a5
msgid "The change will now be in ``debian/patches/kubuntu_02_program_description.diff`` and the ``series`` file will have had the new patch added to it.  You should add the new file to the packaging::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:94
# 2c545e1644884ac5af6aa2d69b81dbdd
msgid "Quilt keeps its metadata in the ``.pc/`` directory, so currently you need to add that to the packaging too.  This should be improved in future."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:97
# 9cbc2e8ec463457781be8b01f4595163
msgid "As a general rule you should be careful adding patches to programs unless they come from upstream, there is often a good reason why that change has not already been made.  The above example changes a user interface string for example, so it would break all translations.  If in doubt, do ask the upstream author before adding a patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:104
# 16ac4e0e39514fa79a01009f1529a544
msgid "Upgrading to New Upstream Versions"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:106
# cf00b2476e624e5f870e01e7f0e969e2
msgid "When you upgrade to a new upstream version, patches will often become out of date.  They might need to be refreshed to match the new upstream source or they might need to be removed altogether."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:110
# a697d1886687450d983bd3c4595f3d4c
msgid "You should start by ensuring no patches are applied.  Unfortunately a commit is needed before you can merge in the new upstream (this is `bug 815854`_)::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:116
# 0748ba1b9b0f45a291564b9ee968d0b3
msgid "Then upgrade to the new version::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:120
# 33b230ed59014628a0251eb15e3b1ad6
msgid "Then apply the patches one at a time to check for problems::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:129
# b17dcc31feea498796104e00a7b4ed4a
msgid "If it can be reverse-applied this means the patch has been applied already by upstream, so we can delete the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:135
# 0e55bcb7eae44363b57e0c829693d071
msgid "Then carry on::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:140
# e1a7f5d04259478d96a4d27f3a20ca55
msgid "It is a good idea to run refresh, this will update the patch relative to the changed upstream source::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:146
# 07705d86ac6c4e00a0da597052299d7f
msgid "Then commit as usual::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:152
# 0d8369990be344ccb1faa0ab5cda43c2
msgid "Making A Package Use Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:154
# 1fe8ef5a5cef49e99d61bea2d7373336
msgid "Modern packages use Quilt by default, it is built into the packaging format.  Check in ``debian/source/format`` to ensure it says ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:158
# ebae12876a4a49f791b48c728a055121
msgid "Older packages using source format 1.0 will need to explicitly use Quilt, usually by including a makefile into ``debian/rules``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:163
# 9425e39477d74856908944ac774a4a9e
msgid "Other Patch Systems"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:165
# 84426a80635d4b6795510de9f20df908
msgid "Other patch systems used by packages include ``dpatch`` and ``cdbs simple-patchsys``, these work similarly to Quilt by keeping patches in ``debian/patches`` but have different commands to apply, un-apply or create patches. You can find out which patch system is used by a package by using the ``what-patch`` command (from the ``ubuntu-dev-tools`` package). You can use ``edit-patch``, shown in `previous chapters`_, as a reliable way to work with all systems."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:173
# 629c85ac380b409d8c7f73ab60e93391
msgid "In even older packages changes will be included directly to sources and kept in the ``diff.gz`` source file.  This makes it hard to upgrade to new upstream versions or differentiate between patches and is best avoided."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:177
# 419bc31b9a26436ca6b5a7566793a5d5
msgid "Do not change a package's patch system without discussing it with the Debian maintainer or relevant Ubuntu team.  If there is no existing patch system then feel free to add Quilt."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:3
# b813df953ce94ca3ada0914bc55b4b4f
msgid "Packaging Python modules and applications"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:5
# dbd6f2a9161943c4bc81764128e914ae
msgid "Our packaging follows Debian’s `Python policy`_. We will use the `python-markdown`_ package as an example, which can be downloaded from `PyPI`_. You can look at its packaging at its `Subversion repository`_."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:7
# 26c70bd88cbc4cedbcb13ee2bade66b8
msgid "There are two types of Python packages — *modules* and *apps*."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:9
# 5a58ef2fcae34a56916735ca8ae656b4
msgid "At the time of writing, Ubuntu has two incompatible versions of Python — *2.x* and *3.x*. ``/usr/bin/python`` is a symbolic link to a default Python 2.x version, and ``/usr/bin/python3`` — to a default Python 3.x version. Python modules should be built against all supported Python versions."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:11
# 0cdb385422e5482dbdb0a4dd38a902a2
msgid "If you are going to package a new Python module, you might find the ``py2dsc`` tool useful (available in `python-stdeb`_ package)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:14
# 990800eddf58498fb3c12937ce3321e1
msgid "debian/control"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:16
# dee1f96596c144cebb8f1b4bd1525b6a
msgid "Python 2.x and 3.x versions of the package should be in separate binary packages. Names should have ``python{,3}-modulename`` format (like: ``python3-dbus.mainloop.qt``). Here, we will use ``python-markdown`` and ``python3-markdown`` for module packages and ``python-markdown-doc`` for the documentation package."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:18
# 61f5ae565c73402eba20df960eaa3c10
msgid "Things in ``debian/control`` that are specific for a Python package:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:20
# 0b33eea917fc4d48aaca4ff7c35c1ea0
msgid "The section of module packages should be ``python``, and ``doc`` for the documentation package. For an application, a single binary package will be enough."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:21
# 44ee2e2530244e0c88936f42eeaa717d
msgid "We should add build dependencies on ``python-all (>= 2.6.6-3~)`` and ``python3-all (>= 3.1.2-7~)`` to make sure Python helpers are available (see the next section for details)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:22
# 40fdd26ebf12449a8dcf4972bb3a0e49
msgid "It’s recommended to add ``X-Python-Version`` and ``X-Python3-Version`` fields — see “`Specifying Supported Versions`_” section of the Policy for details. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:27
# 1daecb4e11e541f4a1661e0cbd438d85
msgid "If your package works only with Python 2.x or 3.x, build depend only on one ``-all`` package and use only one ``-Version`` field."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:28
# 3d017f22b11d471282ae69b83b96cec8
msgid "Module packages should have ``{python:Depends}`` and ``{python3:Depends}`` substitution variables (respectively) in their dependency lists."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:33
# 101189feb1e24a4f999881066def1dcc
msgid "The recommended helpers for python modules are ``dh_python2`` and ``dh_python3``. Unfortunately, ``debhelper`` doesn’t yet build Python 3.x packages automatically (see `bug 597105`_ in Debian BTS), so we’ll need to do that manually in override sections (skip this if your package doesn’t support Python 3.x)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:35
# f9ed72fdf9794be1a99f9b4e9105afbf
msgid "Here’s our ``debian/rules`` file (with annotations):"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:70
# a1265a3755d34798bdf5b59554064383
msgid "It is also a good practice to run tests during the build, if they are shipped by upstream. Usually tests can be invoked using ``setup.py test`` or ``setup.py check``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:73
# e6abd19e7ad54b34ab42b1d489b8a073
msgid "debian/\\*.install"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:75
# 8c3c9f637c6e4fd8bca9468d66457d7d
msgid "Python 2.x modules are installed into ``/usr/share/pyshared/`` directory, and symbolic links are created in ``/usr/lib/python2.x/dist-packages/`` for every interpreter version, while Python 3.x ones are all installed into ``/usr/lib/python3/dist-packages/``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:77
# 62515e68cdde49c8b541e7ac1b6fb039
msgid "If your package is an application and has private Python modules, they should be installed in ``/usr/share/module``, or ``/usr/lib/module`` if the modules are architecture-dependent (e.g. extensions) (see “`Programs Shipping Private Modules`_” section of the Policy)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:79
# c4f0203ae58b4c7abb205d5968a82a20
msgid "So, our ``python-markdown.install`` file will look like this (we’ll also want to install a ``markdown_py`` executable)::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:84
# f38fd542a70c4c53947e60b3f0a744a0
msgid "and ``python3-markdown.install`` will only have one line::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:89
# cc07a9ecfaee48fb8c3732ade9a77de3
msgid "The ``-doc`` package"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:91
# 8d9f7c0ab94b4cddb91b3ebe777043a3
msgid "The tool most commonly used for building Python docs is `Sphinx`_. To add Sphinx documentation to your package (using ``dh_sphinxdoc`` helper), you should:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:93
# 7819390d317948e088c61cbf68376cba
msgid "Add a build-dependency on ``python-sphinx`` or ``python3-sphinx`` (depending on what Python version do you want to use);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:94
# 69eb95d5ded94f4583d3e7841a3a95a5
msgid "Append ``sphinxdoc`` to the ``dh --with`` line;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:95
# e0e8d90aa8134f98a20cf7cb04bde038
msgid "Run ``setup.py build_sphinx`` in ``override_dh_auto_build`` (sometimes not needed);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:96
# 05e63c1e9b504f218fa231ebd44ce1aa
msgid "Add ``{sphinxdoc:Depends}`` to the dependency list of your ``-doc`` package;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:97
# 9ec54534e2c44971bccc0bc40310a99d
msgid "Add the path of the built docs directory (usually ``build/sphinx/html``) to your ``.docs`` file."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:99
# f757fffcdc034efbb348e2a22fe8d439
msgid "In our case, the docs are automatically built in ``build/docs/`` directory when we run ``setup.py build``, so we can simply put this in the ``python-markdown-doc.docs`` file::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:103
# 5c75cbd42a8b4a048f45f5da378106e6
msgid "Because docs also contain source ``.txt`` files, we’ll also tell ``dh_compress`` to not compress them — by adding this to ``debian/rules``:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:111
# 69ce8402bf8c4d25b8c10cf990faf538
msgid "Checking for packaging mistakes"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:113
# 00af8fe284584bd8bb621eaf9b4cb343
msgid "Along with ``lintian``, there is a special tool for checking Python packages — ``lintian4py``. It is available in the `lintian4python`_ package. For example, these two commands invoke both versions of ``lintian`` and check source and binary packages::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:118
# 6c2ccd24b50e471fad07b65817c27d90
msgid "Here, ``-EI`` option is used to enable experimental and informational tags."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:121
# c90f6a70e3dd4a55be41747c7dc6f76c
msgid "See also"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:123
# 5ebe3a8b01d9475a9b4f41f0764358e2
msgid "The `Python policy`_;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:124
# d1c1998754f646448e1fc4b2bc917604
msgid "`Python/Packaging`_ article on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:125
# eee6ed178eae4adcab44032077caf553
msgid "`Python/LibraryStyleGuide`_ and `Python/AppStyleGuide`_ articles on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:126
# 18e45507b281471ba407063e701457a4
msgid "Debian `python-modules`_ and `python-apps`_ teams."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:3
# 1a3c84192ad04da881be96b3acbb8cbf
msgid "Security and Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:6
# 28f37b0fa72345f59598961458440f4e
msgid "Fixing a Security Bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:11
# bf8fe374f4ec468cb7941bf2645ea23b
msgid "Fixing security bugs in Ubuntu is not really any different than :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`, and it is assumed that you are familiar with patching normal bugs. To demonstrate where things are different, we will be updating the dbus package in Ubuntu 10.04 LTS (Lucid Lynx) for a security update."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:19
# de00df3a631f4adf981791739d0fd6af
msgid "Obtaining the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:21
# 30a570b160164b90a8e9a4e26c14b335
msgid "In this example, we already know we want to fix the dbus package in Ubuntu 10.04 LTS (Lucid Lynx). So first you need to determine the version of the package you want to download. We can use the ``rmadison`` to help with this::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:30
# 2347ef0760cf4fd899e911d1cc1f168c
msgid "Typically you will want to choose the highest version for the release you want to patch that is not in -proposed or -backports. Since we are updating Lucid's dbus, you'll download 1.2.16-2ubuntu4.2 from lucid-updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:38
# 9bb0ed44f02a4141a924f1a28d20bf4a
msgid "Patching the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:39
# 7c2b92b7e00843e6bc073051cc3738b9
msgid "Now that we have the source package, we need to patch it to fix the vulnerability. You may use whatever patch method that is appropriate for the package, including :doc:`UDD techniques<./udd-intro>`, but this example will use ``edit-patch`` (from the ubuntu-dev-tools package). ``edit-patch`` is the easiest way to patch packages and it is basically a wrapper around every other patch system you can imagine."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:46
# cee637c5d6dc4cd6964089034dc5935c
msgid "To create your patch using ``edit-patch``::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:51
# 6c8e9c3e4dad4172adab3d2179e91d6c
msgid "This will apply the existing patches and put the packaging in a temporary directory. Now edit the files needed to fix the vulnerability.  Often upstream will have provided a patch so you can apply that patch::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:57
# 2c0fffbb1f7e4bd99927debcb5cf3914
msgid "After making the necessary changes, you just hit Ctrl-D or type exit to leave the temporary shell."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:61
# 464e49edb7a548a58487fe8b75754a70
msgid "Formatting the changelog and patches"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:63
# 26af879805df44e58aebd32e8cfc50f8
msgid "After applying your patches you will want to update the changelog. The ``dch`` command is used to edit the ``debian/changelog`` file and ``edit-patch`` will launch ``dch`` automatically after un-applying all the patches. If you are not using ``edit-patch``, you can launch ``dch -i`` manually. Unlike with regular patches, you should use the following format (note the distribution name uses lucid-security since this is a security update for Lucid) for security updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:80
# 4c38f6a9442a418f95ce41b72cd64217
msgid "Update your patch to use the appropriate patch tags. Your patch should have at a minimum the Origin, Description and Bug-Ubuntu tags. For example, edit debian/patches/99-fix-a-vulnerability.patch to have something like::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:91
# 02a3dba11a6b430fb16ebe71a16700bf
msgid "Multiple vulnerabilities can be fixed in the same security upload; just be sure to use different patches for different vulnerabilities."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:95
# 3ba7ad68af2a4968a4efc4b86361e654
msgid "Test and Submit your work"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:97
# 2bc623cc07874c928de54f103e922931
msgid "At this point the process is the same as for :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`. Specifically, you will want to:"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:100
# c09cfa7a0c9f471bb8f19ea95ff32871
msgid "Build your package and verify that it compiles without error and without any added compiler warnings"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:102
# 8dbb07e886e849c1979d053db3a90772
msgid "Upgrade to the new version of the package from the previous version"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:103
# 213f3ed286784766846204bc0d49dd16
msgid "Test that the new package fixes the vulnerability and does not introduce any regressions"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:105
# 1542b9bb9b344f5f8412d42d0aedbe49
msgid "Submit your work via a Launchpad merge proposal and file a Launchpad bug being sure to mark the bug as a security bug and to subscribe ``ubuntu-security-sponsors``"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:109
# 1601aa2d5b54436881e26bd9ae4a1713
msgid "If the security vulnerability is not yet public then do not file a merge proposal and ensure you mark the bug as private."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:112
# e8a89cf71c7a4d35861486a18df6b14a
msgid "The filed bug should include a Test Case, i.e. a comment which clearly shows how to recreate the bug by running the old version then how to ensure the bug no longer exists in the new version."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:116
# 244be13f80444329b5ed5032566eeab2
msgid "The bug report should also confirm that the issue is fixed in Ubuntu versions newer than the one with the proposed fix (in the above example newer than Lucid).  If the issue is not fixed in newer Ubuntu versions you should prepare updates for those versions too."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:123
# abc1dab8d8744e11919e749c16c1d896
msgid "Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:125
# 7c804d7d3c6446108b4e4f0afa4cd2a1
msgid "We also allow updates to releases where a package has a high impact bug such as a severe regression from a previous release or a bug which could cause data loss.  Due to the potential for such updates to themselves introduce bugs we only allow this where the change can be easily understood and verified."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:130
# 96f7e4b559b54ffb8e81fcd36229dbdb
msgid "The process for Stable Release Updates is just the same as the process for security bugs except you should subscribe ``ubuntu-sru`` to the bug."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:133
# 73520b963a7044c9b49c15c41346d3c8
msgid "The update will go into the ``proposed`` archive (for example ``lucid-proposed``) where it will need to be checked that it fixes the problem and does not introduce new problems.  After a week without reported problems it can be moved to ``updates``."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:138
# 583450bcd1a54a95b4127b0cd8b4f8b0
msgid "See the `Stable Release Updates wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:3
# 134ba4c53aac40ccb70b48a8b83fd9e1
msgid "Traditional Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:5
# dc798fe9c0dc4f9394e51c988e65e314
msgid "The majority of this guide deals with :doc:`Ubuntu Distributed Development <./udd-intro>` (UDD) which utilizes the distributed version control system (DVCS) Bazaar for :ref:`retrieving package sources <branching>` and submitting fixes with :ref:`merge proposals. <merge-proposal>` This article will discuss what we will call traditional packaging methods for lack of a better word. Before Bazaar was adopted for Ubuntu development, these were the typical methods for contributing to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:13
# dc045f2f3d0844b2aab192b7ca1927c5
msgid "In some cases, you may need to use these tools instead of UDD. So it is good to be familiar with them. Before you begin, you should already have read the article :doc:`Getting Set Up. <./getting-set-up>`"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:18
#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:3
# e556351e4c634af8bebc6c6108bc30d7
# c16388ff66f642e9bf6e7b937a678f49
msgid "Getting the Source"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:20
# dd9dd8b968fe4e7ba53cb7035437bdda
msgid "In order to get a source package, you can simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:24
# 4be030eeaa5348b3b3a42a93e82e2d12
msgid "This method has some draw backs though. It downloads the version of the source that is available on **your system.** You are likely running the current stable release, but you want to contribute your change against the package in the development release. Luckily, the ``ubuntu-dev-tools`` package provides a helper script::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:32
# 24cb003c0fe44ae5afbaabaced78ab4b
msgid "By default, the  latest version in the development release will be downloaded. You can also specify a version or Ubuntu release like::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:37
# 5a131191e2eb40aaba8ece0dbcc16da9
msgid "to pull the source from the ``precise`` release, or::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:41
# 72b6b34afd98466eb6e9ca7b7640fb08
msgid "to download version ``1.0-1ubuntu1`` of the package. For more information on the command, see ``man pull-lp-source``."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:44
# a67d2af56fa9419594b674b8244fec95
msgid "For our example, let's pretend we got a bug report saying that \"colour\" in the description of ``xicc`` should be \"color,\" and we want to fix it. *(Note: This is just an example of something to change and not really a bug.)* To get the source, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:52
# 986f69faa0784ec5945db935e1d7dbcb
msgid "Creating a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:54
# 0daa177ff2bb4b87a6dc8c31059fc5e5
msgid "A ``debdiff`` shows the difference between two Debian packages. The name of the command used to generate one is also ``debdiff``. It is part of the ``devscripts`` package. See ``man debdiff`` for all the details. To compare two source packages, pass the two ``dsc`` files as arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:61
# d34d0ac903034f1d855ea458f47a0116
msgid "To continue with our example, let's edit the ``debian/control`` and \"fix\" our \"bug\"::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:67
# 9ef5e8f8221e459c9688e01050e7f3ef
msgid "We also must adhere to the `Debian Maintainer Field Spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ and edit ``debian/control`` to replace::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:73
# dc987715bfe741838857b88d115fc6f2
msgid "with::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:78
# e35feac5e06440d9bbc408628f8453f4
msgid "You can use the ``update-maintainer`` tool (in the ``ubuntu-dev-tools`` package) to do that."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:81
# 02309ad3e219451fbdb7553bc75396ed
msgid "Remember to document your changes in ``debian/changelog`` using ``dch -i`` and then we can generate a new source package::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:86
# 5a5f18bfc0254965852195883c820d74
msgid "Now we can examine our changes using ``debdiff``::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:91
# 1990b915fdf8475dada6efb9cc9868b5
msgid "To create a patch file that you can send to others or attach to a bug report for sponsorship, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:98
# 1ba221779cff4e4b8dc889051c04e50b
msgid "Applying a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:100
# 4ea3225f04e64fa6ac4a0424b3f537bc
msgid "In order to apply a debdiff, first make sure you have the source code of the version that it was created against::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:105
# a4e298b5dfeb43cd9aef62dd1204a7b8
msgid "Then in a terminal, change the to the directory where the source was uncompressed::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:110
# 65644f1a0aca45349821183739f81faa
msgid "A debdiff is just like a normal patch file. Apply it as usual with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:6
# 1c5c6eb88ea54c5ebf5e987c551cfce2
msgid "Source package URLs"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:8
# 6158ce3ce2124726bae12ca612f2420f
msgid "Bazaar provides some very nice shortcuts for accessing Launchpad's source branches of packages in both Ubuntu and Debian."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:11
# a31cb3b5b920499bb4d1a19e8be4836f
msgid "To refer to source branches use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:15
# fe1f1b95684f4ecfaf3022eb28494bcc
msgid "where *package* refers to the package name you're interested in.  This URL refers to the package in the current development version of Ubuntu.  To refer to the branch of Tomboy in the development version, you would use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:21
# cde720980d064d0e9dc06d47a3f12ee8
msgid "To refer to the version of a source package in an older release of Ubuntu, just prefix the package name with the release's code name.  E.g. to refer to Tomboy's source package in Maverick_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:27
# 4ba8a258129847e99a7f7e0c1190035b
msgid "Since they are unique, you can also abbreviate the distro-series name::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:31
# 03525ec460da4fb798ae14108f7c1c65
msgid "You can use a similar scheme to access the source branches in Debian, although there are no shortcuts for the Debian distro-series names.  To access the Tomboy branch in the current development series for Debian use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:37
# be0c36d4d2fd415fbaf7d261cb6e7517
msgid "and to access Tomboy in Debian Lenny_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:48
# fb7aff9dec6347058870d3d563578478
msgid "Getting the source"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:50
# d5370ed1f4f1489594c65f7a3248953e
msgid "Every source package in Ubuntu has an associated source branch on Launchpad. These source branches are updated automatically by Launchpad, although the process is not currently foolproof."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:54
# fe752d61d544404b827ecf6be32e8bec
msgid "There are a couple of things that we do first in order to make the workflow more efficient later.  Once you are used to the process you will learn when it makes sense to skip these steps."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:62
# 2ec4e1baecc649158230a4bf0a4429df
msgid "Creating a shared repository"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:64
# be434abfc2c74da4a1eb266d4ea5e23d
msgid "Say that you want to work on the Tomboy package, and you've verified that the source package is named ``tomboy``.  Before actually branching the code for Tomboy, create a shared repository to hold the branches for this package.  The shared repository will make future work much more efficient."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:70
# 828a80fcad904f7dab7b4d46a2785ebd
msgid "Do this using the `bzr init-repo` command, passing it the directory name we would like to use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:75
# 874467911e6e4329b850a5490e391f32
msgid "You will see that a `tomboy` directory is created in your current working area.  Change to this new directory for the rest of your work::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:82
# 9fece5ef301046c89c32b5a693053c45
msgid "Getting the trunk branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:84
# 597eda8cb3c042ad8864bb7c59850cfe
msgid "We use the `bzr branch` command to create a local branch of the package. We'll name the target directory `tomboy.dev` just to keep things easy to remember::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:90
# f7abdc6f00b44289aea59d136b91dea5
msgid "The tomboy.dev directory represents the version of Tomboy in the development version of Ubuntu, and you can always ``cd`` into this directory and do a `bzr pull` to get any future updates."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:97
# c10dd9848ebb4e329517986bad24df38
msgid "Ensuring the version is up to date"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:99
# d2a397dde7d140ec9e7bce1cd69cc049
msgid "When you do your ``bzr branch`` you will get a message telling you if the packaging branch is up to date.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:107
# 717aea3f74834da6a0cd2a0c7873466d
msgid "Occasionally the importer fails and packaging branches do not match what is in the archive.  A message saying::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:112
# 52ed746336a349caa4f8f30fac84d2ca
msgid "means the importer has failed.  You can find out why on http://package-import.ubuntu.com/status/ and `file a bug on the UDD project`_ to get the issue resolved."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:118
# a60205dbab90474aa51c223f55e82155
msgid "Upstream Tar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:120
# 2bbc572b546949f1a89399a853009753
msgid "You can get the upstream tar by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:124
# 57e53d476abd47729c240824ae7040d0
msgid "This will try a number of methods to get the upstream tar, firstly by recreating it from the ``upstream-x.y`` tag in the bzr archive, then by downloading from the Ubuntu archive, lastly by running ``debian/rules get-orig-source``. The upstream tar will also be recreated when using bzr to build the package::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:132
# 087792ec8c6b4c53a26303082f8dd252
msgid "The `builddeb` plugin has several `configuration options`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:136
# 79f33f44d46941d5a04578fdde7cf5c9
msgid "Getting a branch for a particular release"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:138
# d59d614098c545d9acc2c0b3ab8eef09
msgid "When you want to do something like a `stable release update`_ (SRU), or you just want to examine the code in an old release, you'll want to grab the branch corresponding to a particular Ubuntu release.  For example, to get the Tomboy package for Maverick do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:147
# 527931efdd90432594c0acc3fdb9228b
msgid "Importing a Debian source package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:149
# ddfc0e7abad64ad995be3b0cc49845e4
msgid "If the package you want to work on is available in Debian but not Ubuntu, it's still easy to import the code to a local bzr branch for development.  Let's say you want to import the `newpackage` source package.  We'll start by creating a shared repository as normal, but we also have to create a working tree to which the source package will be imported (remember to cd out of the `tomboy` directory created above)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:162
# 06ede61e5725404aa7fa793d247dbc76
msgid "As you can see, we just need to provide the remote location of the dsc file, and Bazaar will do the rest.  You've now got a Bazaar source branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:3
# 0e93f6e6ca60459da93a64d675efdb06
msgid "Ubuntu Distributed Development — Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:5
# 7e1d4ae6ba604ddbbe4c982730fca9e6
msgid "This guide focuses on packaging using the *Ubuntu Distributed Development* (UDD) method."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:8
# 0ac905c8fcb74703b7b48dd75d3f9068
msgid "*Ubuntu Distributed Development* (UDD) is a new technique for developing Ubuntu packages that uses tools, processes, and workflows similar to generic distributed version control system (DVCS) based software development.  The DVCS used for UDD is Bazaar_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:14
# 6e4277eb9eef4272b62e18644d2ed3ce
msgid "Traditional Packaging Limitations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:16
# ec602b968dbb4ae9988f5dd88599a716
msgid "Traditionally Ubuntu packages have been kept in tar archive files.  A traditional source package is made up of the upstream source tar, a \"debian\" tar (or compressed diff file for older packages) containing the packaging and a .dsc meta-data file.  To see a traditional package run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:23
# 35da9a2a65b9429da76ba873f1538058
msgid "This will download the upstream source ``kdetoys_4.6.5.orig.tar.bz2``, the packaging ``kdetoys_4.6.5-0ubuntu1.debian.tar.gz`` and the meta-data ``kdetoys_4.6.5-0ubuntu1~ppa1.dsc``.  Assuming you have dpkg-dev installed it will extract these and give you the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:28
# b40c9323df614366a17617794f0a0510
msgid "Traditional packaging would edit these files and upload.  However this gives limited opportunity to collaborate with other developers, changes have to be passed around as diff files with no central way to track them and two developers can not make changes at the same time.  So most teams have moved to putting their packaging in a revision control system.  This makes it easier for several developers to work on a package together.  However there is no direct connection between the revision control system and the archive packages so the two must be manually kept in sync.  Since each team works in its own revision control system a prospective developer must first work out where that is and how to get the packaging before they can work on the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:40
# 6b77d4a7d6ab4fc6b93e450f3f966ad1
msgid "Ubuntu Distributed Development"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:42
# 54dd93eb1e5a4daa9f0f7958917f1309
msgid "With Ubuntu Distributed Development all packages in the Ubuntu (and Debian) archive are automatically imported into Bazaar branches on our code hosting site Launchpad.  Changes can be made directly to these branches in incremental steps and by anyone with commit access.  Changes can also be made in forked branches and merged back in with Merge Proposals when they are large enough to need review or if they are by someone without direct commit access."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:49
# 2b90016b19ae481ea974bd4c1f8b677d
msgid "UDD branches are all in a standard location, so doing a checkout is easy::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:53
# 69b63d88b033407581162f52a90759db
msgid "The merge history includes two separate branches, one for the upstream source and one which adds the ``debian/`` packaging directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:59
# ad0230b4e3cc4a0fb7914b726b13301d
msgid "(This command uses *qbzr* for a GUI, run ``log`` instead of ``qlog`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:64
# fb990adc86b54628bbbee879f17bb795
msgid "This UDD branch of *kdetoys* shows the full packaging for each version uploaded to Ubuntu with grey circles and the upstream source versions with green circles.  Versions are tagged with either the version in Ubuntu such as ``4:4.2.29-0ubuntu1`` or for the upstream branch with the upstream version ``upstream-4.2.96``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:70
# 78b161c70c9149a8a0fbe29988c1e3b0
msgid "Many Ubuntu packages are based on the packages in Debian, UDD also imports the Debian package into our branches.  In the *kdetoys* branch above the Debian versions from *unstable* are from the merge with blue circles while those from *Debian experimental* are from the merge with yellow circles.  Debian releases are tagged with their version number, e.g., ``4:4.2.2-1``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:76
# 20603c97056e41908c222e043115bf41
msgid "So from a UDD branch you can see the complete history of changes to the package and compare any two versions.  For example, to see the changes between version 4.2.2 in Debian and the 4.2.2 in Ubuntu use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:82
# 90c535221d3b411684b21f9b45d011e7
msgid "(This command uses *qbzr* for a GUI, run ``diff`` instead of ``qdiff`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:87
# adba86ea0fe34c3db8543295e1ea190d
msgid "From this we can clearly see what has changed in Ubuntu compared to Debian, very handy."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:91
# f23cddc6fffb4a468a02dd5ead410d65
msgid "Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:93
# 3cd03e1a06ba485a84015d12aa54bcce
msgid "UDD branches use Bazaar, a distributed revision control system intended to be easy to use for those familiar with popular systems such as Subversion while offering the power of Git."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:97
# 19917edb490d44049ca0f6fae073034c
msgid "To do packaging with UDD you will need to know the basics of how to use Bazaar to manage files.  For an introduction to Bazaar see the `Bazaar Five Minute Tutorial <http://doc.bazaar.canonical.com/bzr.dev/en/mini-tutorial/index.html>`_ and the `Bazaar Users Guide <http://doc.bazaar.canonical.com/bzr.dev/en/user-guide/index.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:105
# e45e7fa0a86b46de9cf988c272949817
msgid "Limitations of UDD"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:107
# 3a4bb5f818434f14903399c1b37fa6b0
msgid "Ubuntu Distributed Development is a new method for working with Ubuntu packages.  It currently has some notable limitations:"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:110
# 4001d51c10b843e4ae25a1baf21321fa
msgid "Doing a full branch with history can take a lot of time and network resources.  You may find it quicker to do a lightweight checkout ``bzr checkout --lightweight ubuntu:kdetoys`` but this will need a network access for any further bzr operations."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:115
# c099b069ad124b1e97eafc2655f0260c
msgid "Working with patches is fiddly.  Patches can be seen as a branched revision control system, so we end up with RCS on top of RCS."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:118
# a9ac48d542ab4c6b810ecadd4753af8a
msgid "There is no way to build directly from branches.  You need to create a source package and upload that."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:121
# 9c916d244d354cb1be02a8e6b219f1c1
msgid "Some packages have not been successfully imported into UDD branches.  Recent versions of Bazaar will automatically notify you when this is the case. You can also check the `status of the package importer`_ manually before working on a branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:126
# b95347361cb24ec7ab5ce24c94dd8891
msgid "All of the above are being worked on and UDD is expected to become the main way to work on Ubuntu packages soon.  However currently most teams within Ubuntu do not yet work with UDD branches for their  development.  However because UDD branches are the same as the packages in the  archive any team should be able to accept merges against them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:3
# 1454d7ee8eeb4536bdd94cf32daa96a9
msgid "Getting The Latest"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:5
# 7be9aa2aaf054161bd1c5f10460c9191
msgid "If someone else has landed changes on a package, you will want to pull those changes in your own copies of the package branches."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:10
# fcf9348ac2d44d56912293cfce26896f
msgid "Updating your main branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:12
# da99e832d5f944a39e697da15880aa18
msgid "Updating your copy of a branch that corresponds to the package in a particular release is very simple, simply use `bzr pull` from the appropriate directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:18
# 5cf4371c1d9d41d09dc1456878c6f175
msgid "This works wherever you have a checkout of a branch, so it will work for things like branches of `maverick`, `hardy-proposed`, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:23
# e543bba3a899445986dc00433ef320fa
msgid "Getting the latest in to your working branches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:25
# 7cbd8d91f5e64feb81399124c3e0fc95
msgid "Once you have updated your copy of a distroseries branch, then you may want to merge this in to your working branches as well, so that they are based on the latest code."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:29
# a67bfb69b77b42919a144ae999695ce6
msgid "You don't have to do this all the time though.  You can work on slightly older code with no problems.  The disadvantage would come if you were working on some code that someone else changed.  If you are not working on the latest version then your changes may not be correct, and may even produce conflicts."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:34
# e1591f07f6f34eb9a86129584f57d278
msgid "The merge does have to be done at some point though.  The longer it is left, the harder may be, so doing it regularly should keep each merge simple.  Even if there are many merges the total effort would hopefully be less."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:38
# 4a8f8a175e034e64b15fba62da431b33
msgid "To merge the changes you just need to use ``bzr merge``, but you must have committed your current work first::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:44
# 5f095d2edc6a48fc8e0065c8fd0c74cd
msgid "Any conflicts will be reported, and you can fix them up.  To review the changes that you just merged use ``bzr diff``.  To undo the merge use ``bzr revert``.  Once you are happy with the changes then use ``bzr commit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:50
# 7a5e2fefe0cb46949827510b584ef828
msgid "Referring to versions of a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:52
# 0c6f80410ad44bea89f8848737bfdaa9
msgid "You will often think in terms of versions of a package, rather than the underlying Bazaar revision numbers.  `bzr-builddeb` provides a revision specifier that makes this convenient.  Any command that takes a ``-r`` argument to specify a revision or revision range will work with this specifier, e.g. ``bzr log``, ``bzr diff``, and so on.  To view the versions of a package, use the ``package:`` specifier::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:61
# 686d405076ad4e698b6aad8107472548
msgid "This shows you the difference between package version 0.1-1 and 0.1-2."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:3
# e12a90ed0125406dac681560ac81baca
msgid "Merging — Updating from Debian and Upstream"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:5
# 3e0bcf9742104ce6b4585b8f999f0a59
msgid "Merging is one of the strengths of Bazaar, and something we do often in Ubuntu development.  Updates can be merged from Debian, from a new upstream release, and from other Ubuntu developers.  Doing it in Bazaar is pretty simple, and all based around the ``bzr merge`` command [#]_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:10
# a9cc684ba5794e31864dba3ca596cf7d
msgid "While you are in any branch's working directory, you can merge in a branch from a different location.  First check that you have no uncommitted changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:15
# a1fd4aaf3aac43fa9044f4b2a888f4c1
msgid "If that reports anything then you will either have to commit the changes, revert them, or shelve them to come back to later."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:20
# fdb6a6ad7e4d4a7b93edbe7d2bd5cc2b
msgid "Merging from Debian"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:22
# b4b62f2b83eb4791993836625389a65a
msgid "Next run ``bzr merge`` passing the URL of the branch to merge from.  For example, to merge from the version of the package in Debian Squeeze_ run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:27
# 5e96f49c77cd4c29a3b3fdc7e887a316
msgid "This will merge the changes since the last merge point and leave you with changes to review.  This may cause some conflicts.  You can see everything that the ``merge`` command did by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:34
# 1c1d338ea630459ebe5b0b9139bf35bb
msgid "If conflicts are reported then you need to edit those files to make them look how they should, removing the *conflict markers*.  Once you have done this, run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:41
# 292245a7329e4bf0ab8ed7f4f3021182
msgid "This will resolve any conflicted files that you fixed, and then tell you what else you have to deal with."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:44
# 566e8ec8d0ab4f0493509d322b84d170
msgid "Once any conflicts are resolved, and you have made any other changes that you need, you will add a new changelog entry, and commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:50
# 99d0d8c8ffc8418b88a1abdbee2e96f2
msgid "as described earlier."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:52
# 00142c4108bf4c5bb2e317dc2d414568
msgid "However, before you commit, it is always a good thing to check all the Ubuntu changes by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:57
# e7a48c77d76b4e2aa59861708c1e3c26
msgid "which will show the differences between the Debian (0.6.10-5) and Ubuntu versions (0.6.10-5ubuntu1).  In similar way you can compare to any other versions.  To see all available versions run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:63
# 36c98d44d2994bbd9efdcc46e0fb8f7a
msgid "After testing and committing the merge, you will need to seek sponsorship or upload to the archive in the normal way."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:66
# 22d2ddcab531468398be8607859e7ba6
msgid "If you are going to build the source package from this merged branch, you would use the ``-S`` option to the ``bd`` command.  One other thing you'll want to consider is also using the ``--package-merge`` option.  This will add the appropriate ``-v`` and ``-sa`` options to the source package so that all the changelog entries since the last Ubuntu change will be included in your ``_source.changes`` file.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:77
# e02b74e517b642ad93f11042d6896324
msgid "Merging a new upstream version"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:79
# 9bd78769435548de89b677e15400e80a
msgid "When upstream releases a new version (or you want to package a snapshot), you have to merge a tarball into your branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:82
# 6a0cf4c220404b078380eb08241f1ff0
msgid "This is done using the ``bzr merge-upstream`` command.  If your package has a valid ``debian/watch`` file, from inside the branch that you want to merge to, just type this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:88
# 9c8a9734ed6c453199cfb00964e6f7ee
msgid "This will download the tarball and merge it into your branch, automatically adding a ``debian/changelog`` entry for you.  ``bzr-builddeb`` looks at the ``debian/watch`` file for the upstream tarball location."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:92
# c7b60181c7bf441fbef2b4cd25f7f2cc
msgid "If you do *not* have a ``debian/watch`` file, you'll need to specify the location of the upstream tarball, and the version manually::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:97
# a0acb02b4d184e49b136558e49a534c6
msgid "The ``--version`` option is used to specify the upstream version that is being merged in, as the command isn't able to infer that (yet)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:100
# 22ac85e51be94585a775fac4ea78612f
msgid "The last parameter is the location of the tarball that you are upgrading to; this can either be a local filesystem path, or a http, ftp, sftp, etc. URI as shown.  The command will automatically download the tarball for you.  The tarball will be renamed appropriately and, if required, converted to ``.gz``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:105
# 216d3f4cb04f4b8a816b7f4368fcdc43
msgid "The `merge-upstream` command will either tell you that it completed successfully, or that there were conflicts.  Either way you will be able to review the changes before committing as normal."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:109
# 6c7cb46bff8347b09ea8e4e7ee3f52fb
msgid "If you are merging an upstream release into an existing Bazaar branch that has not previously used the UDD layout, ``bzr merge-upstream`` will fail with an error that the tag for the previous upstream version is not available; the merge can't be completed without knowing what base version to merge against. To work around this, create a tag in your existing repository for the last upstream version present there; e.g., if the last Ubuntu release was *1.1-0ubuntu3*, create the tag *upstream-1.1* pointing to the bzr revision you want to use as the tip of the upstream branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:122
# a41d0005404a48aebde8d128ade42eee
msgid "You will need newer versions of ``bzr`` and the ``bzr-builddeb`` for the ``merge`` command to work.  Use the versions from Ubuntu 12.04 (Precise) or the development versions from the ``bzr`` PPA.  Specifically, you need ``bzr`` version 2.5 beta 5 or newer, and ``bzr-builddeb`` version 2.8.1 or newer.  For older versions, use the ``bzr merge-package`` command instead."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:3
# b435b276eaad4f9b8344e674e09f57ee
msgid "Seeking Review and Sponsorship"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:5
# cfafa274985544e58238039f28ca492d
msgid "One of the biggest advantages to using the UDD workflow is to improve quality by seeking review of changes by your peers.  This is true whether or not you have upload rights yourself.  Of course, if you don't have upload rights, you will need to seek sponsorship."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:10
# 9468c785000b4a089537696c4997f9e6
msgid "Once you are happy with your fix, and have a branch ready to go, the following steps can be used to publish your branch on Launchpad, link it to the bug issue, and create a *merge proposal* for others to review, and sponsors to upload."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:19
# 4058ecc548584ba8b69199a4c5292b19
msgid "Pushing to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:21
# 5fe0d5cf4a4e4cd2af64c7ec044f750a
msgid "We previously showed you how to :ref:`associate your branch to the bug <link-via-changelog>` using ``dch`` and ``bzr commit``.  However, the branch and bug don't actually get linked until you push the branch to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:25
# 67ee1ede8ced4472b0483dd427b23d19
msgid "It is not critical to have a link to a bug for every change you make, but if you are fixing reported bugs then linking to them will be useful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:28
# 22669fa58dd949168f76a7ee21e31d87
msgid "The general form of the URL you should push your branch to is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:32
# 6a599d9ed8984b4dbf76bea1ed72f738
msgid "For example, to push your fix for bug 12345 in the Tomboy package for Natty, you'd use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:37
# 21efd4a4554142fbb33b09068264391b
msgid "The last component of the path is arbitrary; it's up to you to pick something meaningful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:40
# 2230d6b8791c4070a66eb1c833549c99
msgid "However, this usually isn't enough to get Ubuntu developers to review and sponsor your change.  You should next submit a *merge proposal*."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:43
# 6728084fe8be4c02b9279dde04eb4fd5
msgid "To do this open the bug page in a browser, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:47
# 6f8af1d4deab47748326b061d0ba8235
msgid "If that fails, then you can use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:51
# 09b4a03265764483a699e7a31c08b802
msgid "where most of the URL matches what you used for `bzr push`.  On this page, you'll see a link that says *Propose for merging into another branch*.  Type in an explanation of your change in the *Initial Comment* box.  Lastly, click *Propose Merge* to complete the process."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:56
# 7e6064ae16ee445da2f86bcfa3a3acf4
msgid "Merge proposals to package source branches will automatically subscribe the `~ubuntu-branches` team, which should be enough to reach an Ubuntu developer who can review and sponsor your package change."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:62
# 7ea9f614fcef44e7a4035a1603ae7e0d
msgid "Generating a debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:64
# f182d4815f8841fba3124461b915b10d
msgid "As noted above, some sponsors still prefer reviewing a *debdiff* attached to bug reports instead of a merge proposal.  If you're requested to include a debdiff, you can generate one like this (from inside your `bug-12345` branch)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:71
# 333eeab8d66a4b849f8afe15dca35055
msgid "Another way is to is to open the merge proposal and download the diff."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:73
# bba223232a0a42138a2fc6d20582ef02
msgid "You should ensure that diff has the changes you expect, no more and no less. Name the diff appropriately, e.g. ``foobar-12345.debdiff`` and attach it to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:79
# 3616ae206e9e4176aa44e4153baba2de
msgid "Dealing with feedback from sponsors"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:81
# 2eb9207e743e4b379485aa110b47b075
msgid "If a sponsor reviews your branch and asks you to change something, you can do this fairly easily.  Simply go to the branch that you were working in before, make the changes requested, and then commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:87
# 7150854bf8e045ec8797a4335a143d1e
msgid "Now when you push your branch to Launchpad, Bazaar will remembered where you pushed to, and will update the branch on Launchpad with your latest commits. All you need to do is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:93
# 1076bdec222246ba8663585d5ab9c051
msgid "You can then reply to the merge proposal review email explaining what you changed, and asking for re-review, or you can reply on the merge proposal page in Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:97
# f1bfc095cbcb4d36ab068cb8fe43e00d
msgid "Note that if you are sponsored via a debdiff attached to a bug report you need to manually update by generating a new diff and attaching that to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:103
# 57cf50559ff44ec5abadf230b16673b1
msgid "Expectations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:105
# 2be6897e19c54b5e807e3a459169d42d
msgid "The Ubuntu developers have set up a schedule of \"patch pilots\", who regularly review the sponsoring queue and give feedback on branches and patches. Even though this measure has been put in place it might still take several days until you hear back. This depends on how busy everybody is, if the development release is currently frozen, or other factors."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:111
# b56b9a15feec4fcb9da60127e475f5b3
msgid "If you haven't heard back in a while, feel free to join `#ubuntu-devel` on `irc.freenode.net` and find out if somebody can help you there."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:114
# 4b9c7f45e9ff41bd8b255a3086001fe0
msgid "For more information on the generall sponsorship process, review the documentation on our wiki as well: https://wiki.ubuntu.com/SponsorshipProcess"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:3
# cbd3ea47b65b4d688c661ecdbc6b0475
msgid "Uploading a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:5
# 6f3fcaeed22345f28f20c896f515a7d4
msgid "Once your merge proposal is reviewed and approved, you will want to upload your package, either to the archive (if you have permission) or to your `Personal Package Archive`_ (PPA).  You might also want to do an upload if you are sponsoring someone else's changes."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:12
# 24d7dd7279c24ee59121b07a745668eb
msgid "Uploading a change made by you"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:14
# 31f4bd62d6be4e6f91c19ab533927a1a
msgid "When you have a branch with a change that you would like to upload you need to get that change back on to the main source branch, build a source package, and then upload it."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:18
# 4545bc3b697b465bb60d348b8454ae08
msgid "First, you need to check that you have the latest version of the package in your checkout of the development package trunk::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:24
# 79d8e95542114328ab288b4c8f68921c
msgid "This pulls in any changes that may have been committed while you were working on your fix.  From here, you have several options.  If the changes on the trunk are large and you feel should be tested along with your change you can merge them into your bug fix branch and test there.  If not, then you can carry on merging your bug fix branch into the development trunk branch.  As of bzr 2.5 and bzr-builddeb 2.8.1, this works with just the standard ``merge`` command::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:34
# 66432945a48b4146b021f71d8fc417e1
msgid "For older versions of bzr, you can use the ``merge-package`` command instead::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:38
# 9a4fd209670a40bbb879b951f2cedfa0
msgid "This will merge the two trees, possibly producing conflicts, which you'll need to resolve manually."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:41
# 8a49ff58eb9b4b3d9b084c48aee662af
msgid "Next you should make sure the ``debian/changelog`` is as you would like, with the correct distribution, version number, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:44
# bc7f3824560e43a894d1223163aedee2
msgid "Once that is done you should review the change you are about to commit with ``bzr diff``.  This should show you the same changes as a debdiff would before you upload the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:48
# fe91206c76fa447ba2d8f7c2d348a439
msgid "The next step is to build and test the modified source package as you normally would::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:53
# 9b78a57e01b44437bedfa447e436871b
msgid "When you're finally happy with your branch, make sure you've committed all your changes, then tag the branch with the changelog's version number.  The ``bzr tag`` command will do this for you automatically when given no arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:60
# 28f9d11229ed4db29da384efb29c7bc4
msgid "This tag will tell the package importer that what is in the Bazaar branch is the same as in the archive."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:63
# db6348bb47a64b3e9f384b37cb1fb90a
msgid "Now you can push the changes back to Launchpad::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:67
# 071d1f01e6984852a46949fbd30b9345
msgid "(Change the destination if you are uploading an SRU or similar.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:69
# 65e83bd2989f4f369db4b5ca78fc6cbc
msgid "You need one last step to get your changes uploaded into Ubuntu or your PPA; you need to ``dput`` the source package to the appropriate location.  For example, if you want to upload your changes to your PPA, you'd do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:75
# 685405c1980248ecbb09fce755d18290
msgid "or, if you have permission to upload to the primary archive::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:79
# 6789361a878b4f3eb098ad9d2a932f4a
msgid "You are now free to delete your feature branch, as it is merged, and can be re-downloaded from Launchpad if needed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:84
# 21ba218de65746d4885b78b8712f6ccb
msgid "Sponsoring a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:86
# 3df497c6de2247b999e0723afdcd9782
msgid "Sponsoring someone else's change is just like the above procedure, but instead of merging from a branch you created, you merge from the branch in the merge proposal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:92
# e9cb2c6c85af4cd6bb66ada06f719711
msgid "If there are lots of merge conflicts you would probably want to ask the contributor to fix them up.  See the next section to learn how to cancel a pending merge."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:96
# ebd621694fbc43e592cd2e7fe2bbfeda
msgid "But if the changes look good, commit and then follow the rest of the uploading process::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:103
# 8c96e52fa4854865a98f9cdb3c374d82
msgid "Canceling an upload"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:105
# 9ff0117d1694420284432a89882badf5
msgid "At any time before you `dput` the source package you can decide to cancel an upload and revert the changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:110
# 343991fe2d8841e3aaec077bf1b28d05
msgid "You can do this if you notice something needs more work, or if you would like to ask the contributor to fix up conflicts when sponsoring something."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:115
# deb681d84c11473886a4eeb52d80c820
msgid "Sponsoring something and making your own changes"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:117
# 011c3dab62334c5e842a237de909ab96
msgid "If you are going to sponsor someone's work, but you would like to roll it up with some changes of your own then you can merge their work in to a separate branch first."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:121
# 0fb0bc19315d420e82b909419a147e88
msgid "If you already have a branch where you are working on the package and you would like to include their changes, then simply run the ``bzr merge`` from that branch, instead of the checkout of the development package.  You can then make the changes and commit, and then carry on with your changes to the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:127
# f24ebd4b0e6a42fba0fb0990c168e97d
msgid "If you don't have an existing branch, but you know you would like to make changes based on what the contributor provides then you should start by grabbing their branch::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:133
# 9b784031c6054c4ea8175f8694f13959
msgid "then work in this new branch, and then merge it in to the main one and upload as if it was your own work.  The contributor will still be mentioned in the changelog, and Bazaar will correctly attribute the changes they made to them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:3
# e33bdc0f898440688e1623f97e5b822d
msgid "Working on a Package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:5
# 92dc67627fa24dc0aca97a69141193ab
msgid "Once you have the source package branch in a shared repository, you'll want to create additional branches for the fixes or other work you plan to do.  You'll want to base your branch off the package source branch for the distro release that you plan to upload to.  Usually this is the current development release, but it may be older releases if you're backporting to an SRU for example."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:13
# c9791effb2aa49f29a4fe8486d69d285
msgid "Branching for a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:15
# 63bd7666e1714fd998ffaeeabe1fea5d
msgid "The first thing to do is to make sure your source package branch is up-to-date.  It will be if you just checked it out, otherwise do this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:21
# 850818c96a0d4f45a0ec72fd114d4b4f
msgid "Any updates to the package that have uploaded since your checkout will now be pulled in.  You do not want to make changes to this branch.  Instead, create a branch that will contain just the changes you're going to make.  Let's say you want to fix bug 12345 for the Tomboy project.  When you're in the shared repository you previously created for Tomboy, you can create your bug fix branch like this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:31
# d69daffa667242398495adf63e5a7fbf
msgid "Now you can do all my work in the ``bug-12345`` directory.  You make changes there as necessary, committing as you go along.  This is just like doing any kind of software development with Bazaar.  You can make intermediate commits as often as you like, and when your changes are finished, you will use the standard ``dch`` command (from the ``devscripts`` package)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:39
# 20b7173acca444118fc3bc798228795c
msgid "This will drop you in an editor to add an entry to the `debian/changelog` file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:44
# 404875d778564c98b7421dfc731fe711
msgid "When you added your ``debian/changelog`` entry, you should have included a bug fix tag that indicated which Launchpad bug issue you're fixing.  The format of this textual tag is pretty strict: ``LP: #12345``.  The space between the ``:`` and the ``#`` is required and of course you should use the actual bug number that you're fixing.  Your ``debian/changelog`` entry might look something like::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:57
# 3d71cc8f0b6843c780c6658583bcc3ce
msgid "Commit with the normal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:61
# c1babbd1aee140e1b8979307ab4c8df4
msgid "A hook in bzr-builddeb will use the debian/changelog text as the commit message and set the tag to mark bug #12345 as fixed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:64
# cb73da15848b4e71aa288c251763a300
msgid "This only works with bzr-builddeb 2.7.5 and bzr 2.4, for older versions use ``debcommit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:71
# 65495be46543427eb9b4668ce3744af8
msgid "Along the way, you'll want to build your branch so that you can test it to make sure it does actually fix the bug."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:74
# b73406459b57497ca25402db455bdde4
msgid "In order to build the package you can use the ``bzr builddeb`` command from the ``bzr-builddeb`` package.  You can build a source package with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:79
# e461d45c89f14f488baa93377ab1d6b1
msgid "(``bd`` is an alias for ``builddeb``.)  You can leave the package unsigned by appending ``-- -uc -us`` to the command."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:82
# 8a8b084c44fc4266887dcc6307fa6832
msgid "It is also possible to use your normal tools, as long as they are able to strip the .bzr directories from the package, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:87
# 98f5efaff2214ae79069218013183e5f
msgid "If you ever see an error related to trying to build a native package without a tarball, check to see if there is a ``.bzr-builddeb/default.conf`` file erroneously specifying the package as native.  If the changelog version has a dash in it, then it's not a native package, so remove the configuration file. Note that while ``bzr builddeb`` has a ``--native`` switch, it does not have a ``--no-native`` switch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:94
# 8c4fbf6d78b84fafa5c96c0d9363a00a
msgid "Once you've got the source package, you can build it as normal with ``pbuilder-dist`` (or ``pbuilder`` or `sbuild`_)."
msgstr ""

