# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010-2012, Ubuntu Developers
# This file is distributed under the same license as the ubuntu-packaging-guide package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ubuntu-packaging-guide 0.2.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-11-26 12:39\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:3
# ff3abbdc94bd44c28e351552d5de7023
msgid "autopkgtest: Automatic testing for packages"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:5
# f5aff22369b2441b8930eb6fd61a16ff
msgid "The `DEP 8 specification`_ defines how automatic testing can very easily be integrated into packages. To integrate a test into a package, all you need to do is:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:9
# 94b1b2f3c7e74cbd857336282b8d87e7
msgid "add the following to the Source section in ``debian/control``::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:13
# b0da4d805e8341f295cf6abf2b85f287
msgid "add a file called ``debian/tests/control`` which specifies the requirements for the testbed,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:15
# 89c9ca68c00a42ad81bbd808cb4c6f88
msgid "add the tests in ``debian/tests/``."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:19
# dc3fecf9f56641d6b2723eb9cd0ee2ac
msgid "Testbed requirements"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:21
# c86d94ee67634327be48ae277dfb8e1b
msgid "In ``debian/tests/control`` you specify what to expect from the testbed. So for example you list all the required packages for the tests, if the testbed gets broken during the build or if ``root`` permissions are required. The `DEP 8 specification`_ lists all available options."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:26
# f851fd0fffce47c291c885cfdd61ea7f
msgid "Below we are having a look at the ``glib2.0`` source package. In a very simple case the file would look like this::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:32
# 317771af6b4640b39ab11f643b0cfc07
msgid "For the test in ``debian/tests/build`` this would ensure that the packages ``libglib2.0-dev`` and ``build-essential`` are installed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:35
# 67952955d2b04bb8b1c019cc460011b6
msgid "You can use ``@`` in the ``Depends`` line to indicate that you want all the packages installed which are built by the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:41
# 66bb0185d2104bea9e6a756079b48540
msgid "The actual tests"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:43
# 191c2ad9909846399c29aae6d5060421
msgid "The accompanying test for the example above might be:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:75
# 49ba5f8eed934afe916c1100620ea4fc
msgid "Here a very simple piece of C code is written to a temporary directory. Then this is compiled with system libraries (using flags and library paths as provided by `pkg-config`). Then the compiled binary, which just exercises some parts of core glib functionality, is run."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:80
# a350d4f1b4564d78b40615411bf29db9
msgid "While this test is very small and basic, it tests quite a number of core components on a system. This may help to uncover critical issues early on."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:84
# 4282ad7bc2a54e62968dbdc1a2d9a2d5
msgid "Executing the test"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:86
# 4dbd896426a444c4a2b5df023f8612e3
msgid "The test script can be easily executed on its own, but if you want to make sure that the testbed is properly set up, you might want to use ``adt-run`` from the ``autopkgtest`` package to execute the test. The easiest way to do this is to run this command in the source tree::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:93
# fa85379fd7204e3eba9511d1fc80cd56
msgid "The downside of this approach is that you test it locally, but can't ensure that this will work in a minimal environment. For example will it be hard to ensure that all the required packages are installed for the tests. With `lp:auto-package-testing`_ we have a more comprehensive testing tool. It uses a pristine virtual machine to run the tests. You can set it up like so::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:102
# 08902bb228f2406d94dc1fcacea2b6f5
msgid "And provision a Quantal AMD64 system::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:106
# 1b38c9a8bbf44ebca300a45e0f0801bf
msgid "This command will create a pristine Quantal AMD64 VM from a cloud image. To run the tests, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:112
# d9ad965d667f4b6386c1c809d9328e4d
msgid "This would use the ``lp:~super-friends/friends/packaging`` branch as a basis to run the tests on the Ubuntu ``friends`` package. If you only specify a branch with ``-b`` but do not specify a package name, this will instead build the branch and install the binaries from that build; this is useful if you want to run tests on a newer version than the one packaged in Ubuntu, or the package is not in Ubuntu at all. If use the ``-k`` flag you can log into the virtual machine after the tests were run. This makes it very easy to debug issues."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:121
# db7173e1e4124585a59b495cebb707f9
msgid "The `auto-package-testing documentation`_ has a lot more valuable information on other testing options."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:127
# f89414781eb14796b03ae2726b48ae41
msgid "Further examples"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:129
# e05861812199478e8ac20698df5a408b
msgid "This list is not comprehensive, but might help you get a better idea of how automated tests are implemented and used in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:132
# 342c7cbfc8b74ef9a04ad6bea772702b
msgid "The `libxml2 tests`_ are very similar. They also run a test-build of a simple piece of C code and execute it."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:134
# 2ffcf7d4ffb44ec09207c5df11235c12
msgid "The `gtk+3.0 tests`_ also do a compile/link/run check in the \"build\" test. There is an additional \"python3-gi\" test which verifies that the GTK library can also be used through introspection."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:137
# c6877db7cc8e4dd3b1f6c00af4b501e9
msgid "In the `ubiquity tests`_ the upstream test-suite is executed."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:138
# d21e93743c164e96a56303b0a0013b34
msgid "The `gvfs tests`_ have comprehensive testing of their functionality and are very interesting because they emulate usage of CDs, Samba, DAV and other bits."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:143
# b166643f274f44c484ea1cc623eb498b
msgid "Ubuntu infrastructure"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:145
# 7f07ed8a9bba446ba8afbf495e38c0ab
msgid "Packages which have ``autopkgtest`` enabled will have their tests run whenever they get uploaded or any of their reverse-dependencies change. The output of `automatically run autopkgtest tests`_ can be viewed on the web and is regularly updated."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:150
# ec0c80fe3f614a018fb8926b861c8326
msgid "While Debian does not have an automatic testing infrastructure set up yet, they should still be submitted to Debian, as DEP-8 is a Debian specification and Debian developers or users can still manually run the tests."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:154
# df353185b64241cb8c936775e306508a
msgid "Packages in Debian with a testsuite header will also be automatically added when they are synced to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:158
# e18acd750b7249f8b63934d37740b482
msgid "Getting the test into Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:160
# 78ec8ea637bf40298f87de82cd256c11
msgid "The process of submitting an autopkgtest for a package is largely similar to :doc:`fixing a bug in Ubuntu<./fixing-a-bug>`. Essentially you simply:"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:163
# a3ee74957b0c40dc8729cd897a4ebcee
msgid "run ``bzr branch ubuntu:<packagename>``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:164
# 82f58e7a292b4eb4bab4dc1ac8ddca68
msgid "edit ``debian/control`` to enable the tests,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:165
# 9d9219df9bc34d68b162ca8edf71beb1
msgid "add the ``debian/tests`` directory,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:166
# 0f8a609008f64d4983425f40b0d8d557
msgid "write the ``debian/tests/control`` based on the `DEP 8 Specification`_,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:167
# 53d65722bb004ab5b0edc690e309f58f
msgid "add your test case(s) to ``debian/tests``,"
msgstr ""

#: ../ubuntu-packaging-guide/auto-pkg-test.rst:168
# 49ce2171f3e64f2bae5a23f5eee16821
msgid "commit your changes, push them to Launchpad, propose a merge and get it reviewed just like any other improvement in a source package."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:3
# 81d8e16277dc4f718cd5a42f373456c0
msgid "Backporting software updates"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:5
# 9f4997afcdcd4d91b6bd07f1c77ae9c1
msgid "Sometimes you might want to make new functionality available in a stable release which is not connected to a critical bug fix. For these scenarios you have two options: either you `upload to a PPA <https://help.launchpad.net/Packaging/PPA>`_ or prepare a backport."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:12
# 1a4792c2d4874c7bb621946130086b0d
msgid "Personal Package Archive (PPA)"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:14
# cb2ddeede31a4c97a0c63c0561ba83f2
msgid "Using a PPA has a number of benefits. It is fairly straight-forward, you don't need approval of anyone, but the downside of it is that your users will have to manually enable it. It is a non-standard software source."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:18
# 1da102811a12456ba121330fc696b4ad
msgid "The `PPA documentation on Launchpad`_ is fairly comprehensive and should get you up and running in no time."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:25
# 34e2b942a75b405b98b3570b0e9965d8
msgid "Official Ubuntu Backports"
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:27
# 5d81cfcfc5e44c2484cd7a0462ac6a29
msgid "The Backports Project is a means to provide new features to users. Because of the inherent stability risks in backporting packages, users do not get backported packages without some explicit action on their part. This generally makes backports an inappropriate avenue for fixing bugs. If a package in an Ubuntu release has a bug, it should be fixed either through the :doc:`Security Update or the Stable Release Update process<./security-and-stable-release-updates>`, as appropriate."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:35
# db58ee83190a48aaa8dcdf18ea876df1
msgid "Once you determined you want a package to be backported to a stable release, you will need to test-build and test it on the given stable release. ``pbuilder-dist`` (in the ``ubuntu-dev-tools`` package) is a very handy tool to do this easily."
msgstr ""

#: ../ubuntu-packaging-guide/backports.rst:40
# 7f13c9b58e864b55ba0223ffb8e9cb10
msgid "To report the backport request and get it processed by the Backporters team, you can use the ``requestbackport`` tool (also in the ``ubuntu-dev-tools`` package). It will determine the intermediate releases that package needs to be backported to, list all reverse-dependencies, and file the backporting request.  Also will it include a testing checklist in the bug."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:3
# 8a9fa92857434c6b8e71bff9c65d0148
msgid "Using Chroots"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:5
# 0fd9f1acf6344fbeaed59a1cbb636f25
msgid "If you are running one version of Ubuntu but working on packages for another versions you can create the environment of the other version with a ``chroot``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:9
# f87d06d1400f4313a61986ea2d667f54
msgid "A ``chroot`` allows you to have a full filesystem from another distribution which you can work in quite normally.  It avoids the overhead of running a full virtual machine."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:14
# 24c83b92ebd348969eaa2aa1bb52dd98
msgid "Creating a Chroot"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:16
# 7613859a9603412c9db1a6620b276a42
msgid "Use the command ``debootstrap`` to create a new chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:20
# f057e1188c5743699a96e14643127a2b
msgid "This will create a directory ``oneiric`` and install a minimal oneiric system into it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:23
# 850aee392c8b4be293d4085de92ec27c
msgid "If your version of ``debootstrap`` does not know about oneiric you can try upgrading to the version in ``backports``."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:26
# 806444580c684272b824e32fc96d71df
msgid "You can then work inside the chroot::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:30
# f16b52bae2a04a3cbf4615d19fa8fc70
msgid "Where you can install or remove any package you wish without affecting your main system."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:33
# e1782c79e88a4ea59a092ecfce62b64c
msgid "You might want to copy your GPG/ssh keys and Bazaar configuration into the chroot so you can access and sign packages directly::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:39
# d7e665eb389449dca05094ad73caead0
msgid "To stop apt and other programs complaining about missing locales you can install your relevant language pack::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:44
# 1e1e2b0979974836ae4c86e92f4b0509
msgid "If you want to run X programs you will need to bind the /tmp directory into the chroot, from outside the chroot run::"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:50
# f42a0982a4d147ebaa0bb9eedcd3d4c2
msgid "Some programs may need you to bind /dev or /proc."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:52
# 4a43078211824e2ba19b0a6c2473033b
msgid "For more information on chroots see our `Debootstrap Chroot wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:55
# 7447623ce2ed418dabd6d71667fb9192
msgid "Alternatives"
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:57
# 49c959d208f545429f6b9241f94d73c0
msgid "SBuild is a system similar to PBuilder for creating an environment to run test package builds in.  It closer matches that used by Launchpad for building packages but takes some more setup compared to PBuilder.  See `the Security Team Build Environment wiki page`_ for a full explanation."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:59
# f0c2133b6ca74f9a9156268af45933f7
msgid "Full virtual machines can be useful for packaging and testing programs.  TestDrive is a program to automate syncing and running daily ISO images, see `the TestDrive wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:63
# 58c400bb56934107b0c871102b4a213a
msgid "You can also set up pbuilder to pause when it comes across a build failure.  Copy C10shell from /usr/share/doc/pbuilder/examples into a directory and use the ``--hookdir=`` argument to point to it."
msgstr ""

#: ../ubuntu-packaging-guide/chroots.rst:67
# 5c91f223d8a74c60bcc637c740b4bcf9
msgid "Amazon's `EC2 cloud computers`_ allow you to hire a computer paying a few US cents per hour, you can set up Ubuntu machines of any supported version and package on those.  This is useful when you want to compile many packages at the same time or to overcome bandwidth restraints."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:3
# 3088e0adf5f04f1791c536576e8dd564
msgid "Communication in Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:5
# 8bf57de257474bf594236a4dc1ba2b7c
msgid "In a project where thousands of lines of code are changed, lots of decisions are made and hundreds of people interact every day, it is important to communicate effectively."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:10
# d7dfc959a4244947a50e7cd0f48ff256
msgid "Mailing lists"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:12
# fbc45863121f460dbede15c7e94bd8eb
msgid "Mailing lists are a very important tool if you want to communicate ideas to a broader team and make sure that you reach everybody, even across timezones."
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:16
# 6a998335dcaf44249867bb7495481ba1
msgid "In terms of development, these are the most important ones:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:18
# 7a3fde751c4645b688daee49eb4ed48e
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel-announce (announce-only, the most important development announcements go here)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:20
# ba991ef9902c4e56bc6cd6d976a423ff
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-devel (general Ubuntu development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:22
# d83d1b8cab92433297a17ce97f245a7b
msgid "https://lists.ubuntu.com/mailman/listinfo/ubuntu-motu (MOTU Team discussion, get help with packaging)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:27
# a6936bceceaa4d17b29e4aba4a39e861
msgid "IRC Channels"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:29
# 918da39ff8464a23866d877196e2be2d
msgid "For real-time discussions, please connect to irc.freenode.net and join one or any of these channels:"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:32
# c8567bde5d2a4b5494a8e1cc0cc46d41
msgid "#ubuntu-devel (for general development discussion)"
msgstr ""

#: ../ubuntu-packaging-guide/communication.rst:33
# 7f699868e5c84df1b942818533a61d91
msgid "#ubuntu-motu (for MOTU team discussion and generally getting help)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:2
# a9823a91ef024289a3d062a27ba80b5d
msgid "Basic Overview of the ``debian/`` Directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:4
# 755eafd8fca24ec68432cc063911205c
msgid "This article will briefly explain the different files important to the packaging of Ubuntu packages which are contained in the ``debian/`` directory. The most important of them are ``changelog``, ``control``, ``copyright``, and ``rules``. These are required for all packages. A number of additional files in the ``debian/`` may be used in order to customize and configure the behavior of the package. Some of these files are discussed in this article, but this is not meant to be a complete list."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:13
# a34224a8044c4c7bb6cc1052581e9b9a
msgid "The changelog"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:15
# 925d30d0f7184fe1b35a10543fe0473f
msgid "This file is, as its name implies, a listing of the changes made in each version. It has a specific format that gives the package name, version, distribution, changes, and who made the changes at a given time. If you have a GPG key (see: :doc:`Getting set up<./getting-set-up/>`), make sure to use the same name and email address in ``changelog`` as you have in your key. The following is a template ``changelog``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:31
# 9bb56ebd3dbd4888b97016e7b331878f
msgid "The format (especially of the date) is important. The date should be in :rfc:`5322` format, which can be obtained by using the command ``date -R``. For convenience, the command ``dch`` may be used to edit changelog. It will update the date automatically."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:36
# 7f7e0867add84e87b9101362d411afab
msgid "Minor bullet points are indicated by a dash \"-\", while major points use an asterisk \"*\"."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:39
# 5c2869fbd8b04caba2b796992f01c3a7
msgid "If you are packaging from scratch, ``dch --create`` (``dch`` is in the ``devscripts`` package) will create a standard ``debian/changelog`` for you."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:43
# 22b32d8900f14d06a2677783b855d01c
msgid "Here is a sample ``changelog`` file for hello::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:52
# 24f02790c42f4f4983ca3a06578604bf
msgid "Notice that the version has a ``-0ubuntu1`` appended to it, this is the distro revision, used so that the packaging can be updated (to fix bugs for example) with new uploads within the same source release version."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:56
# eafbff5f42fe46609f0484c4c5a39110
msgid "Ubuntu and Debian have slightly different package versioning schemes to avoid conflicting packages with the same source version. If a Debian package has been changed in Ubuntu, it has ``ubuntuX`` (where ``X`` is the Ubuntu revision number) appended to the end of the Debian version. So if the Debian hello ``2.6-1`` package was changed by Ubuntu, the version string would be ``2.6-1ubuntu1``. If a package for the application does not exist in Debian, then the Debian revision is ``0`` (e.g. ``2.6-0ubuntu1``)."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:64
# 9a55cbcf85304f98ae17abbde0852ea5
msgid "For further information, see the `changelog section (Section 4.4) <http://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:70
# 9059be84d7644bb1829c3b0b92ac81da
msgid "The control file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:72
# 5d278f0ee4c947f6bf504d3dd2a2df3c
msgid "The ``control`` file contains the information that the package manager (such as ``apt-get``, ``synaptic``, and ``adept``) uses, build-time dependencies, maintainer information, and much more."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:76
# 079a5204debe4bf2aa042d873682ccd6
msgid "For the Ubuntu ``hello`` package, the ``control`` file looks something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:101
# 67f955bf1d1049d4a235a9b67650e822
msgid "The first paragraph describes the source package including the list of packages required to build the package from source in the ``Build-Depends`` field. It also contains some meta-information such as the maintainer's name, the version of Debian Policy that the package complies with, the location of the packaging version control repository, and the upstream home page."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:108
# f5cb24c055d042b8bacbb1ca90710951
msgid "Note that in Ubuntu, we set the ``Maintainer`` field to a general address because anyone can change any package (this differs from Debian where changing packages is usually restricted to an individual or a team). Packages in Ubuntu should generally have the ``Maintainer`` field set to ``Ubuntu Developers <ubuntu-devel-discuss@lists.ubuntu.com>``. If the Maintainer field is modified, the old value should be saved in the ``XSBC-Original-Maintainer`` field. This can be done automatically with the  ``update-maintainer`` script available in the ``ubuntu-dev-tools`` package. For further information, see the `Debian Maintainer Field spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ on the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:120
# d0f3e3e4958e49f68735021be6207b99
msgid "Each additional paragraph describes a binary package to be built."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:122
# 1b5559a39db84fe09f6808e54dacd216
msgid "For further information, see the `control file section (Chapter 5) <http://www.debian.org/doc/debian-policy/ch-controlfields.html>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:128
# e6b08cdd87b64438aec15913c1408e0d
msgid "The copyright file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:130
# 249ee421da0f406ab91d4b81dadeba19
msgid "This file gives the copyright information for both the upstream source and the packaging. Ubuntu and `Debian Policy (Section 12.5) <http://www.debian.org/doc/debian-policy/ch-docs.html#s-copyrightfile>`_ require that each package installs a verbatim copy of its copyright and license information to ``/usr/share/doc/$(package_name)/copyright``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:136
# 953cc09d1ae64dad8b1640081a9f1c78
msgid "Generally, copyright information is found in the ``COPYING`` file in the program's source directory. This file should include such information as the names of the author and the packager, the URL from which the source came, a Copyright line with the year and copyright holder, and the text of the copyright itself. An example template would be::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:178
# 3f0ecc5bc1504fc1bd868ec4484cae19
msgid "This example follows the `Machine-readable debian/copyright <http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/>`_ format. You are encouraged to use this format as well."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:184
# 3beaed53b97d418b995b9ad9af92be15
msgid "The rules file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:186
# 650ffdea6e434bef9c748cdba41562ba
msgid "The last file we need to look at is ``rules``. This does all the work for creating our package. It is a Makefile with targets to compile and install the application, then create the ``.deb`` file from the installed files. It also has a target to clean up all the build files so you end up with just a source package again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:194
# 336a86eb4bc549558837b92e3567fc8c
msgid "Here is a simplified version of the rules file created by ``dh_make`` (which can be found in the ``dh-make`` package):"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:208
# f698cb4fd94b4ab5a6b1ed1d042c76a1
msgid "Let us go through this file in some detail. What this does is pass every build target that ``debian/rules`` is called with as an argument to ``/usr/bin/dh``, which itself will call all the necessary ``dh_*`` commands."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:212
# 030f4d16388a4361976f496909817e5f
msgid "``dh`` runs a sequence of debhelper commands. The supported sequences correspond to the targets of a ``debian/rules`` file: \"build\", \"clean\", \"install\", \"binary-arch\", \"binary-indep\", and \"binary\". In order to see what commands are run in each target, run::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:221
# 30287eaa8f144f73bc6d0d6937529671
msgid "Commands in the binary-indep sequence are passed the \"-i\" option to ensure they only work on binary independent packages, and commands in the binary-arch sequences are passed the \"-a\" option to ensure they only work on architecture dependent packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:226
# ec0094670810404f8b721a843370755a
msgid "Each debhelper command will record when it's successfully run in ``debian/package.debhelper.log``. (Which dh_clean deletes.) So dh can tell which commands have already been run, for which packages, and skip running those commands again."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:231
# 409ba96655474bdaa7bde64990050a18
msgid "Each time ``dh`` is run, it examines the log, and finds the last logged command that is in the specified sequence. It then continues with the next command in the sequence. The ``--until``, ``--before``, ``--after``, and ``--remaining`` options can override this behavior."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:236
# 4c2c8e93d31049c48c3c2ad2f5979cf7
msgid "If ``debian/rules`` contains a target with a name like ``override_dh_command``, then when it gets to that command in the sequence, ``dh`` will run that target from the rules file, rather than running the actual command. The override target can then run the command with additional options, or run entirely different commands instead. (Note that to use this feature, you should Build-Depend on debhelper 7.0.50 or above.)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:245
# 9ece1bf7f7fd42119ced855f5eda54a0
msgid "Have a look at ``/usr/share/doc/debhelper/examples/`` and ``man dh`` for more examples. Also see `the rules section (Section 4.9) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:251
# e5b9cf3be820421ba435c982defe1c74
msgid "Additional Files"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:254
# a250b1ed29bc4be190d79bed109a638c
msgid "The install file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:256
# 8d324c02db114284b1d6aa2b4123aadb
msgid "The ``install`` file is used by ``dh_install`` to install files into the binary package. It has two standard use cases:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:259
# 077256bfbf674357a687088b243e3c74
msgid "To install files into your package that are not handled by the upstream build system."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:260
# 2a36eff61e66491db69e98a2aa76c2cc
msgid "Splitting a single large source package into multiple binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:262
# 4c9e484a6de744b3925ed1872e9619c0
msgid "In the first case, the ``install`` file should have one line per file installed, specifying both the file and the installation directory. For example, the following ``install`` file would install the script ``foo`` in the source package's root directory to ``usr/bin`` and a desktop file in the ``debian`` directory to ``usr/share/applications``::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:273
# 876396746d9a4c79a3b445d126228559
msgid "When a source package is producing multiple binary packages ``dh`` will install the files into ``debian/tmp`` rather than directly into ``debian/<package>``. Files installed into ``debian/tmp`` can then be moved into separate binary packages using multiple ``$package_name.install`` files. This is often done to split large amounts of architecture independent data out of architecture dependent packages and into ``Architecture: all`` packages. In this case, only the name of the files (or directories) to be installed are needed without the installation directory. For example, ``foo.install`` containing only the architecture dependent files might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:286
# 6137d7fb176145bfb0ec7491a45543dd
msgid "While ``foo-common.install`` containing only the architecture independent file might look like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:294
# 263459b17a8f498986b11594d7ba20ea
msgid "This would create two binary packages, ``foo`` and ``foo-common``. Both would require their own paragraph in ``debian/control``."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:297
# 8e44b76c7497440c8598dce86357a433
msgid "See ``man dh_install`` and the `install file section (Section 5.11) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#install>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:302
# 93a1029546064595af23fa9cd5d389ae
msgid "The watch file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:304
# 9ae4c41dab934837b9524e9be1b4804b
msgid "The ``debian/watch`` file allows us to check automatically for new upstream versions using the tool ``uscan`` found in the ``devscripts`` package. The first line of the watch file must be the format version (3, at the time of this writing), while the following lines contain any URLs to parse. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:313
# 4c113058283f41459b8cfea3094c3b6b
msgid "Running ``uscan`` in the root source directory will now compare the upstream version number in ``debian/changelog`` with the latest available upstream version. If a new upstream version is found, it will be automatically downloaded. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:326
# 9a1275682027438bacc40ec85abc0ec2
msgid "If your tarballs live on Launchpad, the ``debian/watch`` file is a little more complicated (see `Question 21146`_ and `Bug 231797`_ for why this is).  In that case, use something like::"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:333
# a75361dc12044a84b91c041c1a8c036a
msgid "For further information, see ``man uscan`` and the `watch file section (Section 4.11) <http://www.debian.org/doc/debian-policy/ch-source.html#s-debianwatch>`_ of the Debian Policy Manual."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:337
# a3f02a0867f2452eb3cb4074f1bd573c
msgid "For a list of packages where the ``watch`` file reports they are not in sync with upstream see `Ubuntu External Health Status <http://qa.ubuntuwire.org/uehs/no_updated.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:342
# f84950aa06fb4bd3a85db546aa01018f
msgid "The source/format file"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:344
# cbb014d930e54ccdba4200cf5cd31128
msgid "This file indicates the format of the source package. It should contain a single line indicating the desired format:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:347
# 0f02844163494c579b9ee7ed78bfc0be
msgid "``3.0 (native)`` for Debian native packages (no upstream version)"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:349
# 5cb64ecfb9bc4ec6a06e04920b07ef3f
msgid "``3.0 (quilt)`` for packages with a separate upstream tarball"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:351
# a6d85a2d0ff0468fb8d887f8f66f71a8
msgid "``1.0`` for packages wishing to explicitly declare the default format"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:353
# 6c4e576ff15144dc9a85c887f496a0a5
msgid "Currently, the package source format will default to 1.0 if this file does not exist. You can make this explicit in the source/format file. If you choose not to use this file to define the source format, Lintian will warn about the missing file. This warning is informational only and may be safely ignored."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:358
# f9501cd12d1e4113bd284d50be7641cb
msgid "You are encouraged to use the newer 3.0 source format. It provides a number of new features:"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:361
# 59d138124f5848ea926810da6f6f85f3
msgid "Support for additional compression formats: bzip2, lzma and xz"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:363
# a186108edccc4b5bb9d5b94872e95a27
msgid "Support for multiple upstream tarballs"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:365
# 471d339dd20143d4a4d748ed79c6a7f0
msgid "Not necessary to repack the upstream tarball to strip the debian directory"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:367
# 543e0f3208b14ad580e0c4b670fb1e53
msgid "Debian-specific changes are no longer stored in a single .diff.gz but in multiple patches compatible with quilt under ``debian/patches/``"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:369
# 702b7c61cd7f4ee3bfae4585e741c9aa
msgid "http://wiki.debian.org/Projects/DebSrc3.0 summarizes additional information concerning the switch to the 3.0 source package formats."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:372
# b8f76a7c871a488991805b0f5064a3c6
msgid "See ``man dpkg-source`` and the `source/format section (Section 5.21) <http://www.debian.org/doc/manuals/maint-guide/dother.en.html#sourcef>`_  of the Debian New Maintainers' Guide for additional details."
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:377
# 8abea61ad98f4c9baf860bd6e1923f51
msgid "Additional Resources"
msgstr ""

#: ../ubuntu-packaging-guide/debian-dir-overview.rst:379
# a15b8899cd82401b996dd816bd7af648
msgid "In addition to the links to the Debian Policy Manual in each section above, the Debian New Maintainers' Guide has more detailed descriptions of each file. `Chapter 4, \"Required files under the debian directory\" <http://www.debian.org/doc/maint-guide/dreq.en.html>`_ further discusses the control, changelog, copyright and rules files. `Chapter 5, \"Other files under the debian directory\" <http://www.debian.org/doc/maint-guide/dother.en.html>`_ discusses additional files that may be used."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:3
# da1cba64d99440bbbfbde84faa767ed1
msgid "Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:6
#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:9
# 212dc3c76fe649f99997414ae03ddfaa
# 0cdb740b06b249c7a1733ed936b7706b
msgid "Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:8
# b96f617d2bdb472187eb522110515c75
msgid "If you followed the instructions to :doc:`get set up with Ubuntu Development<./getting-set-up>`, you should be all set and ready to go."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:13
# 312f7bea6def40b18c435691c37984b7
msgid "As you can see in the image above, there is no surprises in the process of fixing bugs in Ubuntu: you found a problem, you get the code, work on the fix, test it, push your changes to Launchpad and ask for it to be reviewed and merged. In this guide we will go through all the necessary steps one by one."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:20
# 1daeaf47c02d45bd8a406954744417e7
msgid "Finding the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:22
# 9e9ba6ccdb2843ad827cc3b464a01cb2
msgid "There are a lot of different ways to find things to work on. It might be a bug report you are encountering yourself (which gives you a good opportunity to test the fix), or a problem you noted elsewhere, maybe in a bug report."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:26
# 13bcc9a3d823480c946a93adfd3dd15a
msgid "`Harvest <http://harvest.ubuntu.com/>`_ is where we keep track of various TODO lists regarding Ubuntu development. It lists bugs that were fixed upstream or in Debian already, lists small bugs (we call them 'bitesize'), and so on. Check it out and find your first bug to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:35
# 33250c3248f64955a97f870064ad068e
msgid "Figuring out what to fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:37
# 2f96445120fe4e3cba47ee0c26767842
msgid "If you don't know the source package containing the code that has the problem, but you do know the path to the affected program on your system, you can discover the source package that you'll need to work on."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:41
# f2845b15a8c348939e76854d812cb76e
msgid "Let's say you've found a bug in Tomboy, a note taking desktop application. The Tomboy application can be started by running ``/usr/bin/tomboy`` on the command line.  To find the binary package containing this application, use this command::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:48
# bedae4e8e49348229bdd27467fceb8da
msgid "This would print out::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:52
# 49c3b19d9fc34ff58a5a44e43701988b
msgid "Note that the part preceding the colon is the binary package name.  It's often the case that the source package and binary package will have different names. This is most common when a single source package is used to build multiple different binary packages.  To find the source package for a particular binary package, type::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:63
# 9b4e236e92504ad9bc707094fd6ea4cf
msgid "``apt-cache`` is part of the standard installation of Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:66
# 9e81c4b685b9452aba76af35be23b7d9
msgid "Getting the code"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:68
# bc2fcd06ada840758f6a6d7499db3bef
msgid "Once you know the source package to work on, you will want to get a copy of the code on your system, so that you can debug it.  In Ubuntu Distributed Development this is done by :ref:`*branching* the source package <branching>` branch corresponding to the source package.  Launchpad maintains source package branches for all the packages in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:74
# 1af9be9c04ce4df1930b0902105188e7
msgid "Once you've got a local branch of the source package, you can investigate the bug, create a fix, and upload your proposed fix to Launchpad, in the form of a Bazaar branch.  When you are happy with your fix, you can :ref:`submit a *merge proposal* <merge-proposal>`, which asks other Ubuntu developers to review and approve your change.  If they agree with your changes, an Ubuntu developer will upload the new version of the package to Ubuntu so that everyone gets the benefit of your excellent fix - and you get a little bit of credit.  You're now on your way to becoming an Ubuntu developer!"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:83
# 19124ee4ada24cd1a96a3a4cacd692b5
msgid "We'll describe specifics on how to branch the code, push your fix, and request a review in the following sections."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:89
# 3bcf850d168b4c17a5b3f6c5c7efd001
msgid "Work on a fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:91
# 535982371ec8497fa43a02a6ee6a5163
msgid "There are entire books written about finding bugs, fixing them, testing them, etc. If you are completely new to programming, try to fix easy bugs such as obvious typos first. Try to keep changes as minimal as possible and document your change and assumptions clearly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:96
# ba6b50520613420a9f32662ee97b3d4a
msgid "Before working on a fix yourself, make sure to investigate if nobody else has fixed it already or is currently working on a fix. Good sources to check are:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:99
# a3cac6ed2cb0428bbaf4807f359a3d29
msgid "Upstream (and Debian) bug tracker (open and closed bugs),"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:100
# ba349700d164481fb127830d3c2ff6d9
msgid "Upstream revision history (or newer release) might have fixed the problem,"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:101
# 6ce987776e5547229b28e1ca46b27ac7
msgid "bugs or package uploads of Debian or other distributions."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:106
# 559fc513f41e4cc384b1d8ab67ab974b
msgid "You now want to create a patch which includes the fix.  The command ``edit-patch`` is a simple way to add a patch to a package. Run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:111
# 0e2ddfe3162340b098acbc0fba31e9b0
msgid "This will copy the packaging to a temporary directory.  You can now edit files with a text editor or apply patches from upstream, for example::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:116
# 248701c53d184f98a25d68bc8c489d50
msgid "After editing the file type ``exit`` or press ``control-d`` to quit the temporary shell.  The new patch will have been added into ``debian/patches``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:121
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:204
# 9af5f1e09ed648799e71ee6b72290413
# 6d369b0038cd461bbe60a10756537fa3
msgid "Testing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:123
# 31793d92c8524d8f9da4288cd4d1ab4a
msgid "To build a test package with your changes, run these commands::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:128
# cfaf16154b9844a28be7dd5b56d8d2d6
msgid "This will create a source package from the branch contents (``-us -uc`` will just omit the step to sign the source package) and ``pbuilder-dist`` will build the package from source for whatever ``release`` you choose."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:132
# d81cf87f81b4464db511a267006e4731
msgid "Once the build succeeds, install the package from ``~/pbuilder/<release>_result/`` (using ``sudo dpkg -i <package>_<version>.deb``).  Then test to see if the bug is fixed."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:139
#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:155
# 806f0b7d1be8429fbb1622e484f4ed97
# 581de31698ac4dbe8c5924cd02efacbf
msgid "Documenting the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:141
# b22a509541d0458b885bfd3d29df2256
msgid "It is very important to document your change sufficiently so developers who look at the code in the future won't have to guess what your reasoning was and what your assumptions were. Every Debian and Ubuntu package source includes ``debian/changelog``, where changes of each uploaded package are tracked."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:146
# 531654b1df9a4a31bcff6b85eafc7381
msgid "The easiest way to update this is to run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:150
# 257bc511e1ab46dc81100a0689ace63b
msgid "This will add a boilerplate changelog entry for you and launch an editor where you can fill in the blanks. An example of this could be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:159
# 6595df20b57c418fae69c3b98478790c
msgid "``dch`` should fill out the first and last line of such a changelog entry for you already. Line 1 consists of the source package name, the version number, which Ubuntu release it is uploaded to, the urgency (which almost always is 'low'). The last line always contains the name, email address and timestamp (in :rfc:`5322` format) of the change."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:165
# 228e59a021e84b389175f50c41c6d721
msgid "With that out of the way, let's focus on the actual changelog entry itself: it is very important to document:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:168
# bedbda4a5b7245ffb6d7e5cc34e264b4
msgid "where the change was done"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:169
# eeb2000abb804cf6b198a8b25bd33c1f
msgid "what was changed"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:170
# 09236c8d3700457cb17674db6aac84c7
msgid "where the discussion of the change happened"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:172
# 666146b325c443c69be63a180d3b045a
msgid "In our (very sparse) example the last point is covered by ``(LP: #123456)`` which refers to Launchpad bug 123456. Bug reports or mailing list threads or specifications are usually good information to provide as a rationale for a change. As a bonus, if you use the ``LP: #<number>`` notation for Launchpad bugs, the bug will be automatically closed when the package is uploaded to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:181
# 588d6e7455d84e898fd9967442b7a0df
msgid "Committing the fix"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:183
# b74a6d26ad7442f39fee2533107128a4
msgid "With the changelog entry written and saved, you can just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:187
# a52dc587b9f342c3867034fc819e7399
msgid "and the change will be committed (locally) with your changelog entry as a commit message."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:190
# 283890a6cb33432aad50346b72a5322e
msgid "To push it to Launchpad, as the remote branch name, you need to stick to the following nomenclature::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:195
# f4414ee03f714e8c99765e0f87c87e4d
msgid "This could for example be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:199
# 5354730c7617406baec834fd91703739
msgid "So if you just run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:204
# bea1198223154d5985cefb92085b92a4
msgid "you should be all set. The push command should push it to Launchpad and the second command will open the Launchpad page of the remote branch in your browser. There find the \"(+) Propose for merging\" link, click it to get the change reviewed by somebody and included in Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:209
# 2967bece72ec4b908c2cebfea9e227fb
msgid "Our article about :doc:`seeking sponsorship<./udd-sponsorship>` goes into more detail about getting feedback for your proposed changes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug.rst:212
# 48afb4c48ee14c57a3f1cccfed3dce75
msgid "If your branch fixes issues in stable releases or it is a security fix, you might want to have a look at our :doc:`Security and stable release updates<./security-and-stable-release-updates>` article."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:3
# a1231640edc5468b9e2760b6c3d0ba21
msgid "Tutorial: Fixing a bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:5
# d47478b75d7b46ab9482d5f14f644594
msgid "While the mechanics for :doc:`fixing a bug<./fixing-a-bug>` are the same for every bug, every problem you look at is likely to be different from another. An example of a concrete problem might help to get an idea what to consider generally."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:10
# 63bae81a089e4a8ea5b769fa513edc07
msgid "At the time of writing this article this was not fixed yet. When you are reading the article this might actually be fixed. Take this as an example and try to adapt it to the specific problem you are facing."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:15
# 6c2c0c9306ce461a8f9e3d35b349cd70
msgid "Confirming the problem"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:17
# 71b700c1eca54be1adf743d972689138
msgid "Let's say the package ``bumprace`` does not have a homepage in its package description. As a first step you would check if the problem is not solved already. This is easy to check, either take a look at Software Center or run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:23
# a373eb20437c4118aa4ec64c428e608b
msgid "The output should be similar to this::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:49
# de2fb6586bea4a16be9add2110e85ecf
msgid "A counter-example would be ``gedit``, which has a homepage set::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:55
# aae0185d6e9641478cee3b3d71044bab
msgid "Sometimes you will find that a particular problem you are looking into is already fixed. To avoid wasting efforts and duplicating work it makes sense to first do some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:61
# 1d8a2f03c14143689c668b05287a6bb1
msgid "Research bug situation"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:63
# 1c76446108eb41d48b8f5858e47008d0
msgid "First we should check if a bug for the problem exists in Ubuntu already. Maybe somebody is working on a fix already, or we can contribute to the solution somehow. For Ubuntu we have a quick look at https://bugs.launchpad.net/ubuntu/+source/bumprace and there is no open bug with our problem there."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:69
# 596e7b8cd3a5404c8f352d0c3da3e2c2
msgid "For Ubuntu the URL ``https://bugs.launchpad.net/ubuntu/+source/<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:73
# 307ce7c553e4477b9f0f1fd1e8ee8604
msgid "For Debian, which is the major source for Ubuntu's packages, we have a look at http://bugs.debian.org/src:bumprace and can't find a bug report for our problem either."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:77
# d49d3c758b224ebdb3cdfd22ca02c593
msgid "For Debian the URL ``http://bugs.debian.org/src:<package>`` should always take to the bug page of the source package in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:80
# 35566596aad44c1d9c1926ceeac74cd6
msgid "The problem we are working on is special as it only concerns the packaging-related bits of ``bumprace``. If it was a problem in the source code it would be helpful to also check the Upstream bug tracker. This is unfortunately often different for every package you have a look at, but if you search the web for it, you should in most cases find it pretty easily."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:88
# 995dca2bb0e64b9da56a12cd9c3b423a
msgid "Offering help"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:90
# 071d6a7b39384ac68b7d8cba21c99a95
msgid "If you found an open bug and it is not assigned to somebody and you are in a position to fix it, you should comment on it with your solution. Be sure to include as much information as you can: Under which circumstances does the bug occur? How did you fix the problem? Did you test your solution?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:95
# 81df944c2d384675b58081b19aa0e045
msgid "If no bug report has been filed, you can file a bug for it. What you might want to bear in mind is: Is the issue so small that just asking for somebody to commit it is good enough? Did you manage to only partially fix the issue and you want to at least share your part of it?"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:100
# 5ca5e1c3608e49ebb7f9d9e0561a29d2
msgid "It is great if you can offer help and will surely be appreciated."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:104
# 57b666c32f454d6392db447a45220705
msgid "Fixing the issue"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:106
# 31f1df3e0d964924830486bc82491c33
msgid "For this specific example it is enough to search the web for ``bumprace`` and find the homepage of it. Be sure it is a live site and not just a software catalogue. http://www.linux-games.com/bumprace/ looks like it is the proper place."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:111
# 91e2f5fd83824198a7e88ad4c99aa287
msgid "To address the issue in the source package, we first need the source and we can easily get it by running::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:117
# e09f08a02b36488eb9a9986c301d08b4
msgid "If you read :doc:`the Debian Directory Overview<./debian-dir-overview>` before, you might remember, that the homepage for a package is specified in the first part of ``debian/control``, the section which starts with ``Source:``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:121
# 15d6380a8c2845248cb569bb94070c59
msgid "So what we do next is run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:125
# c6746b70835e4322830347dda76a7483
msgid "and edit ``debian/control`` to add ``Homepage: http://www.linux-games.com/bumprace/``. At the end of the first section should be a good place for it. Once you have done this, save the file."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:129
# 29b0852d12144e1a872667e3f4d9680e
msgid "If you now run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:133
# 2fd10ee5a632419cbabc54ce9ee5d22e
msgid "you should see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:149
# e2e0beb100bb445cab9f1bdc978bcbe5
msgid "The diff is pretty simple to understand. The ``+`` indicates a line which was added. In our cases it was added just before the second section, starting with ``Package``, which indicates a resulting binary package."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:157
# daefef4b10df44728252a825212dda19
msgid "It is important to explain to your fellow developers what exactly you did. If you run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:163
# 29e1f170e5014e03ab1a4e8447ee48a0
msgid "this will start an editor with a boilerplate changelog entry which you just have to fill out. In our case something like ``debian/control: Added project's homepage.`` should do. Then save the file. To double-check this worked out, run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:170
# 3c9fe1188f36428a9f9d3e2b50891cc9
msgid "and you will see something like this:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:189
# b02fccfcae9f4d0389b27dda9cb76bd6
msgid "A few additional considerations:"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:191
# 91fcd10564904bc59b27b813d32e4398
msgid "If you have a reference to a Launchpad bug which is fixed by the issue, add (``LP: #<bug number>``) to the changelog entry line, ie: ``(LP: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:193
# d111a1de35614ef3ac0c9f22a3239155
msgid "If you want to get your fix included in Debian, for a Debian bug the syntax is ``(Closes: #<bug number>)``, ie: ``(Closes: #123456)``."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:195
# a35e21df845947aba026cf0caf26d3af
msgid "If it is a reference to an upstream or Debian bug or a mailing list discussion, mention it as well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:197
# a98d2c1243f6437585696c195db9d960
msgid "Try to wrap your lines at 80 characters."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:198
# a1ea79c65fbc4626b9d858194e14737f
msgid "Try to be specific, not an essay, but enough for somebody (who did not deeply look into the issue) to understand."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:200
# 43d2757ff72f4776988128ac2f81857a
msgid "Mention how you fixed the issue and where."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:206
# bfab71f44f6f48c48c1cd4866103510b
msgid "To test the fix, you need to :doc:`have your development environment set up<./getting-set-up>`, then to build the package, install it and verify the problem is solved. In our case this would be::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:214
# ee0e7fa41ade43569b99fda983708e31
msgid "In step one we build the source package from the branch, then build it by using ``pbuilder``, then inspect the resulting package to check if the Homepage field was added properly."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:218
# 80562a0b3483492f951b81e8f4f73fc7
msgid "In a lot of cases you will have to actually install the package to make sure it works as expected. Our case is a lot easier. If the build succeeded, you will find the binary packages in ``~/pbuilder/<release>_result``. Install them via ``sudo dpkg -i <package>.deb`` or by double-clicking on them in your file manager."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:225
# 5a748b86a08a4fa993bb4d1c51bdefeb
msgid "As we verified, the problem is now solved, so the next step is sharing our solution with the world."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:229
# cde86a5e1acd4c22a397ad2e14f927e4
msgid "Getting the fix included"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:231
# 0f8502d300c7409b9554cbfbef5d8d5c
msgid "It makes to get fix included as Upstream as possible. Doing that you can guarantee that everybody can take the Upstream source as-is and don't need to have local modifications to fix it."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:235
# 97c53c188c4a4e749443bd16e3c0bfc5
msgid "In our case we established that we have a problem with the packaging, both in Ubuntu and Debian. As Ubuntu is based on Debian, we will send the fix to Debian. Once it is included there, it will be picked up by Ubuntu eventually. The issue in our tutorial is clearly non-critical, so this approach makes sense. If it is important to fix the issue as soon as possible, you will need to send the solution to multiple bug trackers. Provided the issue affects all parties in question."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:243
# a144c83cc298480ab238ad99de7d7db7
msgid "To submit the patch to Debian, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:247
# edf8497f5fb3401daa8143290eabae28
msgid "This will take you through a series of steps to make sure the bug ends up in the correct place. Be sure to review the diff again to make sure it does not include random changes you made earlier."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:251
# 726a04f37a4a4538930d88900da00581
msgid "Communication is important, so when you add some more description to it to the inclusion request, be friendly, explain it well."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:254
# d530d49210c74db0a09ca1760c6a37bd
msgid "If everything went well you should get a mail from Debian's bug tracking system with more information. This might sometimes take a few minutes."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:257
# 3d38452ef60844cb9aef791ce93bcae6
msgid "If the problem is just in Ubuntu, you might want to consider :doc:`Seeking Review and Sponsorship<./udd-sponsorship>` to get the fix included."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:263
# 96fa96b58ebe439386d3fd2462697411
msgid "Additional considerations"
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:265
# b5bf1ecf8e4b4dbc9f75fb6846a581d7
msgid "If you find a package and find that there are a couple of trivial things you can fix at the same time, do it. This will speed up review and inclusion."
msgstr ""

#: ../ubuntu-packaging-guide/fixing-a-bug-example.rst:268
# b3df560b557a442cabd9803a20df14dc
msgid "If there are multiple big things you want to fix, it might be advisable to send individual patches or merge proposals instead. If there are individual bugs filed for the issues already, this makes it even easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:3
# 73e69081d40a487f95053fd7dabee1f1
msgid "Getting Set Up"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:5
# fac773f5476241b1ad27c0506ce2b99a
msgid "There are a number of things you need to do to get started developing for Ubuntu. This article is designed to get your computer set up so that you can start working with packages, and upload your packages to Ubuntu's hosting platform, Launchpad. Here's what we'll cover:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:10
# 0f1695abb5684b4ba56de35c4c19c928
msgid "Installing packaging-related software. This includes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:12
# 61d50649f53849beaf100681df91c6de
msgid "Ubuntu-specific packaging utilities"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:13
# 30c1e4c3637e49f1815044e7b900e7d0
msgid "Encryption software so your work can be verified as being done by you"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:14
# 02ed94c180794d9a8dc2be433e178e2e
msgid "Additional encryption software so you can securely transfer files"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:16
# 90c1f072415b49dfba0d69862518fb4d
msgid "Creating and configuring your account on Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:17
# 921cfb4df7a84bc0ba7f5672d777b848
msgid "Setting up your development environment to help you do local builds of packages, interact with other developers, and propose your changes on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:22
# 0e9d63a358b148fab6e23ba80580ef67
msgid "It is advisable to do packaging work using the current development version of Ubuntu. Doing so will allow you to test changes in the same environment where those changes will actually be applied and used."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:26
# cfe7f02f331d40f09570797f886bc316
msgid "Don't worry though, the `Ubuntu development release wiki page <https://wiki.ubuntu.com/UsingDevelopmentReleases>`_ shows a variety of ways to safely use the development release."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:32
# 1b5fa6fe7b8b4c5fae6a584a484d48ea
msgid "Install basic packaging software"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:34
# 007fa41366f043f4918fc82b340afbfd
msgid "There are a number of tools that will make your life as an Ubuntu developer much easier.  You will encounter these tools later in this guide.  To install most of the tools you will need run this command::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:41
# 7cf3d2259cc34fe9abdc28c27084e8ed
msgid "Note: Since Ubuntu 11.10 \"Oneiric Ocelot\" (or if you have Backports enabled on a currently supported release), the following command will install the above and other tools which are quite common in Ubuntu development::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:49
# 5c80a78b09024fe38a1ac18a7086caff
msgid "This command will install the following software:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:51
# f1e86ce2a1f94b0f93e49bb80f421062
msgid "``gnupg`` -- `GNU Privacy Guard`_ contains tools you will need to create a cryptographic key with which you will sign files you want to upload to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:54
# 5c0d63be001944b4b424753dab9b3366
msgid "``pbuilder`` -- a tool to do reproducible builds of a package in a clean and isolated environment."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:56
# 2e1e15f73a8a46baa7d58a07bede05c9
msgid "``ubuntu-dev-tools`` (and ``devscripts``, a direct dependency) -- a collection of tools that make many packaging tasks easier."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:58
# fc535d4fda654414a5232bfbd9bda727
msgid "``bzr-builddeb`` (and ``bzr``, a dependency) -- distributed version control with Bazaar, a new way of working with packages for Ubuntu that will make it easy for many developers to collaborate and work on the same code while keeping it trivial to merge each other's work."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:62
# ed1357d9f3454fb08f93185fdf4e373a
msgid "``apt-file`` provides an easy way to find the binary package that contains a given file."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:67
# 071451e06bbe40c4a578d1cff6b3deeb
msgid "Create your GPG key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:69
# 26184d780ba847878df187b8648f1f3b
msgid "GPG stands for `GNU Privacy Guard`_ and it implements the OpenPGP standard which allows you to sign and encrypt messages and files. This is useful for a number of purposes. In our case it is important that you can sign files with your key so they can be identified as something that you worked on. If you upload a source package to Launchpad, it will only accept the package if it can absolutely determine who uploaded the package."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:76
# e2f6194e37d6476d9f8bdf6c145719f5
msgid "To generate a new GPG key, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:80
# b9551e0f885447afb0db3004495c39f6
msgid "GPG will first ask you which kind of key you want to generate. Choosing the default (RSA and DSA) is fine. Next it will ask you about the keysize. The default (currently 2048) is fine, but 4096 is more secure. Afterwards, it will ask you if you want it to expire the key at some stage. It is safe to say \"0\", which means the key will never expire. The last questions will be about your name and email address. Just pick the ones you are going to use for Ubuntu development here, you can add additional email addresses later on. Adding a comment is not necessary. Then you will have to set a passphrase, choose a safe one (a passphrase is just a password which is allowed to include spaces)."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:90
# 56e45cb98fff499c84ef78ec8f04b333
msgid "Now GPG will create a key for you, which can take a little bit of time; it needs random bytes, so if you give the system some work to do it will be just fine.  Move the cursor around, type some paragraphs of random text, load some web page."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:95
# 5b78f4d54d9b43a490969ba6fa80eed9
msgid "Once this is done, you will get a message similar to this one::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:102
# 51879020041345b1b3c85ccf3f3d4279
msgid "In this case ``43CDE61D`` is the *key ID*."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:104
# 03031d0f59b24ef19ac0c8f61d734eb3
msgid "Next, you need to upload the public part of your key to a keyserver so the world can identify messages and files as yours. To do so, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:109
# 8f122d82268b43beb9794d32e182067a
msgid "This will send your key to one keyserver, but a network of keyservers will automatically sync the key between themselves. Once this syncing is complete, your signed public key will be ready to verify your contributions around the world."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:116
# 66a921776de84237b91933131ce708c7
msgid "Create your SSH key"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:118
# f53a3cad10264b8ab558dd25f44bf75a
msgid "SSH_ stands for *Secure Shell*, and it is a protocol that allows you to exchange data in a secure way over a network. It is common to use SSH to access and open a shell on another computer, and to use it to securely transfer files. For our purposes, we will mainly be using SSH to securely upload source packages to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:124
# 1d319b0d36e84668aedc8fa4cc39a6dd
msgid "To generate an SSH key, enter::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:128
# da7bacbd4fa54b47bd00ac900a03f917
msgid "The default file name usually makes sense, so you can just leave it as it is. For security purposes, it is highly recommended that you use a passphrase."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:133
# f844ea865d264a8aac44f6ff096acd53
msgid "Set up pbuilder"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:135
# d9b941d83bdf4677a26b1e4f9668a892
msgid "``pbuilder`` allows you to build packages locally on your machine. It serves a couple of purposes:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:138
# 868d3657f3fc46d28533735c70fc2908
msgid "The build will be done in a minimal and clean environment. This helps you make sure your builds succeed in a reproducible way, but without modifying your local system"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:141
# 11ddecbd692343f6b78acdeca27ce617
msgid "There is no need to install all necessary *build dependencies* locally"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:142
# c6f1dae0c06f49579493a92cf14bedfc
msgid "You can set up multiple instances for various Ubuntu and Debian releases"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:144
# 12b680f3e7cb42dd95701a87cdb55d14
msgid "Setting ``pbuilder`` up is very easy, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:148
# a945a6c01023429d93b1db49e9f1d362
msgid "where <release> is for example `natty`, `maverick`, `lucid` or in the case of Debian maybe `sid`. This will take a while as it will download all the necessary packages for a \"minimal installation\". These will be cached though."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:154
# 67da1aa860144e02ae91b0711df3ec53
msgid "Get set up to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:156
# 23ee499a2aed43fcb345155da20b1003
msgid "With a basic local configuration in place, your next step will be to configure your system to work with Launchpad. This section will focus on the following topics:"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:160
# 7b51c2f8bb584d8b8422d7d4034de7ec
msgid "What Launchpad is and creating a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:161
# 1dc93c36a68444a88aae5621fb4f99ab
msgid "Uploading your GPG and SSH keys to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:162
# c016128713ef4687bb82e6a64c0fb83c
msgid "Configuring Bazaar to work with Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:163
# e55b48532ac143069d4648d015910590
msgid "Configuring Bash to work with Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:167
# 2bc462b19afa4538a7a9a00aa0965019
msgid "About Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:169
# 0c27a01c0f7c4d33be746735eb245ba5
msgid "Launchpad is the central piece of infrastructure we use in Ubuntu. It not only stores our packages and our code, but also things like translations, bug reports, and information about the people who work on Ubuntu and their team memberships.  You will also use Launchpad to publish your proposed fixes, and get other Ubuntu developers to review and sponsor them."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:175
# a4caebaf164e477081ce2d5b62f23e7e
msgid "You will need to register with Launchpad and provide a minimal amount of information. This will allow you to download and upload code, submit bug reports, and more."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:179
# d156a9b36fe74596a92a3ba289b9cd2e
msgid "Besides hosting Ubuntu, Launchpad can host any Free Software project. For more information see the `Launchpad Help wiki <https://help.launchpad.net/>`_."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:184
# bc8ab94e7a0a484884f6d8ba1feb4073
msgid "Get a Launchpad account"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:186
# 908530e9b3584bab81c61df38434373d
msgid "If you don't already have a Launchpad account, you can easily `create one`_. If you have a Launchpad account but cannot remember your Launchpad id, you can find this out by going to https://launchpad.net/~ and looking for the part after the `~` in the URL."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:191
# ef262da9779c4d9e900cdee0e26b51cf
msgid "Launchpad's registration process will ask you to choose a display name. It is encouraged for you to use your real name here so that your Ubuntu developer colleagues will be able to get to know you better."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:195
# 35a6a416a87e47799d808cb0d039ea1c
msgid "When you register a new account, Launchpad will send you an email with a link you need to open in your browser in order to verify your email address. If you don't receive it, check in your spam folder."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:199
# e3c23b37360849b3ab19069fd6b8fc85
msgid "`The new account help page <https://help.launchpad.net/YourAccount/NewAccount>`_ on Launchpad has more information about the process and additional settings you can change."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:205
# 8b24fb7a4616421da3db3dac1b66012c
msgid "Upload your GPG key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:207
# 743fa78f66474f3a9e2cd3f21a5f5983
msgid "To find about your GPG fingerprint, run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:211
# 909a22a80ac94970bfbb6b54ea98c2fc
msgid "and it will print out something like::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:219
# 69a901487ca6418a95c96e2128c8301a
msgid "Head to https://launchpad.net/~/+editpgpkeys and copy the \"Key fingerprint\" into the text box. In the case above this would be ``5C28 0144 FB08 91C0 2CF3  37AC 6F0B F90F 43CD E61D``. Now click on \"Import Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:224
# 552d4e38e69a4df69cd49ce0a0ae8819
msgid "Launchpad will use the fingerprint to check the Ubuntu key server for your key and, if successful, send you an encrypted email asking you to confirm the key import. Check your email account and read the email that Launchpad sent you. `If your email client supports OpenPGP encryption, it will prompt you for the password you chose for the key when GPG generated it. Enter the password, then click the link to confirm that the key is yours.`"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:231
# 79082a79702c4a9889f933c93d1523eb
msgid "Launchpad encrypts the email, using your public key, so that it can be sure that the key is yours. If your email software does not support OpenPGP encryption, copy the encrypted email's contents, type ``gpg`` in your terminal, then paste the email contents into your terminal window."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:236
# 7bd08e5cd94f4c408616265bdaa4a096
msgid "Back on the Launchpad website, use the Confirm button and Launchpad will complete the import of your OpenPGP key."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:239
# c0669b5bd1234fdfab1496c7576b875c
msgid "Find more information at https://help.launchpad.net/YourAccount/ImportingYourPGPKey"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:243
# 06f6fac917324ef9b86121f54fa8fdb3
msgid "Upload your SSH key to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:245
# a01b35185447481a80ad9ebe2e97d0ba
msgid "Open https://launchpad.net/~/+editsshkeys in a web browser, also open ``~/.ssh/id_rsa.pub`` in a text editor. This is the public part of your SSH key, so it is safe to share it with Launchpad. Copy the contents of the file and paste them into the text box on the web page that says \"Add an SSH key\". Now click \"Import Public Key\"."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:251
# 706a1f2c408b4103a55f76df7e1558fc
msgid "For more information on this process, visit the `creating an SSH keypair <https://help.launchpad.net/YourAccount/CreatingAnSSHKeyPair>`_ page on Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:257
# 07f3d9d3536e45f9b1b6a83655f69cb3
msgid "Configure Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:259
# 9c9aceff088e42f0ac6fa1efe6b02b4e
msgid "Bazaar is the tool we use to store code changes in a logical way, to exchange proposed changes and merge them, even if development is done concurrently.  It is used for the new Ubuntu Distributed Development method of working with Ubuntu packages."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:264
# 4844559e0ad941eca6c98143bdcdb486
msgid "To tell Bazaar who you are, simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:269
# d2070d76cf8c4d2c8d5fecb929e7e632
msgid "`whoami` will tell Bazaar which name and email address it should use for your commit messages. With `launchpad-login` you set your Launchpad ID. This way code that you publish in Launchpad will be associated with you."
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:273
# 29fda8184ca84dc2843326350d27fbc2
msgid "Note: If you can not remember the ID, go to https://launchpad.net/~ and see where it redirects you. The part after the \"~\" in the URL is your Launchpad ID.)"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:279
# a8473f70b6f24f7e8e4c26724f67ce4d
msgid "Configure your shell"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:280
# 292456e799af47f783bd4f96e3f6a869
msgid "Similar to Bazaar, the Debian/Ubuntu packaging tools need to learn about you as well. Simply open your `~/.bashrc` in a text editor and add something like this to the bottom of it::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:287
# 4c7c35fe390941c38790ef0e2c8f2832
msgid "Now save the file and either restart your terminal or run::"
msgstr ""

#: ../ubuntu-packaging-guide/getting-set-up.rst:291
# ed784e596d364f99a12a61c033515e5c
msgid "(If you do not use the default shell, which is `bash`, please edit the configuration file for that shell accordingly.)"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:9
# 955e0e80059240cd8e3ef70fced9fa7d
msgid "Ubuntu Packaging Guide"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:11
# 1408d518f5544025a506f4494407d207
msgid "Ubuntu is not only a free and open source operating system, its platform is also open and developed in a transparent fashion. The source code for every single component can be obtained easily and every single change to the Ubuntu platform can be reviewed."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:16
# 2f14230d3194459a8ab58c18d4eea779
msgid "This means you can actively get involved in improving it and the community of Ubuntu platform developers is always interested in helping peers getting started."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:20
# e8980eef368743469216244721560b55
msgid "The guide is split up into two sections:"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:22
# 210252f012b7488db6bdce2a3b03b035
msgid "A list of articles based on tasks, things you want to get done."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:23
# 95cac7a14efa411d8e6ec88bb15a688f
msgid "A set of knowledge-base articles that dig deeper into specific bits of our tools and workflows."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:26
# 7adbf9dfe4ac428d8cab24c678b3ae96
msgid "This guide focuses on the Ubuntu Distributed Development packaging method. This is a new way of packaging which uses Distributed Revision Control branches.  It currently has some limitations which mean many teams in Ubuntu use :doc:`traditional packaging<./traditional-packaging>` methods.  See the :doc:`UDD Introduction<./udd-intro>` page for an introduction to the differences."
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:33
# 5dbf5ca6a1ac4f359ac0f1539766ae65
msgid "Articles"
msgstr ""

#: ../ubuntu-packaging-guide/index.rst:50
# 2b8f05c79a8040e9899be498b7404575
msgid "Knowledge Base"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:3
# f10555b0bebf4bfa9f7b21e2eaeeb1be
msgid "Introduction to Ubuntu Development"
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:5
# c2722e56788b45cf83a943e2b370a817
msgid "Ubuntu is made up of thousands of different components, written in many different programming languages. Every component -  be it a software library, a tool or a graphical application - is available as a source package. Source packages in most cases consist of two parts: the actual source code and metadata. Metadata includes the dependencies of the package, copyright and licensing information, and instructions on how to build the package. Once this source package is compiled, the build process provides binary packages, which are the .deb files users can install."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:14
# ca6db34c4cfb4296968525fb3567da2b
msgid "Every time a new version of an application is released, or when someone makes a change to the source code that goes into Ubuntu, the source package must be uploaded to Launchpad's build machines to be compiled. The resulting binary packages then are distributed to the archive and its mirrors in different countries. The URLs in ``/etc/apt/sources.list`` point to an archive or mirror. Every day CD images are built for a selection of different Ubuntu flavours. Ubuntu Desktop, Ubuntu Server, Kubuntu and others specify a list of required packages that get on the CD. These CD images are then used for installation tests and provide the feedback for further release planning."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:24
# 4f1e6dad79e34097896f6c66b9eb056b
msgid "Ubuntu's development is very much dependent on the current stage of the release cycle. We release a new version of Ubuntu every six months, which is only possible because we have established strict freeze dates. With every freeze date that is reached developers are expected to make fewer, less intrusive changes. Feature Freeze is the first big freeze date after the first half of the cycle has passed. At this stage features must be largely implemented. The rest of the cycle is supposed to be focused on fixing bugs. After that the user interface, then the documentation, the kernel, etc. are frozen, then the beta release is put out which receives a lot of testing. From the beta release onwards, only critical bugs get fixed and a release candidate release is made and if it does not contain any serious problems, it becomes the final release."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:39
# 23df29baa61144bb8f65c24b80a3d453
msgid "Thousands of source packages, billions of lines of code, hundreds of contributors require a lot of communication and planning to maintain high standards of quality. At the beginning of each release cycle we have the Ubuntu Developer Summit where developers and contributors come together to plan the features of the next releases. Every feature is discussed by its stakeholders and a specification is written that contains detailed information about its assumptions, implementation, the necessary changes in other places, how to test it and so on. This is all done in an open and transparent fashion, so even if you cannot attend the event in person, you can participate remotely and listen to a streamcast, chat with attendants and subscribe to changes of specifications, so you are always up to date."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:51
# 9851dc14adf742cbafbe306bef776f2e
msgid "Not every single change can be discussed in a meeting though, particularly because Ubuntu relies on changes that are done in other projects. That is why contributors to Ubuntu constantly stay in touch. Most teams or projects use dedicated mailing lists to avoid too much unrelated noise. For more immediate coordination, developers and contributors use Internet Relay Chat (IRC). All discussions are open and public."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:58
# e5e285407327464f933d4388e0292034
msgid "Another important tool regarding communication is bug reports. Whenever a defect is found in a package or piece of infrastructure, a bug report is filed in Launchpad. All information is collected in that report and its importance, status and assignee updated when necessary. This makes it an effective tool to stay on top of bugs in a package or project and organise the workload."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:65
# a93197d5edf4472f8f2d6d07dc2e200b
msgid "Most of the software available through Ubuntu is not written by Ubuntu developers themselves. Most of it is written by developers of other Open Source projects and then integrated into Ubuntu. These projects are called \"Upstreams\", because their source code flows into Ubuntu, where we \"just\" integrate it. The relationship to Upstreams is critically important to Ubuntu. It is not just code that Ubuntu gets from Upstreams, but it is also that Upstreams get users, bug reports and patches from Ubuntu (and other distributions)."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:74
# bd257ae63a844fef98087c6840830a97
msgid "The most important Upstream for Ubuntu is Debian. Debian is the distribution that Ubuntu is based on and many of the design decisions regarding the packaging infrastructure are made there. Traditionally, Debian has always had dedicated maintainers for every single package or dedicated maintenance teams. In Ubuntu there are teams that have an interest in a subset of packages too, and naturally every developer has a special area of expertise, but participation (and upload rights) generally is open to everyone who demonstrates ability and willingness."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:83
# eb51af81181645d680f997cc7d90e8dc
msgid "Getting a change into Ubuntu as a new contributor is not as daunting as it seems and can be a very rewarding experience. It is not only about learning something new and exciting, but also about sharing the solution and solving a problem for millions of users out there."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:88
# 4e685a74430a4856974a12a79f77877e
msgid "Open Source Development happens in a distributed world with different goals and different areas of focus. For example there might be the case that a particular Upstream is interested in working on a new big feature while Ubuntu, because of the tight release schedule, is interested in shipping a solid version with just an additional bug fix. That is why we make use of \"Distributed Development\", where code is being worked on in various branches that are merged with each other after code reviews and sufficient discussion."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:98
# c6ba6499ebf6449aa8394649d0f56166
msgid "In the example mentioned above it would make sense to ship Ubuntu with the existing version of the project, add the bugfix, get it into Upstream for their next release and ship that (if suitable) in the next Ubuntu release. It would be the best possible compromise and a situation where everybody wins."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:103
# 8b8af2833ba34a538ef7821b327490b2
msgid "To fix a bug in Ubuntu, you would first get the source code for the package, then work on the fix, document it so it is easy to understand for other developers and users, then build the package to test it. After you have tested it, you can easily propose the change to be included in the current Ubuntu development release. A developer with upload rights will review it for you and then get it integrated into Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:112
# 215746c7f4c44b72ad437b5aa5727322
msgid "When trying to find a solution it is usually a good idea to check with Upstream and see if the problem (or a possible solution) is known already and, if not, do your best to make the solution a concerted effort."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:116
# 67cfbf9d57514a3eb1c53a8491319dc5
msgid "Additional steps might involve getting the change backported to an older, still supported version of Ubuntu and forwarding it to Upstream."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:119
# cc8e803ebcb34ed5a596fdea4d058b64
msgid "The most important requirements for success in Ubuntu development are: having a knack for \"making things work again,\" not being afraid to read documentation and ask questions, being a team player and enjoying some detective work."
msgstr ""

#: ../ubuntu-packaging-guide/introduction-to-ubuntu-development.rst:123
# bf7716b19d9b4560a967ca9f309bf10c
msgid "Good places to ask your questions are ``ubuntu-motu@lists.ubuntu.com`` and ``#ubuntu-motu`` on ``irc.freenode.net``. You will easily find a lot of new friends and people with the same passion that you have: making the world a better place by making better Open Source software."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:3
# 695dfe290db241079ee860fc34fb45dc
msgid "KDE Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:5
# 22b48256bc9c4134ad2e3bb6e822eff6
msgid "Packaging of KDE programs in Ubuntu is managed by the Kubuntu and MOTU teams.  You can contact the Kubuntu team on the `Kubuntu mailing list`_ and ``#kubuntu-devel`` Freenode IRC channel.  More information about Kubuntu development is on the `Kubuntu wiki page`_."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:10
# 30abf5172eef48b5818ef8adecbd15e6
msgid "Our packaging follows the practices of the ``Debian Qt/KDE Team`` and Debian KDE Extras Team.  Most of our packages are derived from the packaging of these Debian teams."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:15
# 5cf1603efdff45fa8c332bfe54229785
msgid "Patching Policy"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:17
# d286ab8a782a415abb66cd5274b8c781
msgid "Kubuntu does not add patches to KDE programs unless they come from the upstream authors or submitted upstream with the expectation they will be merged soon or we have consulted the issue with the upstream authors."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:22
# f03a3812e35d4b328e497edd15317c79
msgid "Kubuntu does not change the branding of packages except where upstream expects this (such as the top left logo of the Kickoff menu) or to simplify (such as removing splash screens)."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:27
#: ../ubuntu-packaging-guide/python-packaging.rst:31
# 1382b9e6ba7544df8a481b06fdce6c59
# 3b643d3531384ff2b854d34a07fd9976
msgid "debian/rules"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:29
# 6db68dff88bc4aed8d5641bf1bde514a
msgid "Debian packages include some additions to the basic Debhelper usage. These are kept in the ``pkg-kde-tools`` package."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:32
# 8e4ef4d642db4df6b296e847544ad983
msgid "Packages which use Debhelper 7 should add the ``--with=kde`` option. This will ensure the correct build flags are used and add options such as handling kdeinit stubs and translations::"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:39
# 2d2fb25a0d6041e982b6eb4c59ac0f6c
msgid "Some newer KDE packages use the ``dhmk`` system, an alternative to ``dh`` made by the Debian Qt/KDE team.  You can read about it in /usr/share/pkg-kde-tools/qt-kde-team/2/README.  Packages using this will ``include /usr/share/pkg-kde-tools/qt-kde-team/2/debian-qt-kde.mk`` instead of running ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:47
# 4fb0fc6e4cb142fc8b814f5141c8b0a5
msgid "Translations"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:49
# 6e3fba91134741479d45cbf4aaa8b0c6
msgid "Packages in main have their translations imported into Launchpad and exported from Launchpad into Ubuntu's language-packs."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:52
# 189efc0a203e4e71ad53d0e45537efac
msgid "So any KDE package in main must generate translation templates, include or make available upstream translations and handle ``.desktop`` file translations."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:56
# e4177446cf464debb09248f124f2e39d
msgid "To generate translation templates the package must include a ``Messages.sh`` file; complain to the upstream if it does not.  You can check it works by running ``extract-messages.sh`` which should produce one or more ``.pot`` files in ``po/``.  This will be done automatically during build if you use the ``--with=kde`` option to ``dh``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:63
# b35c57cd9c1f45c3822063a6b5aa10a1
msgid "Upstream will usually have also put the translation ``.po`` files into the ``po/`` directory.  If they do not, check if they are in separate upstream language packs such as the KDE SC language packs.  If they are in separate language packs Launchpad will need to associate these together manually, contact `dpm`_ to do this."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:69
# a6c71d65a0d74ee794e26f527c9071fd
msgid "If a package is moved from universe to main it will need to be re-uploaded before the translations get imported into Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:72
# 7f469e28b80e44e8b907cf0acd634feb
msgid "``.desktop`` files also need translations.  We patch KDELibs to read translations out of ``.po`` files which are pointed to by a line ``X-Ubuntu-Gettext-Domain=`` added to ``.desktop`` files at package build time.  A .pot file for each package is be generated at build time and .po files need to be downloaded from upstream and included in the package or in our language packs.  The list of .po files to be downloaded from KDE's repositories is in ``/usr/lib/kubuntu-desktop-i18n/desktop-template-list``."
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:82
# e96f3254aea843919bc96216e2bfd869
msgid "Library Symbols"
msgstr ""

#: ../ubuntu-packaging-guide/kde.rst:84
# 9448070b6c664a348c33a06f3a9d3788
msgid "Library symbols are tracked in ``.symbols`` files to ensure none go missing for new releases.  KDE uses C++ libraries which act a little differently compared to C libraries.  Debian's Qt/KDE Team have scripts to handle this. See `Working with symbols files`_ for how to create and keep these files up to date."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:3
# 71510560265f4c95b322d81f97db463d
msgid "Shared Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:5
# 23379bc58b2b494495f8236c4d1de5ae
msgid "Shared libraries are compiled code which is intended to be shared among several different programs.  They are distributed as ``.so`` files in ``/usr/lib/``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:9
# 9f01b54887604174bb5c720a61f15a81
msgid "A library exports symbols which are the compiled versions of functions, classes and variables.  A library has a name called an SONAME which includes a version number.  This SONAME version does not necessarily match the public release version number.  A program gets compiled against a given SONAME version of the library.  If any of the symbols is removed or changes then the version number needs to be changed which forces any packages using that library to be recompiled against the new version.  Version numbers are usually set by upstream and we follow them in our binary package names called an ABI number, but sometimes upstreams do not use sensible version numbers and packagers have to keep separate version numbers."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:21
# 664e723981de49008b1b4dd89f0d96db
msgid "Libraries are usually distributed by upstream as standalone releases. Sometimes they are distributed as part of a program.  In this case they can be included in the binary package along with the program (this is called bundling) if you do not expect any other programs to use the library, more often they should be split out into separate binary packages."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:27
# 71acf377a1af468f9d5a1c2d93c840ed
msgid "The libraries themselves are put into a binary package named ``libfoo1`` where ``foo`` is the name of the library and ``1`` is the version from the SONAME. Development files from the package, such as header files, needed to compile programs against the library are put into a package called ``libfoo-dev``."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:34
# 9b3e7cab13934ef09bd65fcd5bd2fdb0
msgid "An Example"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:36
# 944cac43dc5b41749dedf1bd09e1b48f
msgid "We will use libnova as an example::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:41
# e4660d149ac3421b962fd7a96f27c540
msgid "To find the SONAME of the library run::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:45
# 21ef79630d5645f3b4d9a14857d0483f
msgid "The SONAME is ``libnova-0.12.so.2``, which matches the file name (usually the case but not always). Here upstream has put the upstream version number as part of the SONAME and given it an ABI version of ``2``.  Library package names should follow the SONAME of the library they contain. The library binary package is called ``libnova-0.12-2`` where ``libnova-0.12`` is the name of the library and ``2`` is our ABI number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:52
# 8db5a1d10b5044cca6f726dd6baa6f41
msgid "If upstream makes incompatible changes to their library they will have to reversion their SONAME and we will have to rename our library.  Any other packages using our library package will need to recompiled against the new version, this is called a transition and can take some effort. Hopefully our ABI number will continue to match upstream's SONAME but sometimes they introduce incompatibilities without changing their version number and we will need to change ours."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:60
# 25f6a73924e149cd80414fbb98cd35c3
msgid "Looking in debian/libnova-0.12-2.install we see it includes two files::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:65
# bb248aaffe494bd3a78fa5324d0465a5
msgid "The last one is the actual library, complete with minor and point version number.  The first one is a symlink which points to the actual library.  The symlink is what programs using the library will look for, the running programs do not care about the minor version number."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:70
# 7981e964715045948e6cfe32b9635119
msgid "``libnova-dev.install`` includes all the files needed to compile a program with this library.  Header files, a config binary, the ``.la`` libtool file and ``libnova.so`` which is another symlink pointing at the library, programs compiling against the library do not care about the major version number (although the binary they compile into will)."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:76
# 383841ded4a2494c8f27543c958ff665
msgid "``.la`` libtool files are needed on some non-Linux systems with poor library support but usually cause more problems than they solve on Debian systems.  It is a current `Debian goal to remove .la files`_ and we should help with this."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:82
# 7835cbdc6df34b78b9db6ab3bb79e600
msgid "Static Libraries"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:84
# 5339edb1a9a54ff9b5860025f95be1f2
msgid "The -dev package also ships ``usr/lib/libnova.a``.  This is a static library, an alternative to the shared library.  Any program compiled against the static library will include the code directory into itself.  This gets round worrying about binary compatibility of the library.  However it also means that any bugs, including security issues, will not be updated along with the library until the program is recompiled.  For this reason programs using static libraries are discouraged."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:94
# 330462b5e4084597a96cfce9ff5082f8
msgid "Symbol Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:96
# c0be54c611324ba99cb30bff6e7c0983
msgid "When a package builds against a library the ``shlibs`` mechanism will add a package dependency on that library.  This is why most programs will have ``Depends: ${shlibs:Depends}`` in ``debian/control``.  That gets replaced with the library dependencies at build time.  However shlibs can only make it depend on the major ABI version number, ``2`` in our libnova example, so if new symbols get added in libnova 2.1 a program using these symbols could still be installed against libnova ABI 2.0 which would then crash."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:104
# 5b8d062c825942518ca9224668cde6c0
msgid "To make the library dependencies more precise we keep ``.symbols`` files that list all the symbols in a library and the version they appeared in."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:107
# 2b2afaf7f5d149a5a3c073bd3990d5fd
msgid "libnova has no symbols file so we can create one.  Start by compiling the package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:112
# da02c6ed98e745b7918ceb7505ffc8b6
msgid "The ``-nc`` will cause it to finish at the end of compilation without removing the built files.  Change to the build and run ``dpkg-gensymbols`` for the library package::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:119
# 9b0c86a601544b0092c5c5167ac1c7d7
msgid "This makes a diff file which you can self apply::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:123
# 1d57b6d1941f434da51e6ce4239e6d5b
msgid "Which will create a file named similar to ``dpkg-gensymbolsnY_WWI`` that lists all the symbols.  It also lists the current package version.  We can remove the packaging version from that listed in the symbols file because new symbols are not generally added by new packaging versions, but by the upstream developers::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:130
# 43649f424f2f43d7879e064d66167b26
msgid "Now move the file into its location, commit and do a test build::"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:138
# 47234dcfe37c4475bfb382136fb4d5f9
msgid "If it successfully compiles the symbols file is correct.  With the next upstream version of libnova you would run dpkg-gensymbols again and it will give a diff to update the symbols file."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:143
# 06e5212cb62c412c9643b9f9b6597e74
msgid "C++ Library Symbols Files"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:145
# f031bb91ac424c229890a84346cd0da3
msgid "C++ has even more exacting standards of binary compatibility than C.  The Debian Qt/KDE Team maintain some scripts to handle this, see their `Working with symbols files`_ page for how to use them."
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:150
# 65ad3f5229a543d3ad3b4fb9aa8134b0
msgid "Further Reading"
msgstr ""

#: ../ubuntu-packaging-guide/libraries.rst:152
# fd9cdbcd4ba84b90a982249751c685f8
msgid "Junichi Uekawa's `Debian Library Packaging Guide`_ goes into this topic in more detail."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:3
# ddb0f86d84394b008774dc56182a3833
msgid "Packaging New Software"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:5
# 2bfac28b6642476585827ae11d1385a2
msgid "While there are thousands of packages in the Ubuntu archive, there are still a lot nobody has gotten to yet. If there is an exciting new piece of software that you feel needs wider exposure, maybe you want to try your hand at creating a package for Ubuntu or a PPA_. This guide will take you through the steps of packaging new software."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:11
# dab81b28ab32445fbb5a1749c251e001
msgid "You will want to read the :doc:`Getting Set Up<./getting-set-up>` article first in order to prepare your development environment."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:15
# 67599cff059c40c5827b1704aec691f1
msgid "Checking the Program"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:17
# 0af4a6a459ed4e1d8a4be45b59bdb5ac
msgid "The first stage in packaging is to get the released tar from upstream (we call the authors of applications \"upstream\") and check that it compiles and runs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:20
# b191226c54bd4b269f8faf1bad70191e
msgid "This guide will take you through packaging a simple application called GNU Hello which has been posted on GNU.org_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:23
# 2058dcb0a9404cda9348206166ab147f
msgid "If you don't have the build tools lets make sure we have them first.  Also if you don't have the required dependencies lets install those as well."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:26
# 6907aef50ab243cca4e5d78c47a8562a
msgid "Install build tools::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:30
# 887f185661434ab3b1fbbb6f14e5b896
msgid "Download main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:34
# eea2f60b5cd54b95ba68afb470ef9d26
msgid "Now uncompress main package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:39
# 6701c44689e24b2896c75374dcfad842
msgid "This application uses the autoconf build system so we want to run ``./configure`` to prepare for compilation."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:42
# b02d3ce745354528ba1bfece0c27d86c
msgid "This will check for the required build dependencies. As ``hello`` is a simple example, ``build-essential`` should provide everything we need. For more complex programs, the command will fail if you do not have the needed libraries and development files. Install the needed packages and repeat until the command runs successfully.::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:50
# 12d853af869949d38d22bb936e04ebce
msgid "Now you can compile the source::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:54
# 2111e0536ee4418d8d39d54c5cdbf010
msgid "If compilation completes successfully you can install and run the program::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:60
# 2b3aa8b13db54ce48879a882d48c42a2
msgid "Starting a Package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:62
# 8f80be24ae5d40c185b92b7f4e1a23c7
msgid "``bzr-builddeb`` includes a plugin to create a new package from a template. The plugin is a wrapper around the ``dh_make`` command. You should already have these if you installed ``packaging-dev``. Run the command providing the package name, version number, and path to the upstream tarball::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:71
# 901f5322d3d44c6f97f3069b20cd7246
msgid "When it asks what type of package type ``s`` for single binary. This will import the code into a branch and add the ``debian/`` packaging directory.  Have a look at the contents.  Most of the files it adds are only needed for specialist packages (such as Emacs modules) so you can start by removing the optional example files::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:80
# 31dd11649b1b451bbc63dca3b966f5c9
msgid "You should now customise each of the files."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:82
# 8dae342c68ae4212a8b768e2877be492
msgid "In ``debian/changelog`` change the version number to an Ubuntu version: ``2.7-0ubuntu1`` (upstream version 2.7, Debian version 0, Ubuntu version 1).  Also change ``unstable`` to the current development Ubuntu release such as ``precise``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:87
# 2c5a39143afa422ab9e0becf194274f0
msgid "Much of the package building work is done by a series of scripts called ``debhelper``.  The exact behaviour of ``debhelper`` changes with new major versions, the compat file instructs ``debhelper`` which version to act as.  You will generally want to set this to the most recent version which is ``8``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:93
# ff7f5361aa6e4ab58437b8639993fcbb
msgid "``control`` contains all the metadata of the package.  The first paragraph describes the source package. The second and following paragraphs describe the binary packages to be built.  We will need to add the packages needed to compile the application to ``Build-Depends:``. For ``hello``, make sure that it includes at least::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:101
# bac0e49a53704053b3760b7475ea867a
msgid "You will also need to fill in a description of the program in the ``Description:`` field."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:104
# 47f4f63dee3b4527a8b1d6a2cb8d40f6
msgid "``copyright`` needs to be filled in to follow the licence of the upstream source.  According to the hello/COPYING file this is GNU GPL 3 or later."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:107
# f19614feaa244843a8f3ef7cd89771fd
msgid "``docs`` contains any upstream documentation files you think should be included in the final package."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:110
# cd1028975a5e4a48bdbb1f619ed52319
msgid "``README.source`` and ``README.Debian`` are only needed if your package has any non-standard features, we don't so you can delete them."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:113
# e139391cc5404f77b143001923be6b3c
msgid "``source/format`` can be left as is, this describes the version format of the source package and should be ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:116
# 8d4be8cd17b74f8db0070843209d3ead
msgid "``rules`` is the most complex file.  This is a Makefile which compiles the code and turns it into a binary package.  Fortunately most of the work is automatically done these days by ``debhelper 7`` so the universal ``%`` Makefile target just runs the ``dh`` script which will run everything needed."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:121
# fe91b7664c224e358e8bd02b1d534e1d
msgid "All of these file are explained in more detail in the :doc:`overview of the debian directory<./debian-dir-overview>` article."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:124
# 91aeaf139b164651b8bc9523bee85af9
msgid "Finally commit the code to your packaging branch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:129
#: ../ubuntu-packaging-guide/udd-working.rst:69
# 9f873ecdc6dd418ab981b5a3e916757f
# 0f4f2f7ab51a4da7b261ebdcca0ee690
msgid "Building the package"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:131
# 25dad7dde06742b7ab42fd8d7b49875d
msgid "Now we need to check that our packaging successfully compiles the package and builds the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:137
# 1364f0bf67044f73b8fecaf7bc454767
msgid "``bzr builddeb`` is a command to build the package in its current location. The ``-us -uc`` tell it there is no need to GPG sign the package.  The result will be placed in ``..``."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:141
# d0f2fc10a72341feb038f3daa06b428d
msgid "You can view the contents of the package with::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:145
# 9705406b96504f008d7d06eb955de960
msgid "Install the package and check it works::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:150
# 9a4b9085dae14191b4fc5ad5c129ed98
msgid "Next Steps"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:152
# e6d74e02a001430c9672a218e23a63c2
msgid "Even if it builds the .deb binary package, your packaging may have bugs.  Many errors can be automatically detected by our tool ``lintian`` which can be run on both the source .dsc metadata file and the .deb binary package::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:160
# 49c66e40a62f4ed79e8aa882067c4189
msgid "A description of each of the problems it reports can be found on the `lintian website`_."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:163
# e8255614eac844c8a6e9835bf54e06e0
msgid "After making a fix to the packaging you can rebuild using ``-nc`` \"no clean\" without having to build from scratch::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:168
# da2bfba365ce4ab6b8e437eec3f15cc9
msgid "Having checked that the package builds locally you should ensure it builds on a clean system using ``pbuilder``. Since we are going to upload to a PPA (Personal Package Archive) shortly, this upload will need to be *signed* to allow Launchpad to verify that the upload comes from you (you can tell the upload will be signed because the ``-us`` and ``-uc`` flags are not passed to ``bzr builddeb`` like they were before). For signing to work you need to have set up GPG. If you haven't set up ``pbuilder-dist`` or GPG yet, :doc:`do so now<./getting-set-up>`::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:181
# 5f1741e685ae43d78180b078316cc50b
msgid "When you are happy with your package you will want others to review it.  You can upload the branch to Launchpad for review::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:186
# c6857e3fe5224c98a9487225f5c79ed2
msgid "Uploading it to a PPA will ensure it builds and give an easy way for you and others to test the binary packages.  You will need to set up a PPA in Launchad then upload with ``dput``::"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:192
# a9d49d2c18da4d399bb0da58acec0595
msgid "See :doc:`uploading<./udd-uploading>` for more information."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:194
# 352befbeed784aba8664a8b7846d064c
msgid "You can ask for reviews in ``#ubuntu-motu`` IRC channel, or on the `MOTU mailing list`_.  There might also be a more specific team you could ask such as the GNU team for more specific questions."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:199
# 6d0df1dc77c445b2a35b0ff65beff207
msgid "Submitting for inclusion"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:201
# e550c7ff2a7b41e89733160fc4a7d5fd
msgid "There are a number of paths that a package can take to enter Ubuntu. In most cases, going through Debian first can be the best path. This way ensures that your package will reach the largest number of users as it will be available in not just Debian and Ubuntu but all of their derivatives as well. Here are some useful links for submitting new packages to Debian:"
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:208
# 832bad72a05745f5ba02883ec6931964
msgid "`Debian Mentors FAQ`_ - debian-mentors is for the mentoring of new and prospective Debian Developers. It is where you can find a sponsor to upload your package to the archive."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:212
# 9c8a61e19eb14e67a4161ffb5385b2f4
msgid "`Work-Needing and Prospective Packages`_ - Information on how to file \"Intent to Package\" and \"Request for Package\" bugs as well as list of open ITPs and RFPs."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:216
# ebba15533a8541319571777bdc1f5f79
msgid "`Debian Developer's Reference, 5.1. New packages`_ - The entire document is invaluable for both Ubuntu and Debian packagers. This section documents processes for submitting new packages."
msgstr ""

#: ../ubuntu-packaging-guide/packaging-new-software.rst:220
# 5fa6e040e17f4d77865a5f8a7b733265
msgid "In some cases, it might make sense to go directly into Ubuntu first. For instance, Debian might be in a freeze making it unlikely that your package will make it into Ubuntu in time for the next release. This process is documented on the `\"New Packages\"`_ section of the Ubuntu wiki."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:3
# 858438df64cf4c60a2947b84ce23f3c2
msgid "Patches to Packages"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:5
# 30934256753843418ccba2387d364d08
msgid "Sometimes, Ubuntu package maintainers have to change the upstream source code in order to make it work properly on Ubuntu.  Examples include, patches to upstream that haven't yet made it into a released version, or changes to the upstream's build system needed only for building it on Ubuntu.  We could change the upstream source code directly, but doing this makes it more difficult to remove the patches later when upstream has incorporated them, or extract the change to submit to the upstream project.  Instead, we keep these changes as separate patches, in the form of diff files."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:14
# e6594cc74a1b45a29d4b058bc5fae6d6
msgid "There are a number of different ways of handling patches in Debian packages, fortunately we are standardizing on one system, `Quilt`_, which is now used by most packages."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:18
# 2c7be31d1a89440b9d69e35315e752b5
msgid "Let's look at an example package, ``kamoso`` in Natty::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:22
# 3986ab002128498393ba64e10ed27eb3
msgid "The patches are kept in ``debian/patches``.  This package has one patch ``kubuntu_01_fix_qmax_on_armel.diff`` to fix a compile failure on ARM.  The patch has been given a name to describe what it does, a number to keep the patches in order (two patches can overlap if they change the same file) and in this case the Kubuntu team adds their own prefix to show the patch comes from them rather than from Debian."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:29
# b25699c861f844328849a66cfd46fc7b
msgid "The order of patches to apply is kept in ``debian/patches/series``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:32
# 1b272f1decf44375ab5929d923b8c53f
msgid "Patches with Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:34
# b226775f25e4441cb7431b684ee4dd03
msgid "Before working with Quilt you need to tell it where to find the patches.  Add this to your ``~/.bashrc``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:39
# 02b01e98a0ad46b89b02c8e474fb93ca
msgid "And source the file to apply the new export::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:43
# 0a9ba4447c0a40319e27d663dbad1ca4
msgid "By default all patches are applied already to UDD checkouts or downloaded packages.  You can check this with::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:49
# 44ae3dfe0b76411b8870f9c4968580b6
msgid "If you wanted to remove the patch you would run ``pop``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:57
# e3f2cb457fb248f1b582ce2a25808872
msgid "And to apply a patch you use ``push``::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:67
# e6413cd4798d4376851adb69081b8940
msgid "Adding a New Patch"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:69
# 31cca13886cc4ab8b6026aa15c97d3bc
msgid "To add a new patch you need to tell Quilt to create a new patch, tell it which files that patch should change, edit the files then refresh the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:81
# 1dd83c9d276745759a339cec6f31831f
msgid "The ``quilt add`` step is important, if you forget it the files will not end up in the patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:84
# d7620ae576864dbcbe73aa6ad621c1b2
msgid "The change will now be in ``debian/patches/kubuntu_02_program_description.diff`` and the ``series`` file will have had the new patch added to it.  You should add the new file to the packaging::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:94
# 2773444b7bb4424dabf5ac2b8b379d0d
msgid "Quilt keeps its metadata in the ``.pc/`` directory, so currently you need to add that to the packaging too.  This should be improved in future."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:97
# 0a4c3854d541403383e23475c779ba8b
msgid "As a general rule you should be careful adding patches to programs unless they come from upstream, there is often a good reason why that change has not already been made.  The above example changes a user interface string for example, so it would break all translations.  If in doubt, do ask the upstream author before adding a patch."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:104
# 19e478cb20094de98be737e16b4d91c9
msgid "Upgrading to New Upstream Versions"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:106
# 3f41fde07fa9468ba43a599399bfbda3
msgid "When you upgrade to a new upstream version, patches will often become out of date.  They might need to be refreshed to match the new upstream source or they might need to be removed altogether."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:110
# 08ffc290d051431f9d3cc7d7028b0f9b
msgid "You should start by ensuring no patches are applied.  Unfortunately a commit is needed before you can merge in the new upstream (this is `bug 815854`_)::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:116
# cf7b903ae5ac487d829b104922502851
msgid "Then upgrade to the new version::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:120
# a395b05373b24d8f88f1914b418cf13a
msgid "Then apply the patches one at a time to check for problems::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:129
# a0f5fa22c39b493cb535f2cb45f077d0
msgid "If it can be reverse-applied this means the patch has been applied already by upstream, so we can delete the patch::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:135
# bfe608079a9b4aa39313f48673078d0f
msgid "Then carry on::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:140
# c7aca40cbdd84df48edd89e9d1f3ef35
msgid "It is a good idea to run refresh, this will update the patch relative to the changed upstream source::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:146
# 5f0066de68a74164b26e180fab968bb2
msgid "Then commit as usual::"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:152
# 5116f3a406ae4f8984d71c2a947c167c
msgid "Making A Package Use Quilt"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:154
# 87e3f31676a54b5492b7698b3727e935
msgid "Modern packages use Quilt by default, it is built into the packaging format.  Check in ``debian/source/format`` to ensure it says ``3.0 (quilt)``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:158
# f2860ffb5e484ed2a2ec10f6305fbe11
msgid "Older packages using source format 1.0 will need to explicitly use Quilt, usually by including a makefile into ``debian/rules``."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:163
# 1e17d95c09e2439e8c0d05c6e3bf6454
msgid "Other Patch Systems"
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:165
# b034bb15c1844dc2ae6944964f342e8a
msgid "Other patch systems used by packages include ``dpatch`` and ``cdbs simple-patchsys``, these work similarly to Quilt by keeping patches in ``debian/patches`` but have different commands to apply, un-apply or create patches. You can find out which patch system is used by a package by using the ``what-patch`` command (from the ``ubuntu-dev-tools`` package). You can use ``edit-patch``, shown in :ref:`previous chapters <working-on-a-fix>`, as a reliable way to work with all systems."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:173
# 92ed03d616b0490bbee78e3ad697b4f5
msgid "In even older packages changes will be included directly to sources and kept in the ``diff.gz`` source file.  This makes it hard to upgrade to new upstream versions or differentiate between patches and is best avoided."
msgstr ""

#: ../ubuntu-packaging-guide/patches-to-packages.rst:177
# 49799bda9fd4443ea8145c91bce75ebf
msgid "Do not change a package's patch system without discussing it with the Debian maintainer or relevant Ubuntu team.  If there is no existing patch system then feel free to add Quilt."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:3
# d1865266eed940ce9af28a2ecf423362
msgid "Packaging Python modules and applications"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:5
# f38156dffc2740a7a7bf378def4c0ffe
msgid "Our packaging follows Debian’s `Python policy`_. We will use the `python-markdown`_ package as an example, which can be downloaded from `PyPI`_. You can look at its packaging at its `Subversion repository`_."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:7
# a5da1f9ea71d40e4b3943c1381c01ed4
msgid "There are two types of Python packages — *modules* and *apps*."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:9
# 4d17033727a849e899af2cae9b2a0a38
msgid "At the time of writing, Ubuntu has two incompatible versions of Python — *2.x* and *3.x*. ``/usr/bin/python`` is a symbolic link to a default Python 2.x version, and ``/usr/bin/python3`` — to a default Python 3.x version. Python modules should be built against all supported Python versions."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:11
# 05c849e0b0a24cf8839f4edffb84b881
msgid "If you are going to package a new Python module, you might find the ``py2dsc`` tool useful (available in `python-stdeb`_ package)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:14
# f96933e5c15847559b81c19ab26786bd
msgid "debian/control"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:16
# 4a0832de625e4049a6bd1c0d2c9924dc
msgid "Python 2.x and 3.x versions of the package should be in separate binary packages. Names should have ``python{,3}-modulename`` format (like: ``python3-dbus.mainloop.qt``). Here, we will use ``python-markdown`` and ``python3-markdown`` for module packages and ``python-markdown-doc`` for the documentation package."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:18
# 688f924b7bea44f38d0d0ebeed906619
msgid "Things in ``debian/control`` that are specific for a Python package:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:20
# 606e76a4f1ba462c9320733ecb513057
msgid "The section of module packages should be ``python``, and ``doc`` for the documentation package. For an application, a single binary package will be enough."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:21
# a53a45173f0642a892a2c5cd466af446
msgid "We should add build dependencies on ``python-all (>= 2.6.6-3~)`` and ``python3-all (>= 3.1.2-7~)`` to make sure Python helpers are available (see the next section for details)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:22
# 57e08d5e0bdf4736a4ec16ce4ef172ac
msgid "It’s recommended to add ``X-Python-Version`` and ``X-Python3-Version`` fields — see “`Specifying Supported Versions`_” section of the Policy for details. For example::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:27
# 8dff12bb616649219419b58e21162d8f
msgid "If your package works only with Python 2.x or 3.x, build depend only on one ``-all`` package and use only one ``-Version`` field."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:28
# 9ea7ea401046499dbeeccc5422a299be
msgid "Module packages should have ``{python:Depends}`` and ``{python3:Depends}`` substitution variables (respectively) in their dependency lists."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:33
# a7f4e05195094f05bc23177e9b0896c1
msgid "The recommended helpers for python modules are ``dh_python2`` and ``dh_python3``. Unfortunately, ``debhelper`` doesn’t yet build Python 3.x packages automatically (see `bug 597105`_ in Debian BTS), so we’ll need to do that manually in override sections (skip this if your package doesn’t support Python 3.x)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:35
# 36f66aebf7c242e0b6ccc84331276508
msgid "Here’s our ``debian/rules`` file (with annotations):"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:70
# d1b67c2659a84cd98f5af9d90f7531fc
msgid "It is also a good practice to run tests during the build, if they are shipped by upstream. Usually tests can be invoked using ``setup.py test`` or ``setup.py check``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:73
# d8d20988afe340179c76a362a9e61cf4
msgid "debian/\\*.install"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:75
# d2ea697dc09b4e869fcee369aa7580c2
msgid "Python 2.x modules are installed into ``/usr/share/pyshared/`` directory, and symbolic links are created in ``/usr/lib/python2.x/dist-packages/`` for every interpreter version, while Python 3.x ones are all installed into ``/usr/lib/python3/dist-packages/``."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:77
# 8578b0a496884e30b8e857fd350ba0bf
msgid "If your package is an application and has private Python modules, they should be installed in ``/usr/share/module``, or ``/usr/lib/module`` if the modules are architecture-dependent (e.g. extensions) (see “`Programs Shipping Private Modules`_” section of the Policy)."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:79
# 8dba437d3d054a91ab8f78569706a185
msgid "So, our ``python-markdown.install`` file will look like this (we’ll also want to install a ``markdown_py`` executable)::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:84
# 60010620d26e49e1ae5802f0400b9bea
msgid "and ``python3-markdown.install`` will only have one line::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:89
# 1567c27bf2ea46e1adf5614b02e4dfeb
msgid "The ``-doc`` package"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:91
# 5c2e54f05ec042b1bd6b1f6f6d65992d
msgid "The tool most commonly used for building Python docs is `Sphinx`_. To add Sphinx documentation to your package (using ``dh_sphinxdoc`` helper), you should:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:93
# ddac0da9036a47a7858b658ba8274db5
msgid "Add a build-dependency on ``python-sphinx`` or ``python3-sphinx`` (depending on what Python version do you want to use);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:94
# 1b6f3eda8b8a463aabd34fafa6617998
msgid "Append ``sphinxdoc`` to the ``dh --with`` line;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:95
# 7f246ab2d7fe4e44ac95242e332a7962
msgid "Run ``setup.py build_sphinx`` in ``override_dh_auto_build`` (sometimes not needed);"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:96
# de817297095a4758905de0db2f30e6aa
msgid "Add ``{sphinxdoc:Depends}`` to the dependency list of your ``-doc`` package;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:97
# 42c35cc3ecc34e38973de3b168838f37
msgid "Add the path of the built docs directory (usually ``build/sphinx/html``) to your ``.docs`` file."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:99
# 573305ce7047497494383d6de6ef6c81
msgid "In our case, the docs are automatically built in ``build/docs/`` directory when we run ``setup.py build``, so we can simply put this in the ``python-markdown-doc.docs`` file::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:103
# bad5895a95e445f8bc377edb910f6f1b
msgid "Because docs also contain source ``.txt`` files, we’ll also tell ``dh_compress`` to not compress them — by adding this to ``debian/rules``:"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:111
# e3726ba4d4524a2a884155ec5236ebc7
msgid "Checking for packaging mistakes"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:113
# 9daf49ffe1984089a13eca81e10cd7ec
msgid "Along with ``lintian``, there is a special tool for checking Python packages — ``lintian4py``. It is available in the `lintian4python`_ package. For example, these two commands invoke both versions of ``lintian`` and check source and binary packages::"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:118
# 3c54a8527cdd4539a113392647c01223
msgid "Here, ``-EI`` option is used to enable experimental and informational tags."
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:121
# 736c43dc3e7d48af8832270f18ad5cfc
msgid "See also"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:123
# d6ab3e1b7bf24a1e9c2b4988c5c3526d
msgid "The `Python policy`_;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:124
# 8afe4c1b38084020a490cd3e630df45e
msgid "`Python/Packaging`_ article on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:125
# 811f7c6e76bb473f8e7ee43cc244c5bb
msgid "`Python/LibraryStyleGuide`_ and `Python/AppStyleGuide`_ articles on Debian wiki;"
msgstr ""

#: ../ubuntu-packaging-guide/python-packaging.rst:126
# 8da49469ba2e4db5bdb16bcb20880ebb
msgid "Debian `python-modules`_ and `python-apps`_ teams."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:3
# 219441c9faf24b86b0f293f1f8b8f74f
msgid "Security and Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:6
# 33aec98604304d83bf85dff549f4973b
msgid "Fixing a Security Bug in Ubuntu"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:11
# fbe032fc047c447b8d8adb2b0b19326c
msgid "Fixing security bugs in Ubuntu is not really any different than :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`, and it is assumed that you are familiar with patching normal bugs. To demonstrate where things are different, we will be updating the dbus package in Ubuntu 10.04 LTS (Lucid Lynx) for a security update."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:19
# b93370b7d9014a9a851b5c588bd37c81
msgid "Obtaining the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:21
# a826e38e44864af0ae4607c6e732225a
msgid "In this example, we already know we want to fix the dbus package in Ubuntu 10.04 LTS (Lucid Lynx). So first you need to determine the version of the package you want to download. We can use the ``rmadison`` to help with this::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:30
# e790ef5219124b87893be9c10947bb35
msgid "Typically you will want to choose the highest version for the release you want to patch that is not in -proposed or -backports. Since we are updating Lucid's dbus, you'll download 1.2.16-2ubuntu4.2 from lucid-updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:38
# 73da6771bc424587bc13bd6d665a1195
msgid "Patching the source"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:39
# edd62941e8d84d7e8ff7142dbd7f22bc
msgid "Now that we have the source package, we need to patch it to fix the vulnerability. You may use whatever patch method that is appropriate for the package, including :doc:`UDD techniques<./udd-intro>`, but this example will use ``edit-patch`` (from the ubuntu-dev-tools package). ``edit-patch`` is the easiest way to patch packages and it is basically a wrapper around every other patch system you can imagine."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:46
# b1ff866387b941948ef2f3c57cfc80de
msgid "To create your patch using ``edit-patch``::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:51
# 597e3d85fd624f4b947cc370ce13c4cd
msgid "This will apply the existing patches and put the packaging in a temporary directory. Now edit the files needed to fix the vulnerability.  Often upstream will have provided a patch so you can apply that patch::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:57
# 6153690b3bc342a3987d6151bd86b905
msgid "After making the necessary changes, you just hit Ctrl-D or type exit to leave the temporary shell."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:61
# 8bf0744550124873b7e6dc4529f3f59a
msgid "Formatting the changelog and patches"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:63
# c5636c3700074f1f8ca37d7550c5d7a4
msgid "After applying your patches you will want to update the changelog. The ``dch`` command is used to edit the ``debian/changelog`` file and ``edit-patch`` will launch ``dch`` automatically after un-applying all the patches. If you are not using ``edit-patch``, you can launch ``dch -i`` manually. Unlike with regular patches, you should use the following format (note the distribution name uses lucid-security since this is a security update for Lucid) for security updates::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:80
# 7d9af5f222d440508a22f2f7428c8565
msgid "Update your patch to use the appropriate patch tags. Your patch should have at a minimum the Origin, Description and Bug-Ubuntu tags. For example, edit debian/patches/99-fix-a-vulnerability.patch to have something like::"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:91
# 25694745ec4f4d72a8025128db2985c3
msgid "Multiple vulnerabilities can be fixed in the same security upload; just be sure to use different patches for different vulnerabilities."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:95
# 4e365243937e48689d109a666fca0865
msgid "Test and Submit your work"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:97
# 754f03c276054940b0b445bc632a7b64
msgid "At this point the process is the same as for :doc:`fixing a regular bug in Ubuntu<./fixing-a-bug>`. Specifically, you will want to:"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:100
# e3cefdaacff74fbca4f4c676a07eadb3
msgid "Build your package and verify that it compiles without error and without any added compiler warnings"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:102
# 47c76377ad58499886e7910a813e9518
msgid "Upgrade to the new version of the package from the previous version"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:103
# 03e1be8787134d4c9f155b49d01822f0
msgid "Test that the new package fixes the vulnerability and does not introduce any regressions"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:105
# e8a934148c8a422d90e70c1cd1c98966
msgid "Submit your work via a Launchpad merge proposal and file a Launchpad bug being sure to mark the bug as a security bug and to subscribe ``ubuntu-security-sponsors``"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:109
# c03dbd50d00a461d8f9e576f254ca7b5
msgid "If the security vulnerability is not yet public then do not file a merge proposal and ensure you mark the bug as private."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:112
# af701d2e406743f4894bb121195b31b8
msgid "The filed bug should include a Test Case, i.e. a comment which clearly shows how to recreate the bug by running the old version then how to ensure the bug no longer exists in the new version."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:116
# 2c4ab4d0ab46459b92ac1a38e88dd92c
msgid "The bug report should also confirm that the issue is fixed in Ubuntu versions newer than the one with the proposed fix (in the above example newer than Lucid).  If the issue is not fixed in newer Ubuntu versions you should prepare updates for those versions too."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:123
# 8f5a68b4d137434c80fe3537ad5deaa2
msgid "Stable Release Updates"
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:125
# 8ff471f7a55143e3a5f6f61385618dd0
msgid "We also allow updates to releases where a package has a high impact bug such as a severe regression from a previous release or a bug which could cause data loss.  Due to the potential for such updates to themselves introduce bugs we only allow this where the change can be easily understood and verified."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:130
# 66780c85f8c2417d8f423f8b630fbe75
msgid "The process for Stable Release Updates is just the same as the process for security bugs except you should subscribe ``ubuntu-sru`` to the bug."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:133
# f5076cc47cc144e8adf7d0d56f1f2544
msgid "The update will go into the ``proposed`` archive (for example ``lucid-proposed``) where it will need to be checked that it fixes the problem and does not introduce new problems.  After a week without reported problems it can be moved to ``updates``."
msgstr ""

#: ../ubuntu-packaging-guide/security-and-stable-release-updates.rst:138
# dabf85b962824307ac73fe5605e717c5
msgid "See the `Stable Release Updates wiki page`_ for more information."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:3
# 58b7d3b098264b24b118f269852ab8d8
msgid "Traditional Packaging"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:5
# 7ebaf88b06bc4557a6e243d5a506db46
msgid "The majority of this guide deals with :doc:`Ubuntu Distributed Development <./udd-intro>` (UDD) which utilizes the distributed version control system (DVCS) Bazaar for :ref:`retrieving package sources <branching>` and submitting fixes with :ref:`merge proposals. <merge-proposal>` This article will discuss what we will call traditional packaging methods for lack of a better word. Before Bazaar was adopted for Ubuntu development, these were the typical methods for contributing to Ubuntu."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:13
# 739cb3e94f8e4d468e03ba8332fd74f5
msgid "In some cases, you may need to use these tools instead of UDD. So it is good to be familiar with them. Before you begin, you should already have read the article :doc:`Getting Set Up. <./getting-set-up>`"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:18
#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:3
# d53ca34693644159880c47face7f7bc0
# 6ee55e3d9d0b456f91c3fe4f5d5248a4
msgid "Getting the Source"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:20
# a7905f94188145a691e6754b23accefb
msgid "In order to get a source package, you can simply run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:24
# 1e5abd8b21514ea78d712bc42c1ec745
msgid "This method has some draw backs though. It downloads the version of the source that is available on **your system.** You are likely running the current stable release, but you want to contribute your change against the package in the development release. Luckily, the ``ubuntu-dev-tools`` package provides a helper script::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:32
# 7dbdab46b5ab4ecfa3823642e6ebf59c
msgid "By default, the  latest version in the development release will be downloaded. You can also specify a version or Ubuntu release like::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:37
# dac0023c0ce149d48af40a9bf29a1996
msgid "to pull the source from the ``precise`` release, or::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:41
# d6e1ff5feec44a8db5f2664e076b8936
msgid "to download version ``1.0-1ubuntu1`` of the package. For more information on the command, see ``man pull-lp-source``."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:44
# 92ae47b5ae934df7ada3d22f850e4923
msgid "For our example, let's pretend we got a bug report saying that \"colour\" in the description of ``xicc`` should be \"color,\" and we want to fix it. *(Note: This is just an example of something to change and not really a bug.)* To get the source, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:52
# f9dd4120f6114530833826213b71c7d7
msgid "Creating a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:54
# 567eb0111adf4d58b64d136cc267314a
msgid "A ``debdiff`` shows the difference between two Debian packages. The name of the command used to generate one is also ``debdiff``. It is part of the ``devscripts`` package. See ``man debdiff`` for all the details. To compare two source packages, pass the two ``dsc`` files as arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:61
# 3c72af6c17984946991652133bb0cb5f
msgid "To continue with our example, let's edit the ``debian/control`` and \"fix\" our \"bug\"::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:67
# be95f9b707d14467b8263ab44273e997
msgid "We also must adhere to the `Debian Maintainer Field Spec <https://wiki.ubuntu.com/DebianMaintainerField>`_ and edit ``debian/control`` to replace::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:73
# 5b662569174c4abeb572b51d5b53de2f
msgid "with::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:78
# 32cd08d6f01e466198233b2d22135fc6
msgid "You can use the ``update-maintainer`` tool (in the ``ubuntu-dev-tools`` package) to do that."
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:81
# b2305f18ce504902b19aff74968281c4
msgid "Remember to document your changes in ``debian/changelog`` using ``dch -i`` and then we can generate a new source package::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:86
# 2588ef5e8df1473e8d9bd70c705769b3
msgid "Now we can examine our changes using ``debdiff``::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:91
# accac9323bfc471581f917e6b451f22d
msgid "To create a patch file that you can send to others or attach to a bug report for sponsorship, run::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:98
# 552fd8dab7fe458c9767b2e67a28ef7f
msgid "Applying a Debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:100
# 7ea04023b768497487e4eec28d195b2b
msgid "In order to apply a debdiff, first make sure you have the source code of the version that it was created against::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:105
# e4607d379a8a487f95e970cf4908eb5d
msgid "Then in a terminal, change the to the directory where the source was uncompressed::"
msgstr ""

#: ../ubuntu-packaging-guide/traditional-packaging.rst:110
# 51e9507d650f4af9baa49c652add3044
msgid "A debdiff is just like a normal patch file. Apply it as usual with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:6
# 8c7566f91d434d26a18c3dc408f93320
msgid "Source package URLs"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:8
# 91f8e18dc97245169190a0a33b0a0316
msgid "Bazaar provides some very nice shortcuts for accessing Launchpad's source branches of packages in both Ubuntu and Debian."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:11
# 21169a1b5bd449cc9b7606e74721daee
msgid "To refer to source branches use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:15
# 9ec10304c1854870bf37497cb3925842
msgid "where *package* refers to the package name you're interested in.  This URL refers to the package in the current development version of Ubuntu.  To refer to the branch of Tomboy in the development version, you would use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:21
# 737690f16b53493daa4f6fdf34f24ac7
msgid "To refer to the version of a source package in an older release of Ubuntu, just prefix the package name with the release's code name.  E.g. to refer to Tomboy's source package in Maverick_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:27
# 20f1468989c14664a7c613875159ebf0
msgid "Since they are unique, you can also abbreviate the distro-series name::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:31
# 087ca720d233433caf85427b9cbe0b44
msgid "You can use a similar scheme to access the source branches in Debian, although there are no shortcuts for the Debian distro-series names.  To access the Tomboy branch in the current development series for Debian use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:37
# 47e0c121133e493b8804da61300260ef
msgid "and to access Tomboy in Debian Lenny_ use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:48
# 98db85c23447473c9e8a9c3d402ab33d
msgid "Getting the source"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:50
# 2c80237cf52b4b138246a532fc5e4e38
msgid "Every source package in Ubuntu has an associated source branch on Launchpad. These source branches are updated automatically by Launchpad, although the process is not currently foolproof."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:54
# cd0be1af7d7d4f128295ba8e1c980fa3
msgid "There are a couple of things that we do first in order to make the workflow more efficient later.  Once you are used to the process you will learn when it makes sense to skip these steps."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:62
# 9b25b111ec0f48b98ff86bad65965174
msgid "Creating a shared repository"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:64
# 40fa4e95cdbb44a8a5dec37bdea6f251
msgid "Say that you want to work on the Tomboy package, and you've verified that the source package is named ``tomboy``.  Before actually branching the code for Tomboy, create a shared repository to hold the branches for this package.  The shared repository will make future work much more efficient."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:70
# bdc6a206f44946e396de064e0df0b856
msgid "Do this using the `bzr init-repo` command, passing it the directory name we would like to use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:75
# 295069f3b3bb42159da2c532f70d35bc
msgid "You will see that a `tomboy` directory is created in your current working area.  Change to this new directory for the rest of your work::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:82
# d126e5393a4f4e59bd193e01754039ad
msgid "Getting the trunk branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:84
# d324e37059d34154890ee1e03739fc2d
msgid "We use the `bzr branch` command to create a local branch of the package. We'll name the target directory `tomboy.dev` just to keep things easy to remember::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:90
# d2731cad1b54474f94ed3923c1152f3d
msgid "The tomboy.dev directory represents the version of Tomboy in the development version of Ubuntu, and you can always ``cd`` into this directory and do a `bzr pull` to get any future updates."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:97
# 45cf135e9e7d49118c15a663ae089afb
msgid "Ensuring the version is up to date"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:99
# 596a46a70ddc4ada91168545c1924c9c
msgid "When you do your ``bzr branch`` you will get a message telling you if the packaging branch is up to date.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:107
# 7277cfc9fa684cc490ad0cb20b626350
msgid "Occasionally the importer fails and packaging branches do not match what is in the archive.  A message saying::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:112
# 89c20b62c17540bb9e2a283e8d718ab3
msgid "means the importer has failed.  You can find out why on http://package-import.ubuntu.com/status/ and `file a bug on the UDD project`_ to get the issue resolved."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:118
# 36650df86a86410f8b17057dde741bde
msgid "Upstream Tar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:120
# bdf7379ebbcb425e9a1fae366b9c33ab
msgid "You can get the upstream tar by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:124
# 90fb2c71dc8b456b8fb6373c8ead6b12
msgid "This will try a number of methods to get the upstream tar, firstly by recreating it from the ``upstream-x.y`` tag in the bzr archive, then by downloading from the Ubuntu archive, lastly by running ``debian/rules get-orig-source``. The upstream tar will also be recreated when using bzr to build the package::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:132
# 63a376639c2c4a38b9d4e1fff404b301
msgid "The `builddeb` plugin has several `configuration options`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:136
# a295974756a94a2cb40aff4dadbedcf9
msgid "Getting a branch for a particular release"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:138
# 8493b96d643a471bafac139cd720f209
msgid "When you want to do something like a `stable release update`_ (SRU), or you just want to examine the code in an old release, you'll want to grab the branch corresponding to a particular Ubuntu release.  For example, to get the Tomboy package for Maverick do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:147
# ae4509a6ea0f4f10aea96def61a9a79e
msgid "Importing a Debian source package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:149
# c0dcebcfbb9f4944ac977395a3ec5614
msgid "If the package you want to work on is available in Debian but not Ubuntu, it's still easy to import the code to a local bzr branch for development.  Let's say you want to import the `newpackage` source package.  We'll start by creating a shared repository as normal, but we also have to create a working tree to which the source package will be imported (remember to cd out of the `tomboy` directory created above)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-getting-the-source.rst:162
# 6e99f08f86604192bf39243ba654ceb9
msgid "As you can see, we just need to provide the remote location of the dsc file, and Bazaar will do the rest.  You've now got a Bazaar source branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:3
# 6110e9feb7a4402990556723aa1180aa
msgid "Ubuntu Distributed Development — Introduction"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:5
# f27fbd25d9ef44208c18a41fe02e2546
msgid "This guide focuses on packaging using the *Ubuntu Distributed Development* (UDD) method."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:8
# 7f6e332b24b34864a8dfeb4ddd53f4c7
msgid "*Ubuntu Distributed Development* (UDD) is a new technique for developing Ubuntu packages that uses tools, processes, and workflows similar to generic distributed version control system (DVCS) based software development.  The DVCS used for UDD is Bazaar_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:14
# 5d125fa5de5e4068a0bf6a7656968845
msgid "Traditional Packaging Limitations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:16
# a2e0650803fa4877bccd0bb736a1f002
msgid "Traditionally Ubuntu packages have been kept in tar archive files.  A traditional source package is made up of the upstream source tar, a \"debian\" tar (or compressed diff file for older packages) containing the packaging and a .dsc meta-data file.  To see a traditional package run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:23
# 3f8923cd72254bf49daadccee2aab9fc
msgid "This will download the upstream source ``kdetoys_4.6.5.orig.tar.bz2``, the packaging ``kdetoys_4.6.5-0ubuntu1.debian.tar.gz`` and the meta-data ``kdetoys_4.6.5-0ubuntu1~ppa1.dsc``.  Assuming you have dpkg-dev installed it will extract these and give you the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:28
# a12c02063159427d88d58f4944dd1d4e
msgid "Traditional packaging would edit these files and upload.  However this gives limited opportunity to collaborate with other developers, changes have to be passed around as diff files with no central way to track them and two developers can not make changes at the same time.  So most teams have moved to putting their packaging in a revision control system.  This makes it easier for several developers to work on a package together.  However there is no direct connection between the revision control system and the archive packages so the two must be manually kept in sync.  Since each team works in its own revision control system a prospective developer must first work out where that is and how to get the packaging before they can work on the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:40
# 1c03ab0a027f4a6f9cea80f18f441f99
msgid "Ubuntu Distributed Development"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:42
# 8511aeb66ca147fb92c5a30bdcc82b25
msgid "With Ubuntu Distributed Development all packages in the Ubuntu (and Debian) archive are automatically imported into Bazaar branches on our code hosting site Launchpad.  Changes can be made directly to these branches in incremental steps and by anyone with commit access.  Changes can also be made in forked branches and merged back in with Merge Proposals when they are large enough to need review or if they are by someone without direct commit access."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:49
# 99d4742c8e66414d9647e233aad69bf0
msgid "UDD branches are all in a standard location, so doing a checkout is easy::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:53
# 378758742a804477916489f29ecc7b1d
msgid "The merge history includes two separate branches, one for the upstream source and one which adds the ``debian/`` packaging directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:59
# 0de3d3aa7d344953b380527f203f04ee
msgid "(This command uses *qbzr* for a GUI, run ``log`` instead of ``qlog`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:64
# ba6f869034274848a56a6589c8f7215c
msgid "This UDD branch of *kdetoys* shows the full packaging for each version uploaded to Ubuntu with grey circles and the upstream source versions with green circles.  Versions are tagged with either the version in Ubuntu such as ``4:4.2.29-0ubuntu1`` or for the upstream branch with the upstream version ``upstream-4.2.96``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:70
# aa8736389d9e4b3c8bd786e24193ed1c
msgid "Many Ubuntu packages are based on the packages in Debian, UDD also imports the Debian package into our branches.  In the *kdetoys* branch above the Debian versions from *unstable* are from the merge with blue circles while those from *Debian experimental* are from the merge with yellow circles.  Debian releases are tagged with their version number, e.g., ``4:4.2.2-1``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:76
# 4023fc02ba8147e5b68e7bd914b00fca
msgid "So from a UDD branch you can see the complete history of changes to the package and compare any two versions.  For example, to see the changes between version 4.2.2 in Debian and the 4.2.2 in Ubuntu use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:82
# dfd922116f4a4f4aac7eacca84ab36ad
msgid "(This command uses *qbzr* for a GUI, run ``diff`` instead of ``qdiff`` for console output.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:87
# 79e5a944ee754ff9b447603172f7b9e1
msgid "From this we can clearly see what has changed in Ubuntu compared to Debian, very handy."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:91
# 37750e8858f1458fb1af8e71ae17fbae
msgid "Bazaar"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:93
# fc26754ac566435b8040b7309d321d9d
msgid "UDD branches use Bazaar, a distributed revision control system intended to be easy to use for those familiar with popular systems such as Subversion while offering the power of Git."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:97
# 0c60fdfe5f844e8ab54e9a7d77e649fc
msgid "To do packaging with UDD you will need to know the basics of how to use Bazaar to manage files.  For an introduction to Bazaar see the `Bazaar Five Minute Tutorial <http://doc.bazaar.canonical.com/bzr.dev/en/mini-tutorial/index.html>`_ and the `Bazaar Users Guide <http://doc.bazaar.canonical.com/bzr.dev/en/user-guide/index.html>`_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:105
# f70ccfce167142628c055211da34de8a
msgid "Limitations of UDD"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:107
# ea6efadadebd4309a6dd3307fadc7c0e
msgid "Ubuntu Distributed Development is a new method for working with Ubuntu packages.  It currently has some notable limitations:"
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:110
# c57f448e39b547a9a5e733da5d39b136
msgid "Doing a full branch with history can take a lot of time and network resources.  You may find it quicker to do a lightweight checkout ``bzr checkout --lightweight ubuntu:kdetoys`` but this will need a network access for any further bzr operations."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:115
# 7ced3680f3434d3c9aaa7895cc60c8ff
msgid "Working with patches is fiddly.  Patches can be seen as a branched revision control system, so we end up with RCS on top of RCS."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:118
# 38a78c7c65f344f88352e6176639b8db
msgid "There is no way to build directly from branches.  You need to create a source package and upload that."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:121
# 02cf54329b224f41b8037b6841630c86
msgid "Some packages have not been successfully imported into UDD branches.  Recent versions of Bazaar will automatically notify you when this is the case. You can also check the `status of the package importer`_ manually before working on a branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-intro.rst:126
# ae00d3e73bc7483986affa55ca8882e9
msgid "All of the above are being worked on and UDD is expected to become the main way to work on Ubuntu packages soon.  However currently most teams within Ubuntu do not yet work with UDD branches for their  development.  However because UDD branches are the same as the packages in the  archive any team should be able to accept merges against them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:3
# a7579983000a4fe5b5d5cf85e4ec54a3
msgid "Getting The Latest"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:5
# 210b5ae16dae49089ced6f10d40e1c34
msgid "If someone else has landed changes on a package, you will want to pull those changes in your own copies of the package branches."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:10
# e1bc1d59fe1f4ff1a3cd1578dfe19d37
msgid "Updating your main branch"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:12
# 73daf1c26e93455b8062f380413981b4
msgid "Updating your copy of a branch that corresponds to the package in a particular release is very simple, simply use `bzr pull` from the appropriate directory::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:18
# 35dec1f916aa484ab1f7270f3d9e07ec
msgid "This works wherever you have a checkout of a branch, so it will work for things like branches of `maverick`, `hardy-proposed`, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:23
# 523fef7506584d88b5f5b0ed8eb4a99b
msgid "Getting the latest in to your working branches"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:25
# 6fc37c98d83541f49bb96c16fc2184bc
msgid "Once you have updated your copy of a distroseries branch, then you may want to merge this in to your working branches as well, so that they are based on the latest code."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:29
# 0da2cea842ab410698a4301d12263171
msgid "You don't have to do this all the time though.  You can work on slightly older code with no problems.  The disadvantage would come if you were working on some code that someone else changed.  If you are not working on the latest version then your changes may not be correct, and may even produce conflicts."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:34
# 3f213edc5b6f446d9d4a0a3736df9e61
msgid "The merge does have to be done at some point though.  The longer it is left, the harder may be, so doing it regularly should keep each merge simple.  Even if there are many merges the total effort would hopefully be less."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:38
# d11862cdb7fa4789a2bf1a501d17e618
msgid "To merge the changes you just need to use ``bzr merge``, but you must have committed your current work first::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:44
# c097ea38a1a7434caafec6e520610cda
msgid "Any conflicts will be reported, and you can fix them up.  To review the changes that you just merged use ``bzr diff``.  To undo the merge use ``bzr revert``.  Once you are happy with the changes then use ``bzr commit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:50
# 9c7bdfada06b4c87873bc9207d898e60
msgid "Referring to versions of a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:52
# 6046fb031e564552866eb7b40f9b9e3e
msgid "You will often think in terms of versions of a package, rather than the underlying Bazaar revision numbers.  `bzr-builddeb` provides a revision specifier that makes this convenient.  Any command that takes a ``-r`` argument to specify a revision or revision range will work with this specifier, e.g. ``bzr log``, ``bzr diff``, and so on.  To view the versions of a package, use the ``package:`` specifier::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-latest.rst:61
# 06e7969981b94ca883cfbe718d90e698
msgid "This shows you the difference between package version 0.1-1 and 0.1-2."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:3
# 192a1f004d6b45cfa449431928ae17a5
msgid "Merging — Updating from Debian and Upstream"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:5
# d00014123ae847d0926be20afe961b75
msgid "Merging is one of the strengths of Bazaar, and something we do often in Ubuntu development.  Updates can be merged from Debian, from a new upstream release, and from other Ubuntu developers.  Doing it in Bazaar is pretty simple, and all based around the ``bzr merge`` command [#]_."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:10
# 27d4a5d939a54a3fb45356ef53887cb9
msgid "While you are in any branch's working directory, you can merge in a branch from a different location.  First check that you have no uncommitted changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:15
# 7a09cbad38ed48539418c226edd213bd
msgid "If that reports anything then you will either have to commit the changes, revert them, or shelve them to come back to later."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:20
# f9d0e946db8e45f5899eb62eac44c48c
msgid "Merging from Debian"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:22
# a0b5f4ae64b64b0f86951003431aef3c
msgid "Next run ``bzr merge`` passing the URL of the branch to merge from.  For example, to merge from the version of the package in Debian Squeeze_ run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:27
# 8d005bc3075748e480d4c3ad5fa0c260
msgid "This will merge the changes since the last merge point and leave you with changes to review.  This may cause some conflicts.  You can see everything that the ``merge`` command did by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:34
# fce9924abfae4a41aa0496dbb58fe2f7
msgid "If conflicts are reported then you need to edit those files to make them look how they should, removing the *conflict markers*.  Once you have done this, run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:41
# 5b31904b8bce4c5c86d169966345a303
msgid "This will resolve any conflicted files that you fixed, and then tell you what else you have to deal with."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:44
# 44fbc20a2f4d47ba8a8dbe9a7240e44a
msgid "Once any conflicts are resolved, and you have made any other changes that you need, you will add a new changelog entry, and commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:50
# 0501786370324b5fbf8896854cc1954a
msgid "as described earlier."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:52
# d7776a1b9a634bfa8e327c9ad1d11e11
msgid "However, before you commit, it is always a good thing to check all the Ubuntu changes by running::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:57
# e254935bae9f4b41ba6be47bd3cb3114
msgid "which will show the differences between the Debian (0.6.10-5) and Ubuntu versions (0.6.10-5ubuntu1).  In similar way you can compare to any other versions.  To see all available versions run::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:63
# d7ef549161704f339fd2fc350ede6907
msgid "After testing and committing the merge, you will need to seek sponsorship or upload to the archive in the normal way."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:66
# 942d67978a684929a4e8744ed03b8929
msgid "If you are going to build the source package from this merged branch, you would use the ``-S`` option to the ``bd`` command.  One other thing you'll want to consider is also using the ``--package-merge`` option.  This will add the appropriate ``-v`` and ``-sa`` options to the source package so that all the changelog entries since the last Ubuntu change will be included in your ``_source.changes`` file.  For example::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:77
# 1b8ec1cda4e245ff8f9cd2eeaf4d2b8e
msgid "Merging a new upstream version"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:79
# 6630f910398a4e7c83b59c3a8090c707
msgid "When upstream releases a new version (or you want to package a snapshot), you have to merge a tarball into your branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:82
# 449279787f734b6f84df6779e4ec940d
msgid "This is done using the ``bzr merge-upstream`` command.  If your package has a valid ``debian/watch`` file, from inside the branch that you want to merge to, just type this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:88
# 95f2a6297d0e4dad94f1f94b10472be5
msgid "This will download the tarball and merge it into your branch, automatically adding a ``debian/changelog`` entry for you.  ``bzr-builddeb`` looks at the ``debian/watch`` file for the upstream tarball location."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:92
# 9b3517982e35499ea17272496f626f0d
msgid "If you do *not* have a ``debian/watch`` file, you'll need to specify the location of the upstream tarball, and the version manually::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:97
# 189c73f404be46fbbd799d0c8d807072
msgid "The ``--version`` option is used to specify the upstream version that is being merged in, as the command isn't able to infer that (yet)."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:100
# b164fe957b2b43cc883e700f54d31986
msgid "The last parameter is the location of the tarball that you are upgrading to; this can either be a local filesystem path, or a http, ftp, sftp, etc. URI as shown.  The command will automatically download the tarball for you.  The tarball will be renamed appropriately and, if required, converted to ``.gz``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:105
# fc35bb3bfc27499996c54cc809870657
msgid "The `merge-upstream` command will either tell you that it completed successfully, or that there were conflicts.  Either way you will be able to review the changes before committing as normal."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:109
# 8d1bf3a4e7dd4724b5d36b17ef267808
msgid "If you are merging an upstream release into an existing Bazaar branch that has not previously used the UDD layout, ``bzr merge-upstream`` will fail with an error that the tag for the previous upstream version is not available; the merge can't be completed without knowing what base version to merge against. To work around this, create a tag in your existing repository for the last upstream version present there; e.g., if the last Ubuntu release was *1.1-0ubuntu3*, create the tag *upstream-1.1* pointing to the bzr revision you want to use as the tip of the upstream branch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-merging.rst:122
# e7a0e45eed0e43c8b9e4881564a3024c
msgid "You will need newer versions of ``bzr`` and the ``bzr-builddeb`` for the ``merge`` command to work.  Use the versions from Ubuntu 12.04 (Precise) or the development versions from the ``bzr`` PPA.  Specifically, you need ``bzr`` version 2.5 beta 5 or newer, and ``bzr-builddeb`` version 2.8.1 or newer.  For older versions, use the ``bzr merge-package`` command instead."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:3
# eb511bb99a904286a193d4b7b376ac94
msgid "Seeking Review and Sponsorship"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:5
# aa646c9caa704d719fcbcd6b6950c189
msgid "One of the biggest advantages to using the UDD workflow is to improve quality by seeking review of changes by your peers.  This is true whether or not you have upload rights yourself.  Of course, if you don't have upload rights, you will need to seek sponsorship."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:10
# b4a70f648fdb4656ae5b0eafc5fad36a
msgid "Once you are happy with your fix, and have a branch ready to go, the following steps can be used to publish your branch on Launchpad, link it to the bug issue, and create a *merge proposal* for others to review, and sponsors to upload."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:19
# ea45550eb5914967adfb858dbd5099ac
msgid "Pushing to Launchpad"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:21
# bb21b979549744a09559481d464ab204
msgid "We previously showed you how to :ref:`associate your branch to the bug <link-via-changelog>` using ``dch`` and ``bzr commit``.  However, the branch and bug don't actually get linked until you push the branch to Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:25
# b8554ace9ee14c4db7d82a1f96818348
msgid "It is not critical to have a link to a bug for every change you make, but if you are fixing reported bugs then linking to them will be useful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:28
# 8410684d83b349ea8caa825ca3821bf5
msgid "The general form of the URL you should push your branch to is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:32
# ce799efd4bf14acb96cc6e8c6a27774f
msgid "For example, to push your fix for bug 12345 in the Tomboy package for Natty, you'd use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:37
# df34c8a1fe3f48459a714b3a4da1df44
msgid "The last component of the path is arbitrary; it's up to you to pick something meaningful."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:40
# 9b7edd065ad54aafb32da56b93f0433f
msgid "However, this usually isn't enough to get Ubuntu developers to review and sponsor your change.  You should next submit a *merge proposal*."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:43
# 70362201dcb241e9a09034b6b0c997da
msgid "To do this open the bug page in a browser, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:47
# 8b761b96c13a4b8ba45eb61dc0ee9403
msgid "If that fails, then you can use::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:51
# 1ae558aaeb2a4c5091eb1d993b86dcb6
msgid "where most of the URL matches what you used for `bzr push`.  On this page, you'll see a link that says *Propose for merging into another branch*.  Type in an explanation of your change in the *Initial Comment* box.  Lastly, click *Propose Merge* to complete the process."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:56
# e25a0a27ae404e968767933d16cf642e
msgid "Merge proposals to package source branches will automatically subscribe the `~ubuntu-branches` team, which should be enough to reach an Ubuntu developer who can review and sponsor your package change."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:62
# f221f2e017bd47b09926a125453c837c
msgid "Generating a debdiff"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:64
# 32579f4cd801490b99d562b42ca9ff64
msgid "As noted above, some sponsors still prefer reviewing a *debdiff* attached to bug reports instead of a merge proposal.  If you're requested to include a debdiff, you can generate one like this (from inside your `bug-12345` branch)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:71
# 9e0b9298ebe841aa8f7fa4a46a7958e0
msgid "Another way is to is to open the merge proposal and download the diff."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:73
# 358c1dce5e9e454a8450729b44d56dd8
msgid "You should ensure that diff has the changes you expect, no more and no less. Name the diff appropriately, e.g. ``foobar-12345.debdiff`` and attach it to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:79
# 88554a98001f47129f25fdb7bafac549
msgid "Dealing with feedback from sponsors"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:81
# 025858e4d6d0463cbf141dcd773c559c
msgid "If a sponsor reviews your branch and asks you to change something, you can do this fairly easily.  Simply go to the branch that you were working in before, make the changes requested, and then commit::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:87
# a06456b9112842d58041c69941342502
msgid "Now when you push your branch to Launchpad, Bazaar will remembered where you pushed to, and will update the branch on Launchpad with your latest commits. All you need to do is::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:93
# abb1660d69e44dc9baf0538909d55706
msgid "You can then reply to the merge proposal review email explaining what you changed, and asking for re-review, or you can reply on the merge proposal page in Launchpad."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:97
# c46194d4d80042ab9c78ca2b5f2e3b26
msgid "Note that if you are sponsored via a debdiff attached to a bug report you need to manually update by generating a new diff and attaching that to the bug report."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:103
# 9aa5187a42ab4d23a7ab9ad6a13ee262
msgid "Expectations"
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:105
# b41f95001587418d8c8351560e9e7336
msgid "The Ubuntu developers have set up a schedule of \"patch pilots\", who regularly review the sponsoring queue and give feedback on branches and patches. Even though this measure has been put in place it might still take several days until you hear back. This depends on how busy everybody is, if the development release is currently frozen, or other factors."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:111
# 02aef8b07fd845db8bb0da0568bc7b2c
msgid "If you haven't heard back in a while, feel free to join `#ubuntu-devel` on `irc.freenode.net` and find out if somebody can help you there."
msgstr ""

#: ../ubuntu-packaging-guide/udd-sponsorship.rst:114
# 482181351935402989ba4c6668db8b5d
msgid "For more information on the generall sponsorship process, review the documentation on our wiki as well: https://wiki.ubuntu.com/SponsorshipProcess"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:3
# f47775ba47fc459bab550f353dc6655e
msgid "Uploading a package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:5
# 84270f9690cf43d8a7b65771d13a384f
msgid "Once your merge proposal is reviewed and approved, you will want to upload your package, either to the archive (if you have permission) or to your `Personal Package Archive`_ (PPA).  You might also want to do an upload if you are sponsoring someone else's changes."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:12
# 908e4834822b4066aff2aa1878c5716e
msgid "Uploading a change made by you"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:14
# 4044e56e98724b9e8d1386cedd363142
msgid "When you have a branch with a change that you would like to upload you need to get that change back on to the main source branch, build a source package, and then upload it."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:18
# c92ff7dfb4f74697aa04a63bc7d80811
msgid "First, you need to check that you have the latest version of the package in your checkout of the development package trunk::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:24
# 466c0435b55b4bed9d3e2d82df47a22a
msgid "This pulls in any changes that may have been committed while you were working on your fix.  From here, you have several options.  If the changes on the trunk are large and you feel should be tested along with your change you can merge them into your bug fix branch and test there.  If not, then you can carry on merging your bug fix branch into the development trunk branch.  As of bzr 2.5 and bzr-builddeb 2.8.1, this works with just the standard ``merge`` command::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:34
# 5b117c1a909048f5b9f6d701c5011883
msgid "For older versions of bzr, you can use the ``merge-package`` command instead::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:38
# 4cf336c9bda643f1a94607a54f9eedea
msgid "This will merge the two trees, possibly producing conflicts, which you'll need to resolve manually."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:41
# 71343b18a01b4b938941774aad9e81f9
msgid "Next you should make sure the ``debian/changelog`` is as you would like, with the correct distribution, version number, etc."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:44
# 1d95f57a1e614252a8e0d35f3097577c
msgid "Once that is done you should review the change you are about to commit with ``bzr diff``.  This should show you the same changes as a debdiff would before you upload the source package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:48
# c294959788d44f668d7d5391d1f308c5
msgid "The next step is to build and test the modified source package as you normally would::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:53
# da43c09d983a4e4ebf04d63f86fd6509
msgid "When you're finally happy with your branch, make sure you've committed all your changes, then tag the branch with the changelog's version number.  The ``bzr tag`` command will do this for you automatically when given no arguments::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:60
# bc2942c11bd7402e82d1f23cee7d8a9d
msgid "This tag will tell the package importer that what is in the Bazaar branch is the same as in the archive."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:63
# 83120d49eb6e4f74a702eac13f2ea089
msgid "Now you can push the changes back to Launchpad::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:67
# 79b59925262e48c28e1bcd825127e143
msgid "(Change the destination if you are uploading an SRU or similar.)"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:69
# f33d665fe68444f7b71c07c032604e23
msgid "You need one last step to get your changes uploaded into Ubuntu or your PPA; you need to ``dput`` the source package to the appropriate location.  For example, if you want to upload your changes to your PPA, you'd do::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:75
# dca25c4404124fbaa11b3854b24c3006
msgid "or, if you have permission to upload to the primary archive::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:79
# 2ffab77ee1034e0484d6b58fa70e231e
msgid "You are now free to delete your feature branch, as it is merged, and can be re-downloaded from Launchpad if needed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:84
# 63ba2be5d93e44b38ed7cfdde0b5511a
msgid "Sponsoring a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:86
# 2aa8e6972d0a40138b69f650398ef5d7
msgid "Sponsoring someone else's change is just like the above procedure, but instead of merging from a branch you created, you merge from the branch in the merge proposal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:92
# d06067fa9f9d4a109195e61d1715594a
msgid "If there are lots of merge conflicts you would probably want to ask the contributor to fix them up.  See the next section to learn how to cancel a pending merge."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:96
# b901ff9b55be4e858f81173b7c426e61
msgid "But if the changes look good, commit and then follow the rest of the uploading process::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:103
# 729657f202fa4c69a964fdab0c2fd0d6
msgid "Canceling an upload"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:105
# fd13d39388a34a3584d576fa414c4f44
msgid "At any time before you `dput` the source package you can decide to cancel an upload and revert the changes::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:110
# d81d4a9159e84e4f820cf29ffe21154b
msgid "You can do this if you notice something needs more work, or if you would like to ask the contributor to fix up conflicts when sponsoring something."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:115
# eedbb58cbac44635a44ecbaf117d7bb9
msgid "Sponsoring something and making your own changes"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:117
# c675820a674d49b4bd1e995d372c9f3d
msgid "If you are going to sponsor someone's work, but you would like to roll it up with some changes of your own then you can merge their work in to a separate branch first."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:121
# d208ed1e5bd44e4e8a76c559e3d0e03a
msgid "If you already have a branch where you are working on the package and you would like to include their changes, then simply run the ``bzr merge`` from that branch, instead of the checkout of the development package.  You can then make the changes and commit, and then carry on with your changes to the package."
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:127
# 60abc3998f4b4fbeb7ab562a06d47667
msgid "If you don't have an existing branch, but you know you would like to make changes based on what the contributor provides then you should start by grabbing their branch::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-uploading.rst:133
# edd5336a5f504b8c949a83f9b2e790fa
msgid "then work in this new branch, and then merge it in to the main one and upload as if it was your own work.  The contributor will still be mentioned in the changelog, and Bazaar will correctly attribute the changes they made to them."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:3
# 32e69ec1cccb47409fb665ac8677d9b7
msgid "Working on a Package"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:5
# f3a3497125524f02acbeee0e7569f78c
msgid "Once you have the source package branch in a shared repository, you'll want to create additional branches for the fixes or other work you plan to do.  You'll want to base your branch off the package source branch for the distro release that you plan to upload to.  Usually this is the current development release, but it may be older releases if you're backporting to an SRU for example."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:13
# 81058c652f894be7b2413659c52b0763
msgid "Branching for a change"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:15
# d4b689a0f3e74242aa89a0f887e3fb29
msgid "The first thing to do is to make sure your source package branch is up-to-date.  It will be if you just checked it out, otherwise do this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:21
# 332dfc22da59482cbc247660ee09b9e6
msgid "Any updates to the package that have uploaded since your checkout will now be pulled in.  You do not want to make changes to this branch.  Instead, create a branch that will contain just the changes you're going to make.  Let's say you want to fix bug 12345 for the Tomboy project.  When you're in the shared repository you previously created for Tomboy, you can create your bug fix branch like this::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:31
# e3b8ec414028469ea8e3675cb4f222d5
msgid "Now you can do all my work in the ``bug-12345`` directory.  You make changes there as necessary, committing as you go along.  This is just like doing any kind of software development with Bazaar.  You can make intermediate commits as often as you like, and when your changes are finished, you will use the standard ``dch`` command (from the ``devscripts`` package)::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:39
# 602c55fb57f84041ba436b87cd21a708
msgid "This will drop you in an editor to add an entry to the `debian/changelog` file."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:44
# a2c11b18435a47039970b4adb855a818
msgid "When you added your ``debian/changelog`` entry, you should have included a bug fix tag that indicated which Launchpad bug issue you're fixing.  The format of this textual tag is pretty strict: ``LP: #12345``.  The space between the ``:`` and the ``#`` is required and of course you should use the actual bug number that you're fixing.  Your ``debian/changelog`` entry might look something like::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:57
# 4f61fc4302e94531b847cef26d3a5fb5
msgid "Commit with the normal::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:61
# b5a4cc2262b542bea3ff32b15b5dae72
msgid "A hook in bzr-builddeb will use the debian/changelog text as the commit message and set the tag to mark bug #12345 as fixed."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:64
# e8a64fa57675412ea3d6419cc2f714f8
msgid "This only works with bzr-builddeb 2.7.5 and bzr 2.4, for older versions use ``debcommit``."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:71
# bee4ec9aa4e641f190246784bc6b4c9c
msgid "Along the way, you'll want to build your branch so that you can test it to make sure it does actually fix the bug."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:74
# 60cbc1da4bb441b6a5216be5a9075ea9
msgid "In order to build the package you can use the ``bzr builddeb`` command from the ``bzr-builddeb`` package.  You can build a source package with::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:79
# 24c60cc7baed4eebbfee1f85fa51c50c
msgid "(``bd`` is an alias for ``builddeb``.)  You can leave the package unsigned by appending ``-- -uc -us`` to the command."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:82
# 966f6541bbb84ae1b1e581f6d92e315d
msgid "It is also possible to use your normal tools, as long as they are able to strip the .bzr directories from the package, e.g.::"
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:87
# 07a1d9c0a113478bab2f0b9fe6daf41c
msgid "If you ever see an error related to trying to build a native package without a tarball, check to see if there is a ``.bzr-builddeb/default.conf`` file erroneously specifying the package as native.  If the changelog version has a dash in it, then it's not a native package, so remove the configuration file. Note that while ``bzr builddeb`` has a ``--native`` switch, it does not have a ``--no-native`` switch."
msgstr ""

#: ../ubuntu-packaging-guide/udd-working.rst:94
# 9d18965b6a3743bbb5212c7609d453f2
msgid "Once you've got the source package, you can build it as normal with ``pbuilder-dist`` (or ``pbuilder`` or `sbuild`_)."
msgstr ""

